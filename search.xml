<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>论文精读记录—A Survey on the Memory Mechanism of Large Language Model based Agents</title>
      <link href="/2025/04/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94A-Survey-on-the-Memory-Mechanism-of-Large-Language-Model-based-Agents/"/>
      <url>/2025/04/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94A-Survey-on-the-Memory-Mechanism-of-Large-Language-Model-based-Agents/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 论文精读 </category>
          
          <category> 精读内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2025年4月 </tag>
            
            <tag> 论文精读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文精读记录—ReAct: Synergizing Reasoning and Acting in Language Models</title>
      <link href="/2025/04/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94ReAct-Synergizing-Reasoning-and-Acting-in-Language-Models/"/>
      <url>/2025/04/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94ReAct-Synergizing-Reasoning-and-Acting-in-Language-Models/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 论文精读 </category>
          
          <category> 精读内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2025年4月 </tag>
            
            <tag> 论文精读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文精读记录—Toolformer: Language Models Can Teach Themselves to Use Tools</title>
      <link href="/2025/04/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94Toolformer-Language-Models-Can-Teach-Themselves-to-Use-Tools/"/>
      <url>/2025/04/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94Toolformer-Language-Models-Can-Teach-Themselves-to-Use-Tools/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 论文精读 </category>
          
          <category> 精读内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2025年4月 </tag>
            
            <tag> 论文精读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文精读记录—Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks</title>
      <link href="/2025/04/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94Retrieval-Augmented-Generation-for-Knowledge-Intensive-NLP-Tasks/"/>
      <url>/2025/04/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94Retrieval-Augmented-Generation-for-Knowledge-Intensive-NLP-Tasks/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>&emsp;&emsp;RAG也就是Retrieval-Augmented Generation，即检索增强生成技术。该技术将检索与生成相结合，通过检索的方式获取知识，再通过生成的方式输出结果。该技术可以应用于各种NLP任务，如问答、文本生成等。<br></p><p>&emsp;&emsp;这个技术最初起源于2020年Facebook的一篇论文，也就是这篇<a href="https://proceedings.neurips.cc/paper/2020/hash/6b493230205f780e1bc26945df7481e5-Abstract.html">Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks, 2020</a>。也是RAG相关技术的基础。<br></p><p><img src="/../imgs/%E8%AE%BA%E6%96%87%E7%B2%BE%E5%BA%A6RAG-Patrick/rag1.png" alt="Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks, 2020"></p><p>&emsp;&emsp;这篇论文所解决的问题非常简单，就是如何让大模型来利用外部知识来进行生成。预训练模型的知识一般是储存在参数中的，因此模型无法了解训练集之外的知识，在此前，如果要让模型拥有更多的知识，一般的做法是通过fine-tuning也就是微调来更新模型的知识。<br></p><p>&emsp;&emsp;一般来说，预训练模型能够学习大量的知识并且取得不错的效果，但它们仍然有着以下的一系列问题：<br></p><ol><li><strong>知识获取能力有限</strong>： 无法轻松扩展或更新知识库，每当有新的知识时，模型就需要重新进行微调，而且训练模型的成本是很高的。</li><li><strong>知识操作能力有限</strong>： 难以精确地检索和利用知识。</li><li><strong>缺乏可解释性</strong>： 难以解释模型决策的依据。</li><li><strong>可能产生“幻觉”</strong>： 生成的文本可能包含错误信息。所有AI模型的底层原理都基于数学概率，大模型也不例外。</li></ol><p>&emsp;&emsp;为了解决这些问题，这篇论文就提出了RAG的方法，将与训练的参数化记忆（seq2seq模型）与非参数化记忆（密集向量索引的维基百科）相互结合。<br></p><p>&emsp;&emsp;RAG的核心思想有两个：<br></p><ol><li>检索相关文档： 使用预训练的神经检索器 (DPR) 从维基百科中检索与输入相关的文档。</li><li>结合生成： 将检索到的文档与输入一起作为上下文，使用 seq2seq 模型生成输出。</li></ol><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>&emsp;&emsp;这一章节详细介绍了RAG模型的构建方式与训练过程，包括模型架构、检索器和生成器组件的介绍，以及训练和编码过程。<br></p><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p>&emsp;&emsp;这篇文章提出了RAG模型，这个模型包括两个重要的组件，检索器和生成器。<br></p><p><img src="/../imgs/%E8%AE%BA%E6%96%87%E7%B2%BE%E5%BA%A6RAG-Patrick/rag2.png" alt="RAG Overview"></p><ol><li><strong>检索器</strong>： pη(z|x)，其参数η返回给定查询x的文本段落(top-K截断)分布</li><li><strong>生成器</strong>：一个由θ作为参数的生成器生成一个token基于前i-1个y，原始的输入x和一个检索的文章z</li></ol><p>&emsp;&emsp;该模型使用输入序列x检索文本文档z，并在生成目标序列y时将其用作附加的上下文。<br></p><p>&emsp;&emsp;为了端到端训练检索器和生成器，这篇文章将检索到的文档视为一个潜在变量。并提出了两种RAG模型：<br></p><ol><li><strong>RAG-Sequence模型</strong>：使用相同的检索文档来生成整个序列。模型将检索到的文档视为单个潜在变量，并通过 top-K 近似值对其进行边缘化，以获得 seq2seq 概率 p(y|x)。</li><li><strong>RAG-Token模型</strong>：可以针对每个目标标记检索不同的潜在文档。模型为每个文档生成下一个输出标记的分布，然后进行边缘化。</li></ol><p>&emsp;&emsp;<strong>RAG-Sequence Model</strong>从技术上上来讲，就是将检索到的文档视为一个被边缘化的潜在变量，通过top-K近似来获得。具体而言，就是用检索器检索前K个文档，生成器生成每个文档的输出序列概率，然后将其边缘化。<br></p><p><img src="/../imgs/%E8%AE%BA%E6%96%87%E7%B2%BE%E5%BA%A6RAG-Patrick/model1.png" alt="RAG-Sequence Model"></p><p>&emsp;&emsp;RAG-Token Model具体来及那个，就是用检索器检索前K个文档，然后生成器为每个文档生成下一个输出令牌的分布，然后将其边缘化，并使用如下令牌重复此过程。<br></p><p><img src="/../imgs/%E8%AE%BA%E6%96%87%E7%B2%BE%E5%BA%A6RAG-Patrick/model2.png" alt="RAG-Token Model"></p><p>&emsp;&emsp;RAG还可以通过将目标类视为长度为1的目标序列来用于序列分类任务，在这种情况下，RAG-sequence和RAG-Token是等效的。 <br></p><h3 id="检索器：DPR"><a href="#检索器：DPR" class="headerlink" title="检索器：DPR"></a>检索器：DPR</h3><p>&emsp;&emsp;这篇论文中采用了Dense Passage Retriever(DPR)作为检索器，它是一种基于BERT的双编码架构，可以有效的找到与输入文本最相关的文档。<br></p><p><img src="/../imgs/%E8%AE%BA%E6%96%87%E7%B2%BE%E5%BA%A6RAG-Patrick/DPR1.png" alt="DPR"></p><p>&emsp;&emsp;其中d(z)是由BERTBASE文档编码器生成的文档的密集表示，q(x)是由同样基于BERTBASE的查询编码器生成的查询表示。计算具有最高先验概率pη(z|x)的k个文档z的列表top-k(pη(·jx))是一个最大内积搜索(MIPS)问题，可以在次线性时间内近似求解。我们使用来自DPR的预训练双编码器来初始化我们的检索器并构建文档索引。该检索器被训练来检索包含TriviaQA问题和Natural questions答案的文档。我们把文档索引称为非参数存储器。<br></p><h3 id="生成器：BERT"><a href="#生成器：BERT" class="headerlink" title="生成器：BERT"></a>生成器：BERT</h3><p>&emsp;&emsp;生成器负责根据输入文本和检索到的文档生成输出文本，比如答案。这篇论文中使用了BART作为生成器，这是一种预训练的序列到序列（seq2seq）的模型，可以生成流畅、通顺的文本。<br></p><p>&emsp;&emsp;组件pθ(yi|x;z;Y1:i−1)可以使用任何编码器-解码器建模。我们使用BART-large，一种预训练的seq2seq变压器，具有400M参数。为了在从BART生成时将输入x与检索到的内容z结合起来，我们只需将它们连接起来。BART使用去噪目标和各种不同的去噪函数进行预训练。它在多种生成任务上获得了最先进的结果，并且优于同等规模的T5模型。我们将BART发生器参数θ作为参数存储器。<br></p><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><p>&emsp;&emsp;论文联合训练检索器和生成器组件，而不直接监督应该检索哪些文档。给定输入&#x2F;输出对的微调训练语料库(xj;Yj)，论文在训练期间更新文档编码器BERTd的成本很高，因为它需要定期更新文档索引，就像REALM在预训练期间所做的那样。<br></p><h1 id="论文实验"><a href="#论文实验" class="headerlink" title="论文实验"></a>论文实验</h1><p>&emsp;&emsp;论文对 RAG 模型在多个知识密集型 NLP 任务上进行了评估，包括：<br></p><ol><li><strong>开放域问答（Open-Domain QA）</strong>：RAG 模型在三个开放域 QA 任务上超过了参数化 seq2seq 模型和任务特定检索-提取架构，取得了最先进的性能。例如，在使用 15 个检索文档的 RAG-Token 模型和使用 50 个检索文档的 RAG-Sequence 模型中，采用了贪婪解码（greedy decoding）策略。</li><li><strong>语言生成任务</strong>：RAG 模型生成的语言比仅使用参数化 seq2seq 基线的语言更具体、多样且符合事实。在语言生成任务中，RAG 模型使用了 10 个检索文档，并采用了 beam search（束搜索）策略。</li></ol><p>&emsp;&emsp;实验结果表明，RAG 模型在知识密集型任务上表现出显著优势，同时在语言生成质量上也优于传统模型。具体来说：<br></p><ol><li>RAG-Sequence 模型适合生成较长的连续文本，确保上下文的一致性。</li><li>RAG-Token 模型在需要高精度知识访问的任务中表现更优，能够为每个 token 提供更相关的上下文。</li></ol><table><thead><tr><th><strong>任务类型</strong></th><th><strong>模型形式</strong></th><th><strong>检索文档数量</strong></th><th><strong>解码策略</strong></th><th><strong>性能表现</strong></th></tr></thead><tbody><tr><td>开放域问答</td><td>RAG-Token</td><td>15</td><td>贪婪解码</td><td>超过参数化 seq2seq 模型</td></tr><tr><td>开放域问答</td><td>RAG-Sequence</td><td>50</td><td>贪婪解码</td><td>超过任务特定检索-提取架构</td></tr><tr><td>语言生成</td><td>RAG-Token&#x2F;Sequence</td><td>10</td><td>Beam Search</td><td>生成更具体、多样、符合事实的语言</td></tr></tbody></table><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&emsp;&emsp;这篇论文是一篇开创性论文，提出了RAG模型，创新性地结合参数化与非参数化记忆，显著提升了知识密集型NLP任务的性能。<br><br>&emsp;&emsp;现在RAG的思想已经被广泛的应用在了对话系统、问答系统和生成式AI中，比如GPT的知识增强变体。其模块化的设计也使其易于集成到现有的NLP框架中。<br><br>&emsp;&emsp;RAG方法还启发了有大量的后续研究，比如改进检索算法、扩展知识库类型、优化生成质量等。其在NLP领域有着持久的影响力。<br></p><h1 id="Naive-RAG"><a href="#Naive-RAG" class="headerlink" title="Naive RAG"></a>Naive RAG</h1><p>&emsp;&emsp;以以下代码为一个简单的例子<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> langchain_community.embeddings <span class="hljs-keyword">import</span> HuggingFaceBgeEmbeddings<br><span class="hljs-keyword">from</span> langchain.vectorstores <span class="hljs-keyword">import</span> FAISS<br><br><span class="hljs-comment"># 自定义分块函数：按段落符号（\n\n）分割</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">split_by_paragraph</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-comment"># 按双换行符分割，并清理空白字符</span><br>    chunks = [chunk.strip() <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> text.split(<span class="hljs-string">&#x27;\n\n&#x27;</span>) <span class="hljs-keyword">if</span> chunk.strip()]<br>    <span class="hljs-keyword">return</span> chunks<br><br><span class="hljs-comment"># 初始化嵌入模型</span><br>model = HuggingFaceBgeEmbeddings(<br>    model_name=<span class="hljs-string">&quot;/home/liuchenghang/huggingface_cache/bge-large-en-v1.5&quot;</span><br>)<br><br><span class="hljs-comment"># 读取和分块</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;sample.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    text = f.read()<br>chunks = split_by_paragraph(text)<br><br><span class="hljs-comment"># 索引</span><br>vectorstore = FAISS.from_texts(chunks, model)<br>vectorstore.save_local(<span class="hljs-string">&quot;./data/faiss_index&quot;</span>)<br><br><span class="hljs-comment"># 检索</span><br>query = <span class="hljs-string">&quot;谁是西瓜？&quot;</span><br>results = vectorstore.similarity_search(query, k=<span class="hljs-number">5</span>)<br><span class="hljs-keyword">for</span> i, doc <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(results):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Result <span class="hljs-subst">&#123;i+<span class="hljs-number">1</span>&#125;</span>: <span class="hljs-subst">&#123;doc.page_content&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 论文精读 </category>
          
          <category> 精读内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2025年4月 </tag>
            
            <tag> 论文精读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文精读记录—Chain-of-Thought Prompting Elicits Reasoning in Large Language Models</title>
      <link href="/2025/04/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94Chain-of-Thought-Prompting-Elicits-Reasoning-in-Large-Language-Models/"/>
      <url>/2025/04/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94Chain-of-Thought-Prompting-Elicits-Reasoning-in-Large-Language-Models/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 论文精读 </category>
          
          <category> 精读内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2025年4月 </tag>
            
            <tag> 论文精读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文精读记录—LoRA: Low-Rank Adaptation of Large Language Models</title>
      <link href="/2025/04/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94LoRA-Low-Rank-Adaptation-of-Large-Language-Models/"/>
      <url>/2025/04/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94LoRA-Low-Rank-Adaptation-of-Large-Language-Models/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 论文精读 </category>
          
          <category> 精读内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2025年4月 </tag>
            
            <tag> 论文精读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文精读记录—Attention Is All You Need</title>
      <link href="/2025/04/07/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94Attention-Is-All-You-Need/"/>
      <url>/2025/04/07/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94Attention-Is-All-You-Need/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 论文精读 </category>
          
          <category> 精读内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2025年4月 </tag>
            
            <tag> 论文精读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文精读记录—2025年4月汇总</title>
      <link href="/2025/04/07/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%942025%E5%B9%B44%E6%9C%88%E6%B1%87%E6%80%BB/"/>
      <url>/2025/04/07/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%942025%E5%B9%B44%E6%9C%88%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>编号</th><th>标题</th><th>来源</th><th>类型</th><th>阅读日期</th><th>精读地址</th><th>状态</th></tr></thead><tbody><tr><td>1</td><td>《Attention Is All You Need》</td><td>NIPS 2017</td><td>大模型基础架构</td><td>2025-04-07</td><td><a href="/2025/04/07/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94Attention-Is-All-You-Need">阅读全文</a></td><td>✔️</td></tr><tr><td>2</td><td>《LoRA: Low-Rank Adaptation of Large Language Models》</td><td>ICLR 2022</td><td>大模型微调</td><td>2025-04-07</td><td><a href="/2025/04/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94LoRA-Low-Rank-Adaptation-of-Large-Language-Models">阅读全文</a></td><td>✔️</td></tr><tr><td>3</td><td>《Chain-of-Thought Prompting Elicits Reasoning in Large Language Models》</td><td>NIPS 2022</td><td>大模型推理与知识增强</td><td>2025-04-07</td><td><a href="/2025/04/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94Chain-of-Thought-Prompting-Elicits-Reasoning-in-Large-Language-Models">阅读全文</a></td><td>✔️</td></tr><tr><td>4</td><td>《Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks》</td><td>NIPS 2020</td><td>大模型推理与知识增强</td><td>2025-04-07</td><td><a href="/2025/04/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94Retrieval-Augmented-Generation-for-Knowledge-Intensive-NLP-Tasks">阅读全文</a></td><td>✔️</td></tr><tr><td>5</td><td>《Toolformer: Language Models Can Teach Themselves to Use Tools》</td><td>NIPS 2023</td><td>大模型推理与知识增强</td><td>2025-04-07</td><td><a href="/2025/04/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94Toolformer-Language-Models-Can-Teach-Themselves-to-Use-Tools">阅读全文</a></td><td>✔️</td></tr><tr><td>6</td><td>《ReAct: Synergizing Reasoning and Acting in Language Models》</td><td>PAR 2023</td><td>大模型应用与agent系统</td><td>2025-04-07</td><td><a href="/2025/04/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94ReAct-Synergizing-Reasoning-and-Acting-in-Language-Models">阅读全文</a></td><td>✔️</td></tr><tr><td>7</td><td>《A Survey on the Memory Mechanism of Large Language Model based Agents》</td><td>aixiv 2024</td><td>综述</td><td>2025-04-07</td><td><a href="/2025/04/08/%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E8%AE%B0%E5%BD%95%E2%80%94A-Survey-on-the-Memory-Mechanism-of-Large-Language-Model-based-Agents">阅读全文</a></td><td>✔️</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 论文精读 </category>
          
          <category> 导航目录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2025年4月 </tag>
            
            <tag> 论文精读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—微服务—技术栈实践(11)—分布式事务</title>
      <link href="/2024/10/10/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-11-%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
      <url>/2024/10/10/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-11-%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="分布式事务一致性"><a href="#分布式事务一致性" class="headerlink" title="分布式事务一致性"></a>分布式事务一致性</h2><p>&emsp;&emsp;在微服务架构中，系统被拆分为多个独立的服务，每个服务拥有自己的数据库。这种架构在带来灵活性和可扩展性的同时，也引入了新的问题，其中之一就是分布式事务。分布式事务是指一个业务操作需要跨多个服务和数据库才能完成，这时需要确保所有服务和数据库的操作要么全部成功，要么全部失败，以保持数据的一致性。<br></p><h3 id="分布式事务所存在的挑战"><a href="#分布式事务所存在的挑战" class="headerlink" title="分布式事务所存在的挑战"></a>分布式事务所存在的挑战</h3><p>&emsp;&emsp;分布式系统中的事务管理要比传统单体应用复杂得多。<br><br>&emsp;&emsp;首先，<strong>复杂网络和不可靠</strong>是一个问题。在分布式系统中，各个服务间通过网络通信，网络的不可靠性增加了事务的复杂性。<br><br>&emsp;&emsp;第二，<strong>数据一致性</strong>是一个问题。各个服务可能有不同的数据源和操作，如何保证所有服务中的数据保持一致是分布式事务的关键问题。<br><br>&emsp;&emsp;第三，<strong>隔离性</strong>又是一个问题。多个事务并发执行时，如何避免事务之间的冲突和数据不一致？<br><br>&emsp;&emsp;最后，还有一个问题是<strong>可用性</strong>，如何在保证事务一致性的同时，不影响系统的高可用性？<br></p><h3 id="分布式事务常见解决方案"><a href="#分布式事务常见解决方案" class="headerlink" title="分布式事务常见解决方案"></a>分布式事务常见解决方案</h3><p>&emsp;&emsp;因此，分布式事务有多种常见的实现方式，包括：<br></p><h4 id="两阶段提交协议（2PC）"><a href="#两阶段提交协议（2PC）" class="headerlink" title="两阶段提交协议（2PC）"></a>两阶段提交协议（2PC）</h4><p>&emsp;&emsp;<strong>第一阶段</strong>：协调者向所有参与者发出“准备”请求，各个参与者执行本地事务并锁定相关资源，但不提交。<br><br>&emsp;&emsp;<strong>第二阶段</strong>：如果所有参与者都准备好了，协调者发出“提交”请求，所有参与者提交本地事务；否则，发出“回滚”请求，所有参与者回滚本地事务。<br><br>&emsp;&emsp;<strong>缺点</strong>：2PC 的问题在于性能开销大，参与者锁定资源的时间较长，且存在单点故障风险（协调者故障）。<br></p><h4 id="三阶段提交协议（3PC）"><a href="#三阶段提交协议（3PC）" class="headerlink" title="三阶段提交协议（3PC）"></a>三阶段提交协议（3PC）</h4><p>&emsp;&emsp;相比 2PC，3PC 引入了超时机制和中间阶段，进一步减少了单点故障问题，但依然有性能和复杂性问题。<br></p><h4 id="TCC（Try-Confirm-Cancel）模式"><a href="#TCC（Try-Confirm-Cancel）模式" class="headerlink" title="TCC（Try-Confirm-Cancel）模式"></a>TCC（Try-Confirm-Cancel）模式</h4><p>&emsp;&emsp;<strong>Try 阶段</strong>：尝试执行业务操作并预留必要的资源。<br><br>&emsp;&emsp;<strong>Confirm 阶段</strong>：在所有服务的 Try 成功后，确认执行业务操作，真正提交事务。<br><br>&emsp;&emsp;<strong>Cancel 阶段</strong>：如果 Try 阶段失败，则执行补偿操作，释放预留资源。<br><br>&emsp;&emsp;<strong>优点</strong>：TCC 适合对事务有严格控制的业务场景，灵活性较高，但需要开发人员手动编写补偿逻辑。<br><br>&emsp;&emsp;除此之外，还有如<strong>本地消息表保证最终一致性</strong>、<strong>saga模式</strong>（把长事务分解为多个小事务，小事务执行后才会触发下一个小事务。如果某个事务失败，会调用相应的补偿事务来回滚已完成的事务。）等等。<br></p><h2 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h2><p>&emsp;&emsp;Seata 是阿里巴巴开源的一款分布式事务解决方案，它旨在解决微服务架构下的分布式事务问题。Seata 提供了一种简单、有效的分布式事务解决方案，主要包括 AT（Automatic Transaction）、TCC、Saga 和 XA 四种模式，覆盖了从简单到复杂的分布式事务场景。<br></p><h3 id="Seata的架构"><a href="#Seata的架构" class="headerlink" title="Seata的架构"></a>Seata的架构</h3><p>&emsp;&emsp;Seata 的核心架构包括以下三个组件：<br><br>&emsp;&emsp;<strong>TM（Transaction Manager，事务管理器）</strong>：负责全局事务的开始、提交和回滚。<br><br>&emsp;&emsp;<strong>RM（Resource Manager，资源管理器）</strong>：负责管理本地事务和资源，与 TC 协调提交或回滚。<br><br>&emsp;&emsp;<strong>TC（Transaction Coordinator，事务协调器）</strong>：全局事务的协调者，维护事务状态，并驱动事务的提交或回滚。<br><br>&emsp;&emsp;在 Seata 中，AT 模式是其核心模式之一。它将 2PC 的复杂性隐藏起来，开发者只需要编写普通的业务逻辑，Seata 自动将 SQL 的操作转化为两阶段提交流程。<br></p><h3 id="Seata-的-四种-模式"><a href="#Seata-的-四种-模式" class="headerlink" title="Seata 的 四种 模式"></a>Seata 的 四种 模式</h3><p>&emsp;&emsp;<strong>AT 模式</strong>类似于 2PC，它会自动生成回滚日志来支持分布式事务。适用于基于数据库的分布式事务场景，开发者不需要手动编写复杂的事务控制逻辑，系统会自动生成回滚日志并进行事务恢复。<br><br>&emsp;&emsp;<strong>TCC</strong> 是一种灵活的分布式事务模式，开发者需要为每个操作定义 Try、Confirm 和 Cancel 方法，用于分别执行事务尝试、确认和回滚。提供了高灵活性，适用于复杂的业务逻辑，但需要开发者编写大量自定义代码。<br><br>&emsp;&emsp;Seata 提供 <strong>Saga 模式</strong>的支持，适用于长事务场景，主要通过补偿机制来处理事务失败后的回滚。<br><br>&emsp;&emsp;<strong>XA</strong>是一种分布式事务协议，由 X&#x2F;Open 标准定义，Seata 通过支持 XA 模式实现数据库级别的分布式事务。该模式适用于需要强一致性的场景，但性能相对较差，资源锁定时间长。<br></p><h3 id="Seata的部署"><a href="#Seata的部署" class="headerlink" title="Seata的部署"></a>Seata的部署</h3><p>&emsp;&emsp;首先，需要下载并启动seata，建议采用docker方式进行简单的部署。<br></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">docker pull seataio/seata-<span class="hljs-keyword">server</span><br>docker run -d --name seata-<span class="hljs-keyword">server</span> -p <span class="hljs-number">8091</span>:<span class="hljs-number">8091</span> seataio/seata-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs stylus">docker logs seata-server<br>███████╗███████╗ █████╗ ████████╗ █████╗<br>██╔════╝██╔════╝██╔══██╗╚══██╔══╝██╔══██╗<br>███████╗█████╗  ███████║   ██║   ███████║<br>╚════██║██╔══╝  ██╔══██║   ██║   ██╔══██║<br>███████║███████╗██║  ██║   ██║   ██║  ██║<br>╚══════╝╚══════╝╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝<br><br><br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">36.340</span>  INFO --- <span class="hljs-selector-attr">[                     main]</span> <span class="hljs-selector-attr">[ta.config.ConfigurationFactory]</span> <span class="hljs-selector-attr">[                load]</span>  <span class="hljs-selector-attr">[]</span> : load Configuration from :Spring Configuration<br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">36.355</span>  INFO --- <span class="hljs-selector-attr">[                     main]</span> <span class="hljs-selector-attr">[ta.config.ConfigurationFactory]</span> <span class="hljs-selector-attr">[  buildConfiguration]</span>  <span class="hljs-selector-attr">[]</span> : load Configuration from :Spring Configuration<br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">36.381</span>  INFO --- <span class="hljs-selector-attr">[                     main]</span> <span class="hljs-selector-attr">[seata.server.ServerApplication]</span> <span class="hljs-selector-attr">[         logStarting]</span>  <span class="hljs-selector-attr">[]</span> : Starting ServerApplication using Java <span class="hljs-number">1.8</span>.<span class="hljs-number">0</span>_342 on <span class="hljs-number">7583</span>cdde42ef with PID <span class="hljs-number">1</span> (/seata-server/classes started by root <span class="hljs-keyword">in</span> /seata-server)<br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">36.382</span>  INFO --- <span class="hljs-selector-attr">[                     main]</span> <span class="hljs-selector-attr">[seata.server.ServerApplication]</span> <span class="hljs-selector-attr">[ogStartupProfileInfo]</span>  <span class="hljs-selector-attr">[]</span> : No active profile set, falling back to <span class="hljs-number">1</span> default profile: <span class="hljs-string">&quot;default&quot;</span><br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">38.043</span>  INFO --- <span class="hljs-selector-attr">[                     main]</span> <span class="hljs-selector-attr">[mbedded.tomcat.TomcatWebServer]</span> <span class="hljs-selector-attr">[          initialize]</span>  <span class="hljs-selector-attr">[]</span> : Tomcat initialized with <span class="hljs-built_in">port</span>(s): <span class="hljs-number">7091</span> (http)<br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">38.088</span>  INFO --- <span class="hljs-selector-attr">[                     main]</span> <span class="hljs-selector-attr">[oyote.http11.Http11NioProtocol]</span> <span class="hljs-selector-attr">[                 log]</span>  <span class="hljs-selector-attr">[]</span> : Initializing ProtocolHandler <span class="hljs-selector-attr">[<span class="hljs-string">&quot;http-nio-7091&quot;</span>]</span><br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">38.089</span>  INFO --- <span class="hljs-selector-attr">[                     main]</span> <span class="hljs-selector-attr">[.catalina.core.StandardService]</span> <span class="hljs-selector-attr">[                 log]</span>  <span class="hljs-selector-attr">[]</span> : Starting service <span class="hljs-selector-attr">[Tomcat]</span><br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">38.089</span>  INFO --- <span class="hljs-selector-attr">[                     main]</span> <span class="hljs-selector-attr">[e.catalina.core.StandardEngine]</span> <span class="hljs-selector-attr">[                 log]</span>  <span class="hljs-selector-attr">[]</span> : Starting Servlet engine: <span class="hljs-selector-attr">[Apache Tomcat/9.0.62]</span><br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">38.233</span>  INFO --- <span class="hljs-selector-attr">[                     main]</span> <span class="hljs-selector-attr">[rBase.[Tomcat]</span>.<span class="hljs-selector-attr">[localhost]</span>.<span class="hljs-selector-attr">[/]</span>] <span class="hljs-selector-attr">[                 log]</span>  <span class="hljs-selector-attr">[]</span> : Initializing Spring embedded WebApplicationContext<br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">38.233</span>  INFO --- <span class="hljs-selector-attr">[                     main]</span> <span class="hljs-selector-attr">[letWebServerApplicationContext]</span> <span class="hljs-selector-attr">[ebApplicationContext]</span>  <span class="hljs-selector-attr">[]</span> : Root WebApplicationContext: initialization completed <span class="hljs-keyword">in</span> <span class="hljs-number">1792</span> ms<br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">39.043</span>  INFO --- <span class="hljs-selector-attr">[                     main]</span> <span class="hljs-selector-attr">[vlet.WelcomePageHandlerMapping]</span> <span class="hljs-selector-attr">[              &lt;init&gt;]</span>  <span class="hljs-selector-attr">[]</span> : Adding welcome page: class <span class="hljs-selector-tag">path</span> resource <span class="hljs-selector-attr">[static/index.html]</span><br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">39.472</span>  INFO --- <span class="hljs-selector-attr">[                     main]</span> <span class="hljs-selector-attr">[oyote.http11.Http11NioProtocol]</span> <span class="hljs-selector-attr">[                 log]</span>  <span class="hljs-selector-attr">[]</span> : Starting ProtocolHandler <span class="hljs-selector-attr">[<span class="hljs-string">&quot;http-nio-7091&quot;</span>]</span><br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">39.502</span>  INFO --- <span class="hljs-selector-attr">[                     main]</span> <span class="hljs-selector-attr">[mbedded.tomcat.TomcatWebServer]</span> <span class="hljs-selector-attr">[               start]</span>  <span class="hljs-selector-attr">[]</span> : Tomcat started on <span class="hljs-built_in">port</span>(s): <span class="hljs-number">7091</span> (http) with context <span class="hljs-selector-tag">path</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">39.511</span>  INFO --- <span class="hljs-selector-attr">[                     main]</span> <span class="hljs-selector-attr">[seata.server.ServerApplication]</span> <span class="hljs-selector-attr">[          logStarted]</span>  <span class="hljs-selector-attr">[]</span> : Started ServerApplication <span class="hljs-keyword">in</span> <span class="hljs-number">3.941</span> seconds (JVM running <span class="hljs-keyword">for</span> <span class="hljs-number">4.541</span>)<br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">39.846</span>  INFO --- <span class="hljs-selector-attr">[                     main]</span> <span class="hljs-selector-attr">[a.server.session.SessionHolder]</span> <span class="hljs-selector-attr">[                init]</span>  <span class="hljs-selector-attr">[]</span> : <span class="hljs-selector-tag">use</span> session store mode: file<br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">39.868</span>  INFO --- <span class="hljs-selector-attr">[                     main]</span> <span class="hljs-selector-attr">[rver.lock.LockerManagerFactory]</span> <span class="hljs-selector-attr">[                init]</span>  <span class="hljs-selector-attr">[]</span> : <span class="hljs-selector-tag">use</span> lock store mode: file<br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">39.988</span>  INFO --- <span class="hljs-selector-attr">[                     main]</span> <span class="hljs-selector-attr">[rpc.netty.NettyServerBootstrap]</span> <span class="hljs-selector-attr">[               start]</span>  <span class="hljs-selector-attr">[]</span> : Server started, service listen port: <span class="hljs-number">8091</span><br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">40.013</span>  INFO --- <span class="hljs-selector-attr">[                     main]</span> <span class="hljs-selector-attr">[io.seata.server.ServerRunner  ]</span> <span class="hljs-selector-attr">[                 run]</span>  <span class="hljs-selector-attr">[]</span> : <br> you can visit seata console UI on http:<span class="hljs-comment">//127.0.0.1:7091. </span><br> log <span class="hljs-selector-tag">path</span>: /root/logs/seata.<br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">40.013</span>  INFO --- <span class="hljs-selector-attr">[                     main]</span> <span class="hljs-selector-attr">[io.seata.server.ServerRunner  ]</span> <span class="hljs-selector-attr">[                 run]</span>  <span class="hljs-selector-attr">[]</span> : seata server started <span class="hljs-keyword">in</span> <span class="hljs-number">500</span> millSeconds<br>OpenJDK <span class="hljs-number">64</span>-Bit Server VM warning: Cannot open file /root/logs/seata/seata_gc<span class="hljs-selector-class">.log</span> due to No such file or directory<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;接下来，对其进行配置：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建配置文件目录</span><br><span class="hljs-built_in">mkdir</span> -p /home/docker_home/seata/seata-data<br><span class="hljs-comment"># 将容器内的默认配置文件拷贝出来</span><br>docker <span class="hljs-built_in">cp</span> seata-server:/seata-server/resources /home/docker_home/seata/seata-data<br><span class="hljs-comment"># 删除容器</span><br>docker <span class="hljs-built_in">rm</span> -f seata-server<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;而后，考虑到seata作为阿里巴巴开源的分布式解决方案，考虑直接将seata注册并配置到nacos上，首先按先下载官方的config.txt:<a href="https://github.com/apache/incubator-seata/tree/develop/script/config-center">https://github.com/apache/incubator-seata/tree/develop/script/config-center</a><br><br>&emsp;&emsp;这里，采用MySQL方式进行配置如下：<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#Transaction storage configuration, only for the server. The file, db, and redis configuration values are optional.</span><br>store.<span class="hljs-attribute">mode</span>=db<br>store.lock.<span class="hljs-attribute">mode</span>=db<br>store.session.<span class="hljs-attribute">mode</span>=db<br><span class="hljs-comment">#Used for password encryption</span><br>store.publicKey=<br><br><span class="hljs-comment">#These configurations are required if the `store mode` is `db`. If `store.mode,store.lock.mode,store.session.mode` are not equal to `db`, you can remove the configuration block.</span><br>store.db.<span class="hljs-attribute">datasource</span>=druid<br>store.db.<span class="hljs-attribute">dbType</span>=mysql<br>store.db.<span class="hljs-attribute">driverClassName</span>=com.mysql.jdbc.Driver<br>store.db.<span class="hljs-attribute">url</span>=jdbc:mysql://127.0.0.1:3306/seata?useUnicode=true&amp;rewriteBatchedStatements=true<br>store.db.<span class="hljs-attribute">user</span>=root<br>store.db.<span class="hljs-attribute">password</span>=root<br>store.db.<span class="hljs-attribute">minConn</span>=5<br>store.db.<span class="hljs-attribute">maxConn</span>=30<br>store.db.<span class="hljs-attribute">globalTable</span>=global_table<br>store.db.<span class="hljs-attribute">branchTable</span>=branch_table<br>store.db.<span class="hljs-attribute">distributedLockTable</span>=distributed_lock<br>store.db.<span class="hljs-attribute">queryLimit</span>=100<br>store.db.<span class="hljs-attribute">lockTable</span>=lock_table<br>store.db.<span class="hljs-attribute">maxWait</span>=5000<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;将上述配置文件config.txt导入nacos，命名seata-server.properties。配置格式类型选择为properties。<br><br>&emsp;&emsp;在上面cp出来的文件中，找到resources&#x2F;application.yml根据nacos的实际配置信息进行修改。<br></p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">seata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">config</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-comment"># support: nacos, consul, apollo, zk, etcd3</span><br>    <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nacos</span><br>    <span class="hljs-attribute">nacos</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">server-addr</span><span class="hljs-punctuation">:</span> <span class="hljs-string">192.168.186.1:8848</span><br>      <span class="hljs-attribute">username</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attribute">password</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3bc00f76-05de-4fa5-bdbe-06c57ad5c31c</span><br>      <span class="hljs-attribute">data-id</span><span class="hljs-punctuation">:</span> <span class="hljs-string">seata-server.properties</span><br>  <span class="hljs-attribute">registry</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-comment"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span><br>    <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nacos</span><br>    <span class="hljs-attribute">nacos</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">application</span><span class="hljs-punctuation">:</span> <span class="hljs-string">seata-server</span><br>      <span class="hljs-attribute">server-addr</span><span class="hljs-punctuation">:</span> <span class="hljs-string">192.168.186.1:8848</span><br>      <span class="hljs-attribute">username</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attribute">password</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3bc00f76-05de-4fa5-bdbe-06c57ad5c31c</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;而后去往<a href="https://github.com/apache/incubator-seata/tree/develop/script/server/db">https://github.com/apache/incubator-seata/tree/develop/script/server/db</a><br><br>&emsp;&emsp;下载mysql所需要的数据表。创建seata数据库，并导入sql<br></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+------------------+</span><br><span class="hljs-section">| Tables_in_seata  |</span><br><span class="hljs-section">+------------------+</span><br>| branch<span class="hljs-emphasis">_table     |</span><br><span class="hljs-emphasis">| distributed_lock |</span><br><span class="hljs-emphasis">| global_table     |</span><br><span class="hljs-emphasis">| lock_</span>table       |<br><span class="hljs-code">+------------------+</span><br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;global_table：全局事务表，每当有一个全局事务发起后，就会在该表中记录全局事务的ID<br><br>&emsp;&emsp;branch_table：分支事务表，记录每一个分支事务的ID，分支事务操作的哪个数据库等信息<br><br>&emsp;&emsp;lock_table：全局锁<br><br>&emsp;&emsp;distributed_lock：分布式锁<br><br>&emsp;&emsp;而后，重启seata:<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run --name seata-server -d -p <span class="hljs-number">8091</span>:<span class="hljs-number">8091</span> -p <span class="hljs-number">7091</span>:<span class="hljs-number">7091</span> -v /home/docker_home/seata/seata-data/resources:/seata-server/resources  seataio/seata-server<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;打开seata界面localhost:7091<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%BE%AE%E6%9C%8D%E5%8A%A1_%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/seata%E7%95%8C%E9%9D%A2.png" alt="seata界面" title="seata界面"><br>&emsp;&emsp;输入seata seata的用户名密码进入。由此，seata基于nacos和mysql的配置方式便部署完成了。<strong>另外，需要格外注意得是</strong>，每个参与分布式事务的数据库都需要加一张<strong>undo_log表</strong>。该表用于在分布式事务发生异常时执行回滚的依据<br></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">CREATE TABLE `undo_log` (<br>  `id` bigint(<span class="hljs-number">20</span>) <span class="hljs-literal">NOT</span> NULL AUTO_INCREMENT,<br>  `branch_id` bigint(<span class="hljs-number">20</span>) <span class="hljs-literal">NOT</span> NULL,<br>  `xid` varchar(<span class="hljs-number">100</span>) <span class="hljs-literal">NOT</span> NULL,<br>  `context` varchar(<span class="hljs-number">128</span>) <span class="hljs-literal">NOT</span> NULL,<br>  `rollback_info` longblob <span class="hljs-literal">NOT</span> NULL,<br>  `log_status` int(<span class="hljs-number">11</span>) <span class="hljs-literal">NOT</span> NULL,<br>  `log_created` datetime <span class="hljs-literal">NOT</span> NULL,<br>  `log_modified` datetime <span class="hljs-literal">NOT</span> NULL,<br>  `ext` varchar(<span class="hljs-number">100</span>) DEFAULT NULL,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=<span class="hljs-number">1</span> DEFAULT CHARSET=utf8<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="seata的使用"><a href="#seata的使用" class="headerlink" title="seata的使用"></a>seata的使用</h3><p>&emsp;&emsp;seata配置完成后，接下来以AT模式和TCC模式为例分别展示seata对于分布式事务的处理。<br></p><h4 id="示例的构造"><a href="#示例的构造" class="headerlink" title="示例的构造"></a>示例的构造</h4><p>&emsp;&emsp;于此，采用一个示例。即<strong>商品扣库存+用户账户扣款</strong>。<br><br>&emsp;&emsp;首先，先构造三张数据表，分别是product、account、order，即商品表、账户表和订单表。<br></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> product (<br>  id <span class="hljs-type">BIGINT</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY KEY</span>,<br>  <span class="hljs-type">name</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>  stock <span class="hljs-type">INT</span><br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> account (<br>  id <span class="hljs-type">BIGINT</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY KEY</span>,<br>  user_id <span class="hljs-type">BIGINT</span>,<br>  balance <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>)<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> orders (<br>  id <span class="hljs-type">BIGINT</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY KEY</span>,<br>  user_id <span class="hljs-type">BIGINT</span>,<br>  product_id <span class="hljs-type">BIGINT</span>,<br>  status <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)<br>);<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在此基础上，设计实现三个简单的服务，即ProductService，用于扣减商品库存；AccountService，用于扣减用户账户余额；OrderService，用于订单并处理整个事务。<br><br>&emsp;&emsp;参见代码<a href="https://github.com/gagaducko/learning_demos/tree/main/seata-demo">https://github.com/gagaducko/learning_demos/tree/main/seata-demo</a><br><br>&emsp;&emsp;其中，对于ProductService来说，扣减库存如下：<br></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">reduceStock</span><span class="hljs-params">(Long productId, <span class="hljs-type">int</span> amount)</span> </span>&#123;<br>    <span class="hljs-type">String</span> sql = <span class="hljs-string">&quot;UPDATE product SET stock = stock - ? WHERE id = ? AND stock &gt;= ?&quot;</span>;<br>    <span class="hljs-type">int</span> updatedRows = jdbcTemplate.<span class="hljs-built_in">update</span>(sql, amount, productId, amount);<br>    <span class="hljs-keyword">if</span> (updatedRows == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RuntimeException</span>(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;对于AccountService来说，扣减账户余额如下：<br></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">debit</span><span class="hljs-params">(Long userId, BigDecimal amount)</span> </span>&#123;<br>    <span class="hljs-type">String</span> sql = <span class="hljs-string">&quot;UPDATE account SET balance = balance - ? WHERE user_id = ? AND balance &gt;= ?&quot;</span>;<br>    <span class="hljs-type">int</span> updatedRows = jdbcTemplate.<span class="hljs-built_in">update</span>(sql, amount, userId, amount);<br>    <span class="hljs-keyword">if</span> (updatedRows == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RuntimeException</span>(<span class="hljs-string">&quot;余额不足&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;对于OrderService来说，下订单的过程如下：<br></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> OrderService &#123;<br><br>    @Autowired<br>    <span class="hljs-keyword">private</span> ProductService productService;<br><br>    @Autowired<br>    <span class="hljs-keyword">private</span> AccountService accountService;<br><br>    @Autowired<br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br>    @GlobalTransactional<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> createOrder(<span class="hljs-keyword">Long</span> userId, <span class="hljs-keyword">Long</span> productId, <span class="hljs-keyword">int</span> <span class="hljs-keyword">count</span>, BigDecimal price) &#123;<br>        log.info(<span class="hljs-string">&quot;Creating order for userId=&#123;&#125;, productId=&#123;&#125;, count=&#123;&#125;, price=&#123;&#125;&quot;</span>, userId, productId, <span class="hljs-keyword">count</span>, price);<br>        <br>        <span class="hljs-comment">// 扣减库存</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            productService.reduceStock(productId, <span class="hljs-keyword">count</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;库存扣减失败，回滚事务：&quot;</span>, e);<br>        &#125;<br><br>        <span class="hljs-comment">// 扣减账户余额</span><br>        BigDecimal totalPrice = price.<span class="hljs-keyword">multiply</span>(BigDecimal.valueOf(<span class="hljs-keyword">count</span>));<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            accountService.debit(userId, totalPrice);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;账户余额扣减失败，回滚事务：&quot;</span>, e);<br>        &#125;<br><br>        <span class="hljs-comment">// 模拟异常，事务应回滚</span><br>        <span class="hljs-keyword">if</span> (totalPrice.<span class="hljs-keyword">compareTo</span>(BigDecimal.ZERO) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;非法金额，事务回滚&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 创建订单</span><br>        String sql = <span class="hljs-string">&quot;INSERT INTO orders (user_id, product_id, status) VALUES (?, ?, ?)&quot;</span>;<br>        jdbcTemplate.update(sql, userId, productId, <span class="hljs-string">&quot;CREATED&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;可以看到的是，在下订单的时候，会调用扣减库存和扣减账户余额这么两个函数，并且向订单表中创建订单。<br><br>&emsp;&emsp;在这样一个操作中，很显然，要么<strong>操作全部成功，要么操作全部失败，这十分重要</strong>，否则，在不加事务的情况下，可以看到的是，如果账户余额不足，那么成功扣减了库存但是余额没能减去，就会导致库存和订单不匹配，后续的使用上就会出现逻辑或者数据上的混乱，反之亦然。<br><br>&emsp;&emsp;由于在微服务环境下，服务是分布式的，本地事务Transaction的使用难以满足这样一个事务的要求，因此，seata的重要性就体现出来了。<br></p><h4 id="seata的AT模式"><a href="#seata的AT模式" class="headerlink" title="seata的AT模式"></a>seata的AT模式</h4><p>&emsp;&emsp;使用AT模式，是一种两阶段提交协议的演变。首先，AT模式会发起一个全局事务，每个参与者在该全局事务内执行本地事务，而每个参与者在全局事务下也会注册自己的分支事务，Seata会在后台为这些分支事务建锁来确保数据的一致性。对于每个分支事务的执行过程中，seata会记录其状态及相关的SQL操作。如果所有的分支事务都成功，那么seata就会向每个参与者发送提交请求，最终将所有更改持久化到数据库中，反之，如果有任何分支事务失败，seata就会向所有参与者发送回滚请求，撤销已经提交了的操作。<br><br>&emsp;&emsp;AT模式是默认的，简单的配置便可以使用，缺点在于，在某些情况下，AT模式对事务的隔离性要求比较高，可能会影响到系统的并发性能，此外，采用AT模式，需要保证底层数据库支持Undo的操作，也就是在回滚的时候可以撤销已经提交了的操作，这对于数据库来说是有一定要求的，主要是适用于关系型数据库而不适用于部分非关系型的数据库。此外，AT模式可能无法满足某些复杂业务场景的需求，需要其他的一些分布式事务解决方案。<br><br>&emsp;&emsp;以下为使用AT模式的一个实例<br><br>&emsp;&emsp;对于这三个服务来说，均需添加seata的依赖：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 选择适合的版本 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2022.0.0.0-RC2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在此基础上，再properties文件中加入对应设置：<br></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">seata.tx-service-<span class="hljs-keyword">group</span>=my_tx_group<br>seata.enabled=<span class="hljs-keyword">true</span><br>seata.service.vgroup-<span class="hljs-keyword">mapping</span>.my_tx_group=<span class="hljs-keyword">default</span><br>seata.service.<span class="hljs-keyword">disable</span>-<span class="hljs-keyword">global</span>-<span class="hljs-keyword">transaction</span>=<span class="hljs-keyword">false</span><br>seata.client.rm.async-<span class="hljs-keyword">commit</span>-buffer-<span class="hljs-keyword">limit</span>=<span class="hljs-number">10000</span><br>seata.client.rm.<span class="hljs-keyword">lock</span>.retry-<span class="hljs-keyword">policy</span>-branch-<span class="hljs-keyword">rollback</span>-<span class="hljs-keyword">on</span>-<span class="hljs-keyword">conflict</span>=<span class="hljs-keyword">true</span><br>seata.client.tm.<span class="hljs-keyword">commit</span>-retry-count=<span class="hljs-number">5</span><br>seata.client.tm.<span class="hljs-keyword">rollback</span>-retry-count=<span class="hljs-number">5</span><br>seata.service.grouplist.default=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8091</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在这样的一个配置中：<br></p><ul><li>seata.tx-service-group&#x3D;my_tx_group<ul><li>指定全局事务的服务组名称。在 Seata 中，事务服务组用于标识一组参与相同全局事务的微服务。</li><li>要确保所有相关的服务都使用<strong>相同的服务组名称</strong>，以便正确协调事务。</li><li>如果不使用相同的，那么可以看到的是在使用的过程中，每个服务都有各自的xid，就不能够保证事务的一致性。</li></ul></li><li>seata.enabled&#x3D;true<ul><li>启用 Seata 客户端。设置为 true 表示启用 Seata 功能，允许应用程序使用分布式事务。</li></ul></li><li>seata.service.vgroup-mapping.my_tx_group&#x3D;default<ul><li>将虚拟组映射到实际的事务服务组。这里将 my_tx_group 映射到 default 组。</li><li>default 组通常是 Seata 默认的资源管理器，需要确保在seata前面的资源管理器配置中存在该组。</li></ul></li><li>seata.service.disable-global-transaction&#x3D;false<ul><li>这个配置项控制是否禁用全局事务。设置为 false 表示启用全局事务。</li></ul></li><li>seata.client.rm.async-commit-buffer-limit&#x3D;10000<ul><li>设置资源管理器（Resource Manager）异步提交的缓冲区限制。这个参数控制在异步提交时，可以暂存的最大事务数，过高可能会导致内存消耗增加，过低可能会影响性能。</li><li>根据应用负载，可以适当调整这个值。</li></ul></li><li>seata.client.rm.lock.retry-policy-branch-rollback-on-conflict&#x3D;true<ul><li>配置资源管理器在分支事务冲突时是否自动回滚。设置为 true 意味着在分支事务冲突时，Seata 会尝试自动回滚这个分支事务。</li><li>这是一个很重要的配置，可以有效减少由于锁竞争引起的事务失败。</li></ul></li><li>seata.client.tm.commit-retry-count&#x3D;5<ul><li>设定事务管理器在提交事务时的重试次数。如果提交失败，事务管理器会重新尝试提交事务，直到达到重试次数。</li><li>根据业务需求，这个值可以调整，以确保在网络波动或其他问题时，事务能够尽量成功提交。</li></ul></li><li>seata.client.tm.rollback-retry-count&#x3D;5<ul><li>设置事务管理器在回滚事务时的重试次数。与提交重试类似，确保在回滚失败的情况下，能够重试进行回滚操作。</li><li>同样，这个值可以根据需要进行调整。</li></ul></li><li>seata.service.grouplist.default&#x3D;127.0.0.1:8091<ul><li>指定 Seata Server 的地址和端口。这里设置为 127.0.0.1:8091，表示 Seata Server 运行在本地的 8091 端口。</li></ul></li></ul><p>&emsp;&emsp;在配置的过程中，需要注意网络的配置等是正确的，比如seata.service.grouplist.default 中配置的 Seata Server 地址可以被应用访问，尤其在使用 Docker 等虚拟化环境时，IP 地址和网络配置可能需要调整。<br><br>&emsp;&emsp;另外，在实际业务中，对于async-commit-buffer-limit 和重试次数配置需要进行测试，来找到性能和可靠性的平衡点。<br><br>&emsp;&emsp;另外，在使用RestTemplate的时候，为了确保事务id的上下游传递，需要做如下的一个设置：<br></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp">@Bean<br><span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">restTemplate</span>()</span> &#123;<br>    RestTemplate restTemplate = <span class="hljs-keyword">new</span> RestTemplate();<br>    List&lt;ClientHttpRequestInterceptor&gt; interceptors = restTemplate.getInterceptors();<br>    interceptors.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> SeataRestTemplateInterceptor());<br>    restTemplate.setInterceptors(interceptors);<br>    <span class="hljs-keyword">return</span> restTemplate;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;配置一个<strong>Seata的拦截器</strong>，SeataRestTemplateInterceptor，以便在进行远程调用时支持分布式事务。<br><br>&emsp;&emsp;在此基础上，还需要确保涉及事务的函数在出现错误的时候是抛出了异常的，比如：<br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">try</span>&#123;<br>  ……<br>&#125; <span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> e)&#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RuntimeException</span>(e);<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;如果说没有抛出异常，而是直接处理了，那么seata可能就会认为这个问题是已经被处理了而不是有异常需要回滚的，便会影响出现问题的情况下，事务回滚。比如：<br></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">e.printStackTrace()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;配置好后，向业务服务层的函数上，增加**@GlobalTransactional的注解**，确保所有相关服务（包括 AccountService、OrderService、ProductService 等）都加入同一个全局事务。<br></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@GlobalTransactional</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这样，一个依靠seata实现分布式事务一致性的一个简单的示例就完成了。<br><br>&emsp;&emsp;做一下验证，首先，先设置数据库中account的数据如下：<br></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">----</span>|<span class="hljs-string">------</span>|<span class="hljs-string">--------</span>|<br>|<span class="hljs-string"> id </span>|<span class="hljs-string"> user_id </span>|<span class="hljs-string"> balance </span>|<br>|<span class="hljs-string">----</span>|<span class="hljs-string">------</span>|<span class="hljs-string">--------</span>|<br>|<span class="hljs-string"> 1  </span>|<span class="hljs-string"> 1     </span>|<span class="hljs-string"> 1000   </span>|<br>|<span class="hljs-string">----</span>|<span class="hljs-string">------</span>|<span class="hljs-string">--------</span>|<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;设置数据库中product的数据如下：<br></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">----</span>|<span class="hljs-string">------</span>|<span class="hljs-string">--------</span>|<br>|<span class="hljs-string"> id </span>|<span class="hljs-string"> name </span>|<span class="hljs-string"> stock </span>|<br>|<span class="hljs-string">----</span>|<span class="hljs-string">------</span>|<span class="hljs-string">--------</span>|<br>|<span class="hljs-string"> 1  </span>|<span class="hljs-string"> 小鸭玩具     </span>|<span class="hljs-string"> 100    </span>|<br>|<span class="hljs-string">----</span>|<span class="hljs-string">------</span>|<span class="hljs-string">--------</span>|<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;<strong>调用该接口</strong>：<a href="http://localhost:8082/create?userId=1&productId=1&count=2&price=100">http://localhost:8082/create?userId=1&amp;productId=1&amp;count=2&amp;price=100</a><br><br>&emsp;&emsp;连续调用五次，可以得到的是，balance变成0了，然后小鸭玩具变成90了，再调用一次，采用debug的模式打断点debug，就可以看见如下情况：<br><br>&emsp;&emsp;运行到扣减库存后，正常运行完，因为库存是够的，这时候库存变成了88。<br><br>&emsp;&emsp;而运行到扣减账户余额的时候，便会进入抛出错误的情况，因为账户余额不够了。<br><br>&emsp;&emsp;具体的日志信息如下：<br></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// OrderService</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">27</span>:<span class="hljs-number">54.717</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[nio-8082-exec-1]</span> io<span class="hljs-selector-class">.seata</span><span class="hljs-selector-class">.tm</span><span class="hljs-selector-class">.TransactionManagerHolder</span>     : TransactionManager Singleton io<span class="hljs-selector-class">.seata</span><span class="hljs-selector-class">.tm</span>.DefaultTransactionManager@<span class="hljs-number">282</span>e8128<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">27</span>:<span class="hljs-number">54.726</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[nio-8082-exec-1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.seata</span><span class="hljs-selector-class">.tm</span><span class="hljs-selector-class">.api</span><span class="hljs-selector-class">.DefaultGlobalTransaction</span>  : Begin new global transaction <span class="hljs-selector-attr">[172.17.0.6:8091:54617088302346381]</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.294</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_RMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.AbstractNettyRemotingClient</span>    : channel <span class="hljs-selector-attr">[id: 0xccd802ae, L:/127.0.0.1:60623 - R:/127.0.0.1:8091]</span> read idle.<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.294</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_TMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.AbstractNettyRemotingClient</span>    : channel <span class="hljs-selector-attr">[id: 0x7508a115, L:/127.0.0.1:60620 - R:/127.0.0.1:8091]</span> read idle.<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.295</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_TMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.NettyPoolableFactory</span>  : will destroy channel:<span class="hljs-selector-attr">[id: 0x7508a115, L:/127.0.0.1:60620 - R:/127.0.0.1:8091]</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.296</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_RMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.NettyPoolableFactory</span>  : will destroy channel:<span class="hljs-selector-attr">[id: 0xccd802ae, L:/127.0.0.1:60623 - R:/127.0.0.1:8091]</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.297</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_TMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.AbstractNettyRemotingClient</span>    : <span class="hljs-built_in">ChannelHandlerContext</span>(AbstractNettyRemotingClient<span class="hljs-variable">$ClientHandler</span>#<span class="hljs-number">0</span>, <span class="hljs-selector-attr">[id: 0x7508a115, L:/127.0.0.1:60620 - R:/127.0.0.1:8091]</span>) will closed<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.297</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_RMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.AbstractNettyRemotingClient</span>    : <span class="hljs-built_in">ChannelHandlerContext</span>(AbstractNettyRemotingClient<span class="hljs-variable">$ClientHandler</span>#<span class="hljs-number">0</span>, <span class="hljs-selector-attr">[id: 0xccd802ae, L:/127.0.0.1:60623 - R:/127.0.0.1:8091]</span>) will closed<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.300</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_RMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.AbstractNettyRemotingClient</span>    : <span class="hljs-built_in">ChannelHandlerContext</span>(AbstractNettyRemotingClient<span class="hljs-variable">$ClientHandler</span>#<span class="hljs-number">0</span>, <span class="hljs-selector-attr">[id: 0xccd802ae, L:/127.0.0.1:60623 ! R:/127.0.0.1:8091]</span>) will closed<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.300</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_TMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.AbstractNettyRemotingClient</span>    : <span class="hljs-built_in">ChannelHandlerContext</span>(AbstractNettyRemotingClient<span class="hljs-variable">$ClientHandler</span>#<span class="hljs-number">0</span>, <span class="hljs-selector-attr">[id: 0x7508a115, L:/127.0.0.1:60620 ! R:/127.0.0.1:8091]</span>) will closed<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.301</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_RMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.NettyClientChannelManager</span>  : return to pool, rm channel:<span class="hljs-selector-attr">[id: 0xccd802ae, L:/127.0.0.1:60623 ! R:/127.0.0.1:8091]</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.301</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_TMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.NettyClientChannelManager</span>  : return to pool, rm channel:<span class="hljs-selector-attr">[id: 0x7508a115, L:/127.0.0.1:60620 ! R:/127.0.0.1:8091]</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.301</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_RMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.NettyPoolableFactory</span>  : channel valid false,channel:<span class="hljs-selector-attr">[id: 0xccd802ae, L:/127.0.0.1:60623 ! R:/127.0.0.1:8091]</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.301</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_TMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.NettyPoolableFactory</span>  : channel valid false,channel:<span class="hljs-selector-attr">[id: 0x7508a115, L:/127.0.0.1:60620 ! R:/127.0.0.1:8091]</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.301</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_RMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.NettyPoolableFactory</span>  : will destroy channel:<span class="hljs-selector-attr">[id: 0xccd802ae, L:/127.0.0.1:60623 ! R:/127.0.0.1:8091]</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.301</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_RMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.AbstractNettyRemotingClient</span>    : <span class="hljs-built_in">ChannelHandlerContext</span>(AbstractNettyRemotingClient<span class="hljs-variable">$ClientHandler</span>#<span class="hljs-number">0</span>, <span class="hljs-selector-attr">[id: 0xccd802ae, L:/127.0.0.1:60623 ! R:/127.0.0.1:8091]</span>) will closed<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.301</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_TMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.NettyPoolableFactory</span>  : will destroy channel:<span class="hljs-selector-attr">[id: 0x7508a115, L:/127.0.0.1:60620 ! R:/127.0.0.1:8091]</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.301</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_RMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.AbstractNettyRemotingClient</span>    : <span class="hljs-built_in">ChannelHandlerContext</span>(AbstractNettyRemotingClient<span class="hljs-variable">$ClientHandler</span>#<span class="hljs-number">0</span>, <span class="hljs-selector-attr">[id: 0xccd802ae, L:/127.0.0.1:60623 ! R:/127.0.0.1:8091]</span>) will closed<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.300</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[nio-8082-exec-1]</span> d<span class="hljs-selector-class">.g</span><span class="hljs-selector-class">.orderservice</span><span class="hljs-selector-class">.service</span><span class="hljs-selector-class">.OrderService</span>    : Creating <span class="hljs-attribute">order</span> for userId=<span class="hljs-number">1</span>, productId=<span class="hljs-number">1</span>, count=<span class="hljs-number">2</span>, price=<span class="hljs-number">100</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.301</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_TMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.AbstractNettyRemotingClient</span>    : <span class="hljs-built_in">ChannelHandlerContext</span>(AbstractNettyRemotingClient<span class="hljs-variable">$ClientHandler</span>#<span class="hljs-number">0</span>, <span class="hljs-selector-attr">[id: 0x7508a115, L:/127.0.0.1:60620 ! R:/127.0.0.1:8091]</span>) will closed<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.302</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_RMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.AbstractNettyRemotingClient</span>    : channel inactive: <span class="hljs-selector-attr">[id: 0xccd802ae, L:/127.0.0.1:60623 ! R:/127.0.0.1:8091]</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.302</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_TMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.AbstractNettyRemotingClient</span>    : <span class="hljs-built_in">ChannelHandlerContext</span>(AbstractNettyRemotingClient<span class="hljs-variable">$ClientHandler</span>#<span class="hljs-number">0</span>, <span class="hljs-selector-attr">[id: 0x7508a115, L:/127.0.0.1:60620 ! R:/127.0.0.1:8091]</span>) will closed<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.302</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_RMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.NettyPoolableFactory</span>  : channel valid false,channel:<span class="hljs-selector-attr">[id: 0xccd802ae, L:/127.0.0.1:60623 ! R:/127.0.0.1:8091]</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.302</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_RMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.NettyPoolableFactory</span>  : will destroy channel:<span class="hljs-selector-attr">[id: 0xccd802ae, L:/127.0.0.1:60623 ! R:/127.0.0.1:8091]</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.302</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_RMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.AbstractNettyRemotingClient</span>    : <span class="hljs-built_in">ChannelHandlerContext</span>(AbstractNettyRemotingClient<span class="hljs-variable">$ClientHandler</span>#<span class="hljs-number">0</span>, <span class="hljs-selector-attr">[id: 0xccd802ae, L:/127.0.0.1:60623 ! R:/127.0.0.1:8091]</span>) will closed<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.302</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_RMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.AbstractNettyRemotingClient</span>    : <span class="hljs-built_in">ChannelHandlerContext</span>(AbstractNettyRemotingClient<span class="hljs-variable">$ClientHandler</span>#<span class="hljs-number">0</span>, <span class="hljs-selector-attr">[id: 0xccd802ae, L:/127.0.0.1:60623 ! R:/127.0.0.1:8091]</span>) will closed<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.302</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_TMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.AbstractNettyRemotingClient</span>    : channel inactive: <span class="hljs-selector-attr">[id: 0x7508a115, L:/127.0.0.1:60620 ! R:/127.0.0.1:8091]</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">30.326</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_TMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.NettyPoolableFactory</span>  : channel valid false,channel:<span class="hljs-selector-attr">[id: 0x7508a115, L:/127.0.0.1:60620 ! R:/127.0.0.1:8091]</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">30.326</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_TMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.NettyPoolableFactory</span>  : will destroy channel:<span class="hljs-selector-attr">[id: 0x7508a115, L:/127.0.0.1:60620 ! R:/127.0.0.1:8091]</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">30.327</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_TMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.AbstractNettyRemotingClient</span>    : <span class="hljs-built_in">ChannelHandlerContext</span>(AbstractNettyRemotingClient<span class="hljs-variable">$ClientHandler</span>#<span class="hljs-number">0</span>, <span class="hljs-selector-attr">[id: 0x7508a115, L:/127.0.0.1:60620 ! R:/127.0.0.1:8091]</span>) will closed<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">30.327</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ctor_TMROLE_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.AbstractNettyRemotingClient</span>    : <span class="hljs-built_in">ChannelHandlerContext</span>(AbstractNettyRemotingClient<span class="hljs-variable">$ClientHandler</span>#<span class="hljs-number">0</span>, <span class="hljs-selector-attr">[id: 0x7508a115, L:/127.0.0.1:60620 ! R:/127.0.0.1:8091]</span>) will closed<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">30.338</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[or-localhost-13]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Receive server push request, request = ClientDetectionRequest, requestId = <span class="hljs-number">2</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">30.338</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[or-localhost-13]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Ack server push request, request = ClientDetectionRequest, requestId = <span class="hljs-number">2</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">30.341</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> ERROR <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[or-localhost-13]</span> c<span class="hljs-selector-class">.a</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.grpc</span><span class="hljs-selector-class">.GrpcClient</span>    : <span class="hljs-selector-attr">[1728552462212_127.0.0.1_60634]</span>Request stream onCompleted, <span class="hljs-selector-tag">switch</span> server<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">30.348</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Server healthy check fail, currentConnection = <span class="hljs-number">1728552462212</span>_127.<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span>_60634<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">30.348</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Try to reconnect to <span class="hljs-selector-tag">a</span> new server, server is  not appointed, will choose <span class="hljs-selector-tag">a</span> random server.<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">30.348</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> c<span class="hljs-selector-class">.a</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.grpc</span><span class="hljs-selector-class">.GrpcClient</span>    : grpc client connection server:localhost ip,serverPort:<span class="hljs-number">9848</span>,grpcTslConfig:&#123;<span class="hljs-string">&quot;sslProvider&quot;</span>:<span class="hljs-string">&quot;OPENSSL&quot;</span>,<span class="hljs-string">&quot;enableTls&quot;</span>:false,<span class="hljs-string">&quot;mutualAuthEnable&quot;</span>:false,<span class="hljs-string">&quot;trustAll&quot;</span>:false&#125;<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">31.172</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Success to connect <span class="hljs-selector-tag">a</span> server <span class="hljs-selector-attr">[localhost:8848]</span>, connectionId = <span class="hljs-number">1728552510355</span>_127.<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span>_60700<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">31.173</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Abandon prev connection, server is localhost:<span class="hljs-number">8848</span>, connectionId is <span class="hljs-number">1728552462212</span>_127.<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span>_60634<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">31.174</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : Close current connection <span class="hljs-number">1728552462212</span>_127.<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span>_60634<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">33.891</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Notify disconnected event to listeners<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">33.891</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Try to reconnect to <span class="hljs-selector-tag">a</span> new server, server is  not appointed, will choose <span class="hljs-selector-tag">a</span> random server.<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">33.891</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  WARN <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.naming</span>          : Grpc connection disconnect, <span class="hljs-selector-tag">mark</span> to redo<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">33.891</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> c<span class="hljs-selector-class">.a</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.grpc</span><span class="hljs-selector-class">.GrpcClient</span>    : grpc client connection server:localhost ip,serverPort:<span class="hljs-number">9848</span>,grpcTslConfig:&#123;<span class="hljs-string">&quot;sslProvider&quot;</span>:<span class="hljs-string">&quot;OPENSSL&quot;</span>,<span class="hljs-string">&quot;enableTls&quot;</span>:false,<span class="hljs-string">&quot;mutualAuthEnable&quot;</span>:false,<span class="hljs-string">&quot;trustAll&quot;</span>:false&#125;<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">33.893</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  WARN <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.naming</span>          : <span class="hljs-selector-tag">mark</span> to redo completed<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">33.894</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Notify connected event to listeners.<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">33.894</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.naming</span>          : Grpc connection connect<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">20.425</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Success to connect <span class="hljs-selector-tag">a</span> server <span class="hljs-selector-attr">[localhost:8848]</span>, connectionId = <span class="hljs-number">1728552513905</span>_127.<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span>_60710<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">20.425</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  WARN <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[l-1 housekeeper]</span> com<span class="hljs-selector-class">.zaxxer</span><span class="hljs-selector-class">.hikari</span><span class="hljs-selector-class">.pool</span><span class="hljs-selector-class">.HikariPool</span>        : HikariPool-<span class="hljs-number">1</span> - Thread starvation or clock leap detected (housekeeper delta=<span class="hljs-number">1</span>m4s131ms426µs700ns).<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">20.426</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Abandon prev connection, server is localhost:<span class="hljs-number">8848</span>, connectionId is <span class="hljs-number">1728552510355</span>_127.<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span>_60700<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">20.426</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : Close current connection <span class="hljs-number">1728552510355</span>_127.<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span>_60700<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">20.426</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ing.grpc.redo.0]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.naming</span>          : Redo instance operation REGISTER <span class="hljs-keyword">for</span> DEFAULT_GROUP@@OrderService<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">20.427</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[eoutChecker_2_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.NettyClientChannelManager</span>  : will connect to <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8091</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">20.428</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[eoutChecker_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.NettyClientChannelManager</span>  : will connect to <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8091</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">20.429</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[eoutChecker_2_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.RmNettyRemotingClient</span>    : RM will register :jdbc:mysql:<span class="hljs-comment">//localhost:3306/seatademo</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">20.430</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[eoutChecker_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.NettyPoolableFactory</span>  : NettyPool create channel to transactionRole:TMROLE,<span class="hljs-selector-tag">address</span>:<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8091</span>,msg:&lt; RegisterTMRequest&#123;applicationId=<span class="hljs-string">&#x27;OrderService&#x27;</span>, transactionServiceGroup=<span class="hljs-string">&#x27;my_tx_group&#x27;</span>&#125; &gt;<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">20.431</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[eoutChecker_2_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.NettyPoolableFactory</span>  : NettyPool create channel to transactionRole:RMROLE,<span class="hljs-selector-tag">address</span>:<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8091</span>,msg:&lt; RegisterRMRequest&#123;resourceIds=<span class="hljs-string">&#x27;jdbc:mysql://localhost:3306/seatademo&#x27;</span>, applicationId=<span class="hljs-string">&#x27;OrderService&#x27;</span>, transactionServiceGroup=<span class="hljs-string">&#x27;my_tx_group&#x27;</span>&#125; &gt;<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">20.441</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Notify disconnected event to listeners<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.765</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[or-localhost-31]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Receive server push request, request = ClientDetectionRequest, requestId = <span class="hljs-number">3</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.765</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[or-localhost-31]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Ack server push request, request = ClientDetectionRequest, requestId = <span class="hljs-number">3</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.764</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[or-localhost-30]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Receive server push request, request = ClientDetectionRequest, requestId = <span class="hljs-number">4</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.765</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[or-localhost-30]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Ack server push request, request = ClientDetectionRequest, requestId = <span class="hljs-number">4</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.765</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  WARN <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.naming</span>          : Grpc connection disconnect, <span class="hljs-selector-tag">mark</span> to redo<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.765</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  WARN <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.naming</span>          : <span class="hljs-selector-tag">mark</span> to redo completed<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.765</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Notify connected event to listeners.<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.765</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.naming</span>          : Grpc connection connect<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.765</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[eoutChecker_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.TmNettyRemotingClient</span>    : register TM success. client version:<span class="hljs-number">1.7</span>.<span class="hljs-number">0</span>-native-rc2, server version:<span class="hljs-number">1.8</span>.<span class="hljs-number">0</span>,channel:<span class="hljs-selector-attr">[id: 0x6c4ad3a9, L:/127.0.0.1:60751 - R:/127.0.0.1:8091]</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.765</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[eoutChecker_2_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.RmNettyRemotingClient</span>    : register RM success. client version:<span class="hljs-number">1.7</span>.<span class="hljs-number">0</span>-native-rc2, server version:<span class="hljs-number">1.8</span>.<span class="hljs-number">0</span>,channel:<span class="hljs-selector-attr">[id: 0x05e526e6, L:/127.0.0.1:60750 - R:/127.0.0.1:8091]</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.765</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[eoutChecker_1_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.NettyPoolableFactory</span>  : register success, cost <span class="hljs-number">2330</span> ms, version:<span class="hljs-number">1.8</span>.<span class="hljs-number">0</span>,role:TMROLE,channel:<span class="hljs-selector-attr">[id: 0x6c4ad3a9, L:/127.0.0.1:60751 - R:/127.0.0.1:8091]</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.765</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[eoutChecker_2_1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.rpc</span><span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.NettyPoolableFactory</span>  : register success, cost <span class="hljs-number">2330</span> ms, version:<span class="hljs-number">1.8</span>.<span class="hljs-number">0</span>,role:RMROLE,channel:<span class="hljs-selector-attr">[id: 0x05e526e6, L:/127.0.0.1:60750 - R:/127.0.0.1:8091]</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.767</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> ERROR <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[or-localhost-30]</span> c<span class="hljs-selector-class">.a</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.grpc</span><span class="hljs-selector-class">.GrpcClient</span>    : <span class="hljs-selector-attr">[1728552513905_127.0.0.1_60710]</span>Request stream onCompleted, <span class="hljs-selector-tag">switch</span> server<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.767</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[or-localhost-31]</span> c<span class="hljs-selector-class">.a</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.grpc</span><span class="hljs-selector-class">.GrpcClient</span>    : <span class="hljs-selector-attr">[1728552510355_127.0.0.1_60700]</span>Ignore complete event,isRunning:true,isAbandon=true<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.768</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Try to reconnect to <span class="hljs-selector-tag">a</span> new server, server is  not appointed, will choose <span class="hljs-selector-tag">a</span> random server.<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.768</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> c<span class="hljs-selector-class">.a</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.grpc</span><span class="hljs-selector-class">.GrpcClient</span>    : grpc client connection server:localhost ip,serverPort:<span class="hljs-number">9848</span>,grpcTslConfig:&#123;<span class="hljs-string">&quot;sslProvider&quot;</span>:<span class="hljs-string">&quot;OPENSSL&quot;</span>,<span class="hljs-string">&quot;enableTls&quot;</span>:false,<span class="hljs-string">&quot;mutualAuthEnable&quot;</span>:false,<span class="hljs-string">&quot;trustAll&quot;</span>:false&#125;<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.774</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> ERROR <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ing.grpc.redo.0]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : Send request fail, request = InstanceRequest&#123;headers=&#123;accessToken=eyJhbGciOiJIUzM4NCJ9<span class="hljs-selector-class">.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTcyODU3MDQ2MX0</span><span class="hljs-selector-class">.qcV9lq74W9i45sPBsU2P58n_TvF9qICzC5XS2gDKSJjXN5u8tlTTtEumrM-NvuxI</span>, app=unknown&#125;, requestId=<span class="hljs-string">&#x27;null&#x27;</span>&#125;, retryTimes = <span class="hljs-number">0</span>, errorMessage = java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.ExecutionException</span>: com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.shaded</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.grpc</span><span class="hljs-selector-class">.StatusRuntimeException</span>: UNAVAILABLE: Channel shutdown invoked<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.783</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[nio-8082-exec-1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.seata</span><span class="hljs-selector-class">.tm</span><span class="hljs-selector-class">.api</span><span class="hljs-selector-class">.DefaultGlobalTransaction</span>  : Suspending current transaction, xid = <span class="hljs-number">172.17</span>.<span class="hljs-number">0.6</span>:<span class="hljs-number">8091</span>:<span class="hljs-number">54617088302346381</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.785</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[nio-8082-exec-1]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.seata</span><span class="hljs-selector-class">.tm</span><span class="hljs-selector-class">.api</span><span class="hljs-selector-class">.DefaultGlobalTransaction</span>  : <span class="hljs-selector-attr">[172.17.0.6:8091:54617088302346381]</span> rollback status: Finished<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.802</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> ERROR <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[nio-8082-exec-1]</span> o<span class="hljs-selector-class">.a</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.C</span>.<span class="hljs-selector-attr">[.[.[/]</span>.<span class="hljs-selector-attr">[dispatcherServlet]</span>    : Servlet<span class="hljs-selector-class">.service</span>() <span class="hljs-keyword">for</span> servlet <span class="hljs-selector-attr">[dispatcherServlet]</span> <span class="hljs-keyword">in</span> context with <span class="hljs-selector-tag">path</span> <span class="hljs-selector-attr">[]</span> threw exception <span class="hljs-selector-attr">[Request processing failed: java.lang.RuntimeException: 账户余额扣减失败，回滚事务：]</span> with root cause<br><br>org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.client</span>.HttpServerErrorException<span class="hljs-variable">$InternalServerError</span>: <span class="hljs-number">500</span> : <span class="hljs-string">&quot;&#123;&quot;</span>timestamp<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T09:<span class="hljs-number">28</span>:<span class="hljs-number">33.914</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span><span class="hljs-string">&quot;,&quot;</span>status<span class="hljs-string">&quot;:500,&quot;</span>error<span class="hljs-string">&quot;:&quot;</span>Internal Server Error<span class="hljs-string">&quot;,&quot;</span>path<span class="hljs-string">&quot;:&quot;</span>/debit<span class="hljs-string">&quot;&#125;&quot;</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.HttpServerErrorException</span><span class="hljs-selector-class">.create</span>(HttpServerErrorException<span class="hljs-selector-class">.java</span>:<span class="hljs-number">103</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.DefaultResponseErrorHandler</span><span class="hljs-selector-class">.handleError</span>(DefaultResponseErrorHandler<span class="hljs-selector-class">.java</span>:<span class="hljs-number">186</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.DefaultResponseErrorHandler</span><span class="hljs-selector-class">.handleError</span>(DefaultResponseErrorHandler<span class="hljs-selector-class">.java</span>:<span class="hljs-number">137</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.ResponseErrorHandler</span><span class="hljs-selector-class">.handleError</span>(ResponseErrorHandler<span class="hljs-selector-class">.java</span>:<span class="hljs-number">63</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.RestTemplate</span><span class="hljs-selector-class">.handleResponse</span>(RestTemplate<span class="hljs-selector-class">.java</span>:<span class="hljs-number">915</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.RestTemplate</span><span class="hljs-selector-class">.doExecute</span>(RestTemplate<span class="hljs-selector-class">.java</span>:<span class="hljs-number">864</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.RestTemplate</span><span class="hljs-selector-class">.execute</span>(RestTemplate<span class="hljs-selector-class">.java</span>:<span class="hljs-number">764</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.RestTemplate</span><span class="hljs-selector-class">.postForObject</span>(RestTemplate<span class="hljs-selector-class">.java</span>:<span class="hljs-number">481</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at demo<span class="hljs-selector-class">.gagaduck</span><span class="hljs-selector-class">.orderservice</span><span class="hljs-selector-class">.feign</span><span class="hljs-selector-class">.AccountService</span><span class="hljs-selector-class">.debit</span>(AccountService<span class="hljs-selector-class">.java</span>:<span class="hljs-number">23</span>) ~<span class="hljs-selector-attr">[classes/:na]</span><br>at demo<span class="hljs-selector-class">.gagaduck</span><span class="hljs-selector-class">.orderservice</span><span class="hljs-selector-class">.service</span><span class="hljs-selector-class">.OrderService</span><span class="hljs-selector-class">.createOrder</span>(OrderService<span class="hljs-selector-class">.java</span>:<span class="hljs-number">41</span>) ~<span class="hljs-selector-attr">[classes/:na]</span><br>at java.base/jdk<span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeMethodAccessorImpl</span><span class="hljs-selector-class">.invoke0</span>(Native Method) ~<span class="hljs-selector-attr">[na:na]</span><br>at java.base/jdk<span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeMethodAccessorImpl</span><span class="hljs-selector-class">.invoke</span>(NativeMethodAccessorImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">77</span>) ~<span class="hljs-selector-attr">[na:na]</span><br>at java.base/jdk<span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.DelegatingMethodAccessorImpl</span><span class="hljs-selector-class">.invoke</span>(DelegatingMethodAccessorImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">43</span>) ~<span class="hljs-selector-attr">[na:na]</span><br>at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Method</span><span class="hljs-selector-class">.invoke</span>(Method<span class="hljs-selector-class">.java</span>:<span class="hljs-number">569</span>) ~<span class="hljs-selector-attr">[na:na]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.aop</span><span class="hljs-selector-class">.support</span><span class="hljs-selector-class">.AopUtils</span><span class="hljs-selector-class">.invokeJoinpointUsingReflection</span>(AopUtils<span class="hljs-selector-class">.java</span>:<span class="hljs-number">343</span>) ~<span class="hljs-selector-attr">[spring-aop-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.aop</span><span class="hljs-selector-class">.framework</span><span class="hljs-selector-class">.ReflectiveMethodInvocation</span><span class="hljs-selector-class">.invokeJoinpoint</span>(ReflectiveMethodInvocation<span class="hljs-selector-class">.java</span>:<span class="hljs-number">196</span>) ~<span class="hljs-selector-attr">[spring-aop-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.aop</span><span class="hljs-selector-class">.framework</span><span class="hljs-selector-class">.ReflectiveMethodInvocation</span><span class="hljs-selector-class">.proceed</span>(ReflectiveMethodInvocation<span class="hljs-selector-class">.java</span>:<span class="hljs-number">163</span>) ~<span class="hljs-selector-attr">[spring-aop-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.aop</span><span class="hljs-selector-class">.framework</span>.CglibAopProxy<span class="hljs-variable">$CglibMethodInvocation</span><span class="hljs-selector-class">.proceed</span>(CglibAopProxy<span class="hljs-selector-class">.java</span>:<span class="hljs-number">752</span>) ~<span class="hljs-selector-attr">[spring-aop-6.0.4.jar:6.0.4]</span><br>at io<span class="hljs-selector-class">.seata</span><span class="hljs-selector-class">.spring</span><span class="hljs-selector-class">.annotation</span>.GlobalTransactionalInterceptor$<span class="hljs-number">2</span><span class="hljs-selector-class">.execute</span>(GlobalTransactionalInterceptor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">204</span>) ~<span class="hljs-selector-attr">[seata-all-1.7.0-native-rc2.jar:1.7.0-native-rc2]</span><br>at io<span class="hljs-selector-class">.seata</span><span class="hljs-selector-class">.tm</span><span class="hljs-selector-class">.api</span><span class="hljs-selector-class">.TransactionalTemplate</span><span class="hljs-selector-class">.execute</span>(TransactionalTemplate<span class="hljs-selector-class">.java</span>:<span class="hljs-number">130</span>) ~<span class="hljs-selector-attr">[seata-all-1.7.0-native-rc2.jar:1.7.0-native-rc2]</span><br>at io<span class="hljs-selector-class">.seata</span><span class="hljs-selector-class">.spring</span><span class="hljs-selector-class">.annotation</span><span class="hljs-selector-class">.GlobalTransactionalInterceptor</span><span class="hljs-selector-class">.handleGlobalTransaction</span>(GlobalTransactionalInterceptor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">201</span>) ~<span class="hljs-selector-attr">[seata-all-1.7.0-native-rc2.jar:1.7.0-native-rc2]</span><br>at io<span class="hljs-selector-class">.seata</span><span class="hljs-selector-class">.spring</span><span class="hljs-selector-class">.annotation</span><span class="hljs-selector-class">.GlobalTransactionalInterceptor</span><span class="hljs-selector-class">.invoke</span>(GlobalTransactionalInterceptor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">171</span>) ~<span class="hljs-selector-attr">[seata-all-1.7.0-native-rc2.jar:1.7.0-native-rc2]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.aop</span><span class="hljs-selector-class">.framework</span><span class="hljs-selector-class">.ReflectiveMethodInvocation</span><span class="hljs-selector-class">.proceed</span>(ReflectiveMethodInvocation<span class="hljs-selector-class">.java</span>:<span class="hljs-number">184</span>) ~<span class="hljs-selector-attr">[spring-aop-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.aop</span><span class="hljs-selector-class">.framework</span>.CglibAopProxy<span class="hljs-variable">$CglibMethodInvocation</span><span class="hljs-selector-class">.proceed</span>(CglibAopProxy<span class="hljs-selector-class">.java</span>:<span class="hljs-number">752</span>) ~<span class="hljs-selector-attr">[spring-aop-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.aop</span><span class="hljs-selector-class">.framework</span>.CglibAopProxy<span class="hljs-variable">$DynamicAdvisedInterceptor</span><span class="hljs-selector-class">.intercept</span>(CglibAopProxy<span class="hljs-selector-class">.java</span>:<span class="hljs-number">703</span>) ~<span class="hljs-selector-attr">[spring-aop-6.0.4.jar:6.0.4]</span><br>at demo<span class="hljs-selector-class">.gagaduck</span><span class="hljs-selector-class">.orderservice</span><span class="hljs-selector-class">.service</span>.OrderService$<span class="hljs-variable">$SpringCGLIB</span>$$<span class="hljs-number">0</span><span class="hljs-selector-class">.createOrder</span>(&lt;generated&gt;) ~<span class="hljs-selector-attr">[classes/:na]</span><br>at demo<span class="hljs-selector-class">.gagaduck</span><span class="hljs-selector-class">.orderservice</span><span class="hljs-selector-class">.controller</span><span class="hljs-selector-class">.TestController</span><span class="hljs-selector-class">.createOrder</span>(TestController<span class="hljs-selector-class">.java</span>:<span class="hljs-number">23</span>) ~<span class="hljs-selector-attr">[classes/:na]</span><br>at java.base/jdk<span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeMethodAccessorImpl</span><span class="hljs-selector-class">.invoke0</span>(Native Method) ~<span class="hljs-selector-attr">[na:na]</span><br>at java.base/jdk<span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeMethodAccessorImpl</span><span class="hljs-selector-class">.invoke</span>(NativeMethodAccessorImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">77</span>) ~<span class="hljs-selector-attr">[na:na]</span><br>at java.base/jdk<span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.DelegatingMethodAccessorImpl</span><span class="hljs-selector-class">.invoke</span>(DelegatingMethodAccessorImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">43</span>) ~<span class="hljs-selector-attr">[na:na]</span><br>at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Method</span><span class="hljs-selector-class">.invoke</span>(Method<span class="hljs-selector-class">.java</span>:<span class="hljs-number">569</span>) ~<span class="hljs-selector-attr">[na:na]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.method</span><span class="hljs-selector-class">.support</span><span class="hljs-selector-class">.InvocableHandlerMethod</span><span class="hljs-selector-class">.doInvoke</span>(InvocableHandlerMethod<span class="hljs-selector-class">.java</span>:<span class="hljs-number">207</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.method</span><span class="hljs-selector-class">.support</span><span class="hljs-selector-class">.InvocableHandlerMethod</span><span class="hljs-selector-class">.invokeForRequest</span>(InvocableHandlerMethod<span class="hljs-selector-class">.java</span>:<span class="hljs-number">152</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.mvc</span><span class="hljs-selector-class">.method</span><span class="hljs-selector-class">.annotation</span><span class="hljs-selector-class">.ServletInvocableHandlerMethod</span><span class="hljs-selector-class">.invokeAndHandle</span>(ServletInvocableHandlerMethod<span class="hljs-selector-class">.java</span>:<span class="hljs-number">117</span>) ~<span class="hljs-selector-attr">[spring-webmvc-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.mvc</span><span class="hljs-selector-class">.method</span><span class="hljs-selector-class">.annotation</span><span class="hljs-selector-class">.RequestMappingHandlerAdapter</span><span class="hljs-selector-class">.invokeHandlerMethod</span>(RequestMappingHandlerAdapter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">884</span>) ~<span class="hljs-selector-attr">[spring-webmvc-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.mvc</span><span class="hljs-selector-class">.method</span><span class="hljs-selector-class">.annotation</span><span class="hljs-selector-class">.RequestMappingHandlerAdapter</span><span class="hljs-selector-class">.handleInternal</span>(RequestMappingHandlerAdapter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">797</span>) ~<span class="hljs-selector-attr">[spring-webmvc-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.mvc</span><span class="hljs-selector-class">.method</span><span class="hljs-selector-class">.AbstractHandlerMethodAdapter</span><span class="hljs-selector-class">.handle</span>(AbstractHandlerMethodAdapter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">87</span>) ~<span class="hljs-selector-attr">[spring-webmvc-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.DispatcherServlet</span><span class="hljs-selector-class">.doDispatch</span>(DispatcherServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1080</span>) ~<span class="hljs-selector-attr">[spring-webmvc-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.DispatcherServlet</span><span class="hljs-selector-class">.doService</span>(DispatcherServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">973</span>) ~<span class="hljs-selector-attr">[spring-webmvc-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.FrameworkServlet</span><span class="hljs-selector-class">.processRequest</span>(FrameworkServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1011</span>) ~<span class="hljs-selector-attr">[spring-webmvc-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.FrameworkServlet</span><span class="hljs-selector-class">.doPost</span>(FrameworkServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">914</span>) ~<span class="hljs-selector-attr">[spring-webmvc-6.0.4.jar:6.0.4]</span><br>at jakarta<span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpServlet</span><span class="hljs-selector-class">.service</span>(HttpServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">731</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:6.0]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.FrameworkServlet</span><span class="hljs-selector-class">.service</span>(FrameworkServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">885</span>) ~<span class="hljs-selector-attr">[spring-webmvc-6.0.4.jar:6.0.4]</span><br>at jakarta<span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpServlet</span><span class="hljs-selector-class">.service</span>(HttpServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">814</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:6.0]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.internalDoFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">223</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.doFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">158</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.websocket</span><span class="hljs-selector-class">.server</span><span class="hljs-selector-class">.WsFilter</span><span class="hljs-selector-class">.doFilter</span>(WsFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">53</span>) ~<span class="hljs-selector-attr">[tomcat-embed-websocket-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.internalDoFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">185</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.doFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">158</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.RequestContextFilter</span><span class="hljs-selector-class">.doFilterInternal</span>(RequestContextFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">100</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.OncePerRequestFilter</span><span class="hljs-selector-class">.doFilter</span>(OncePerRequestFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">116</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.internalDoFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">185</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.doFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">158</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.FormContentFilter</span><span class="hljs-selector-class">.doFilterInternal</span>(FormContentFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">93</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.OncePerRequestFilter</span><span class="hljs-selector-class">.doFilter</span>(OncePerRequestFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">116</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.internalDoFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">185</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.doFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">158</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.CharacterEncodingFilter</span><span class="hljs-selector-class">.doFilterInternal</span>(CharacterEncodingFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">201</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.OncePerRequestFilter</span><span class="hljs-selector-class">.doFilter</span>(OncePerRequestFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">116</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.internalDoFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">185</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.doFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">158</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardWrapperValve</span><span class="hljs-selector-class">.invoke</span>(StandardWrapperValve<span class="hljs-selector-class">.java</span>:<span class="hljs-number">177</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardContextValve</span><span class="hljs-selector-class">.invoke</span>(StandardContextValve<span class="hljs-selector-class">.java</span>:<span class="hljs-number">97</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.authenticator</span><span class="hljs-selector-class">.AuthenticatorBase</span><span class="hljs-selector-class">.invoke</span>(AuthenticatorBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">542</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardHostValve</span><span class="hljs-selector-class">.invoke</span>(StandardHostValve<span class="hljs-selector-class">.java</span>:<span class="hljs-number">119</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.valves</span><span class="hljs-selector-class">.ErrorReportValve</span><span class="hljs-selector-class">.invoke</span>(ErrorReportValve<span class="hljs-selector-class">.java</span>:<span class="hljs-number">92</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardEngineValve</span><span class="hljs-selector-class">.invoke</span>(StandardEngineValve<span class="hljs-selector-class">.java</span>:<span class="hljs-number">78</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.connector</span><span class="hljs-selector-class">.CoyoteAdapter</span><span class="hljs-selector-class">.service</span>(CoyoteAdapter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">357</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.coyote</span><span class="hljs-selector-class">.http11</span><span class="hljs-selector-class">.Http11Processor</span><span class="hljs-selector-class">.service</span>(Http11Processor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">400</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.coyote</span><span class="hljs-selector-class">.AbstractProcessorLight</span><span class="hljs-selector-class">.process</span>(AbstractProcessorLight<span class="hljs-selector-class">.java</span>:<span class="hljs-number">65</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.coyote</span>.AbstractProtocol<span class="hljs-variable">$ConnectionHandler</span><span class="hljs-selector-class">.process</span>(AbstractProtocol<span class="hljs-selector-class">.java</span>:<span class="hljs-number">859</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.net</span>.NioEndpoint<span class="hljs-variable">$SocketProcessor</span><span class="hljs-selector-class">.doRun</span>(NioEndpoint<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1734</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.SocketProcessorBase</span><span class="hljs-selector-class">.run</span>(SocketProcessorBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">52</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.threads</span><span class="hljs-selector-class">.ThreadPoolExecutor</span><span class="hljs-selector-class">.runWorker</span>(ThreadPoolExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1191</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.threads</span>.ThreadPoolExecutor<span class="hljs-variable">$Worker</span><span class="hljs-selector-class">.run</span>(ThreadPoolExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">659</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.threads</span>.TaskThread<span class="hljs-variable">$WrappingRunnable</span><span class="hljs-selector-class">.run</span>(TaskThread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">61</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.run</span>(Thread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">840</span>) ~<span class="hljs-selector-attr">[na:na]</span><br><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.876</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> ERROR <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ing.grpc.redo.0]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : Send request fail, request = InstanceRequest&#123;headers=&#123;accessToken=eyJhbGciOiJIUzM4NCJ9<span class="hljs-selector-class">.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTcyODU3MDQ2MX0</span><span class="hljs-selector-class">.qcV9lq74W9i45sPBsU2P58n_TvF9qICzC5XS2gDKSJjXN5u8tlTTtEumrM-NvuxI</span>, app=unknown&#125;, requestId=<span class="hljs-string">&#x27;null&#x27;</span>&#125;, retryTimes = <span class="hljs-number">1</span>, errorMessage = Client not connected, current status:UNHEALTHY<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.904</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Success to connect <span class="hljs-selector-tag">a</span> server <span class="hljs-selector-attr">[localhost:8848]</span>, connectionId = <span class="hljs-number">1728552562785</span>_127.<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span>_60756<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.904</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Abandon prev connection, server is localhost:<span class="hljs-number">8848</span>, connectionId is <span class="hljs-number">1728552513905</span>_127.<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span>_60710<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.904</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : Close current connection <span class="hljs-number">1728552513905</span>_127.<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span>_60710<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.904</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Notify disconnected event to listeners<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.904</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  WARN <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.naming</span>          : Grpc connection disconnect, <span class="hljs-selector-tag">mark</span> to redo<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.904</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  WARN <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.naming</span>          : <span class="hljs-selector-tag">mark</span> to redo completed<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.904</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Notify connected event to listeners.<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.904</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.naming</span>          : Grpc connection connect<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.980</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> ERROR <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ing.grpc.redo.0]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : Send request fail, request = InstanceRequest&#123;headers=&#123;accessToken=eyJhbGciOiJIUzM4NCJ9<span class="hljs-selector-class">.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTcyODU3MDQ2MX0</span><span class="hljs-selector-class">.qcV9lq74W9i45sPBsU2P58n_TvF9qICzC5XS2gDKSJjXN5u8tlTTtEumrM-NvuxI</span>, app=unknown&#125;, requestId=<span class="hljs-string">&#x27;null&#x27;</span>&#125;, retryTimes = <span class="hljs-number">2</span>, errorMessage = Client not connected, current status:UNHEALTHY<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.980</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> ERROR <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ing.grpc.redo.0]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.naming</span>          : Redo instance operation REGISTER <span class="hljs-keyword">for</span> DEFAULT_GROUP@@OrderService failed. <br><br>com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.api</span><span class="hljs-selector-class">.exception</span><span class="hljs-selector-class">.NacosException</span>: Client not connected, current status:UNHEALTHY<br>at com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.RpcClient</span><span class="hljs-selector-class">.request</span>(RpcClient<span class="hljs-selector-class">.java</span>:<span class="hljs-number">643</span>) ~<span class="hljs-selector-attr">[nacos-client-2.2.1.jar:na]</span><br>at com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.RpcClient</span><span class="hljs-selector-class">.request</span>(RpcClient<span class="hljs-selector-class">.java</span>:<span class="hljs-number">623</span>) ~<span class="hljs-selector-attr">[nacos-client-2.2.1.jar:na]</span><br>at com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.naming</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.gprc</span><span class="hljs-selector-class">.NamingGrpcClientProxy</span><span class="hljs-selector-class">.requestToServer</span>(NamingGrpcClientProxy<span class="hljs-selector-class">.java</span>:<span class="hljs-number">357</span>) ~<span class="hljs-selector-attr">[nacos-client-2.2.1.jar:na]</span><br>at com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.naming</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.gprc</span><span class="hljs-selector-class">.NamingGrpcClientProxy</span><span class="hljs-selector-class">.doRegisterService</span>(NamingGrpcClientProxy<span class="hljs-selector-class">.java</span>:<span class="hljs-number">210</span>) ~<span class="hljs-selector-attr">[nacos-client-2.2.1.jar:na]</span><br>at com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.naming</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.gprc</span><span class="hljs-selector-class">.redo</span><span class="hljs-selector-class">.RedoScheduledTask</span><span class="hljs-selector-class">.processRegisterRedoType</span>(RedoScheduledTask<span class="hljs-selector-class">.java</span>:<span class="hljs-number">102</span>) ~<span class="hljs-selector-attr">[nacos-client-2.2.1.jar:na]</span><br>at com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.naming</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.gprc</span><span class="hljs-selector-class">.redo</span><span class="hljs-selector-class">.RedoScheduledTask</span><span class="hljs-selector-class">.redoForInstance</span>(RedoScheduledTask<span class="hljs-selector-class">.java</span>:<span class="hljs-number">79</span>) ~<span class="hljs-selector-attr">[nacos-client-2.2.1.jar:na]</span><br>at com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.naming</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.gprc</span><span class="hljs-selector-class">.redo</span><span class="hljs-selector-class">.RedoScheduledTask</span><span class="hljs-selector-class">.redoForInstances</span>(RedoScheduledTask<span class="hljs-selector-class">.java</span>:<span class="hljs-number">61</span>) ~<span class="hljs-selector-attr">[nacos-client-2.2.1.jar:na]</span><br>at com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.naming</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.gprc</span><span class="hljs-selector-class">.redo</span><span class="hljs-selector-class">.RedoScheduledTask</span><span class="hljs-selector-class">.run</span>(RedoScheduledTask<span class="hljs-selector-class">.java</span>:<span class="hljs-number">51</span>) ~<span class="hljs-selector-attr">[nacos-client-2.2.1.jar:na]</span><br>at java.base/java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span>.Executors<span class="hljs-variable">$RunnableAdapter</span><span class="hljs-selector-class">.call</span>(Executors<span class="hljs-selector-class">.java</span>:<span class="hljs-number">539</span>) ~<span class="hljs-selector-attr">[na:na]</span><br>at java.base/java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.FutureTask</span>.runAndReset$$<span class="hljs-variable">$capture</span>(FutureTask<span class="hljs-selector-class">.java</span>:<span class="hljs-number">305</span>) ~<span class="hljs-selector-attr">[na:na]</span><br>at java.base/java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.FutureTask</span><span class="hljs-selector-class">.runAndReset</span>(FutureTask.java) ~<span class="hljs-selector-attr">[na:na]</span><br>at java.base/java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span>.ScheduledThreadPoolExecutor<span class="hljs-variable">$ScheduledFutureTask</span><span class="hljs-selector-class">.run</span>(ScheduledThreadPoolExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">305</span>) ~<span class="hljs-selector-attr">[na:na]</span><br>at java.base/java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.ThreadPoolExecutor</span><span class="hljs-selector-class">.runWorker</span>(ThreadPoolExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1136</span>) ~<span class="hljs-selector-attr">[na:na]</span><br>at java.base/java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span>.ThreadPoolExecutor<span class="hljs-variable">$Worker</span><span class="hljs-selector-class">.run</span>(ThreadPoolExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">635</span>) ~<span class="hljs-selector-attr">[na:na]</span><br>at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.run</span>(Thread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">840</span>) ~<span class="hljs-selector-attr">[na:na]</span><br><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.983</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span>   : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span> Server check success, currentServer is localhost:<span class="hljs-number">8848</span> <br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">25.982</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- <span class="hljs-selector-attr">[ing.grpc.redo.0]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.naming</span>          : Redo instance operation REGISTER <span class="hljs-keyword">for</span> DEFAULT_GROUP@@OrderService<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// ProductService</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">55.850</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">4700</span> --- <span class="hljs-selector-attr">[h_RMROLE_1_7_32]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.p</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.RmBranchRollbackProcessor</span>    : rm handle branch rollback process:xid=<span class="hljs-number">172.17</span>.<span class="hljs-number">0.6</span>:<span class="hljs-number">8091</span>:<span class="hljs-number">54617088302346381</span>,branchId=<span class="hljs-number">54617088302346382</span>,branchType=AT,resourceId=jdbc:mysql:<span class="hljs-comment">//localhost:3306/seatademo,applicationData=null</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">55.850</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">4700</span> --- <span class="hljs-selector-attr">[h_RMROLE_1_7_32]</span> io<span class="hljs-selector-class">.seata</span><span class="hljs-selector-class">.rm</span><span class="hljs-selector-class">.AbstractRMHandler</span>            : Branch Rollbacking: <span class="hljs-number">172.17</span>.<span class="hljs-number">0.6</span>:<span class="hljs-number">8091</span>:<span class="hljs-number">54617088302346381</span> <span class="hljs-number">54617088302346382</span> jdbc:mysql:<span class="hljs-comment">//localhost:3306/seatademo</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">55.871</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">4700</span> --- <span class="hljs-selector-attr">[h_RMROLE_1_7_32]</span> <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.undo</span><span class="hljs-selector-class">.AbstractUndoLogManager</span>      : xid <span class="hljs-number">172.17</span>.<span class="hljs-number">0.6</span>:<span class="hljs-number">8091</span>:<span class="hljs-number">54617088302346381</span> branch <span class="hljs-number">54617088302346382</span>, undo_log deleted with GlobalFinished<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">55.872</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">4700</span> --- <span class="hljs-selector-attr">[h_RMROLE_1_7_32]</span> io<span class="hljs-selector-class">.seata</span><span class="hljs-selector-class">.rm</span><span class="hljs-selector-class">.AbstractRMHandler</span>            : Branch Rollbacked result: PhaseTwo_Rollbacked<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// AccountService</span><br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">33.905</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> ERROR <span class="hljs-number">5772</span> --- <span class="hljs-selector-attr">[nio-8081-exec-3]</span> o<span class="hljs-selector-class">.a</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.c</span><span class="hljs-selector-class">.C</span>.<span class="hljs-selector-attr">[.[.[/]</span>.<span class="hljs-selector-attr">[dispatcherServlet]</span>    : Servlet<span class="hljs-selector-class">.service</span>() <span class="hljs-keyword">for</span> servlet <span class="hljs-selector-attr">[dispatcherServlet]</span> <span class="hljs-keyword">in</span> context with <span class="hljs-selector-tag">path</span> <span class="hljs-selector-attr">[]</span> threw exception <span class="hljs-selector-attr">[Request processing failed: java.lang.RuntimeException: 余额不足]</span> with root cause<br><br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: 余额不足<br>at demo<span class="hljs-selector-class">.gagaduck</span><span class="hljs-selector-class">.accountservice</span><span class="hljs-selector-class">.service</span><span class="hljs-selector-class">.AccountService</span><span class="hljs-selector-class">.debit</span>(AccountService<span class="hljs-selector-class">.java</span>:<span class="hljs-number">21</span>) ~<span class="hljs-selector-attr">[classes/:na]</span><br>at jdk<span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.GeneratedMethodAccessor21</span><span class="hljs-selector-class">.invoke</span>(Unknown Source) ~<span class="hljs-selector-attr">[na:na]</span><br>at java.base/jdk<span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.DelegatingMethodAccessorImpl</span><span class="hljs-selector-class">.invoke</span>(DelegatingMethodAccessorImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">43</span>) ~<span class="hljs-selector-attr">[na:na]</span><br>at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Method</span><span class="hljs-selector-class">.invoke</span>(Method<span class="hljs-selector-class">.java</span>:<span class="hljs-number">569</span>) ~<span class="hljs-selector-attr">[na:na]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.aop</span><span class="hljs-selector-class">.support</span><span class="hljs-selector-class">.AopUtils</span><span class="hljs-selector-class">.invokeJoinpointUsingReflection</span>(AopUtils<span class="hljs-selector-class">.java</span>:<span class="hljs-number">343</span>) ~<span class="hljs-selector-attr">[spring-aop-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.aop</span><span class="hljs-selector-class">.framework</span><span class="hljs-selector-class">.ReflectiveMethodInvocation</span><span class="hljs-selector-class">.invokeJoinpoint</span>(ReflectiveMethodInvocation<span class="hljs-selector-class">.java</span>:<span class="hljs-number">196</span>) ~<span class="hljs-selector-attr">[spring-aop-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.aop</span><span class="hljs-selector-class">.framework</span><span class="hljs-selector-class">.ReflectiveMethodInvocation</span><span class="hljs-selector-class">.proceed</span>(ReflectiveMethodInvocation<span class="hljs-selector-class">.java</span>:<span class="hljs-number">163</span>) ~<span class="hljs-selector-attr">[spring-aop-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.aop</span><span class="hljs-selector-class">.framework</span>.CglibAopProxy<span class="hljs-variable">$CglibMethodInvocation</span><span class="hljs-selector-class">.proceed</span>(CglibAopProxy<span class="hljs-selector-class">.java</span>:<span class="hljs-number">752</span>) ~<span class="hljs-selector-attr">[spring-aop-6.0.4.jar:6.0.4]</span><br>at io<span class="hljs-selector-class">.seata</span><span class="hljs-selector-class">.spring</span><span class="hljs-selector-class">.annotation</span>.GlobalTransactionalInterceptor$<span class="hljs-number">2</span><span class="hljs-selector-class">.execute</span>(GlobalTransactionalInterceptor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">204</span>) ~<span class="hljs-selector-attr">[seata-all-1.7.0-native-rc2.jar:1.7.0-native-rc2]</span><br>at io<span class="hljs-selector-class">.seata</span><span class="hljs-selector-class">.tm</span><span class="hljs-selector-class">.api</span><span class="hljs-selector-class">.TransactionalTemplate</span><span class="hljs-selector-class">.execute</span>(TransactionalTemplate<span class="hljs-selector-class">.java</span>:<span class="hljs-number">130</span>) ~<span class="hljs-selector-attr">[seata-all-1.7.0-native-rc2.jar:1.7.0-native-rc2]</span><br>at io<span class="hljs-selector-class">.seata</span><span class="hljs-selector-class">.spring</span><span class="hljs-selector-class">.annotation</span><span class="hljs-selector-class">.GlobalTransactionalInterceptor</span><span class="hljs-selector-class">.handleGlobalTransaction</span>(GlobalTransactionalInterceptor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">201</span>) ~<span class="hljs-selector-attr">[seata-all-1.7.0-native-rc2.jar:1.7.0-native-rc2]</span><br>at io<span class="hljs-selector-class">.seata</span><span class="hljs-selector-class">.spring</span><span class="hljs-selector-class">.annotation</span><span class="hljs-selector-class">.GlobalTransactionalInterceptor</span><span class="hljs-selector-class">.invoke</span>(GlobalTransactionalInterceptor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">171</span>) ~<span class="hljs-selector-attr">[seata-all-1.7.0-native-rc2.jar:1.7.0-native-rc2]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.aop</span><span class="hljs-selector-class">.framework</span><span class="hljs-selector-class">.ReflectiveMethodInvocation</span><span class="hljs-selector-class">.proceed</span>(ReflectiveMethodInvocation<span class="hljs-selector-class">.java</span>:<span class="hljs-number">184</span>) ~<span class="hljs-selector-attr">[spring-aop-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.aop</span><span class="hljs-selector-class">.framework</span>.CglibAopProxy<span class="hljs-variable">$CglibMethodInvocation</span><span class="hljs-selector-class">.proceed</span>(CglibAopProxy<span class="hljs-selector-class">.java</span>:<span class="hljs-number">752</span>) ~<span class="hljs-selector-attr">[spring-aop-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.aop</span><span class="hljs-selector-class">.framework</span>.CglibAopProxy<span class="hljs-variable">$DynamicAdvisedInterceptor</span><span class="hljs-selector-class">.intercept</span>(CglibAopProxy<span class="hljs-selector-class">.java</span>:<span class="hljs-number">703</span>) ~<span class="hljs-selector-attr">[spring-aop-6.0.4.jar:6.0.4]</span><br>at demo<span class="hljs-selector-class">.gagaduck</span><span class="hljs-selector-class">.accountservice</span><span class="hljs-selector-class">.service</span>.AccountService$<span class="hljs-variable">$SpringCGLIB</span>$$<span class="hljs-number">0</span><span class="hljs-selector-class">.debit</span>(&lt;generated&gt;) ~<span class="hljs-selector-attr">[classes/:na]</span><br>at demo<span class="hljs-selector-class">.gagaduck</span><span class="hljs-selector-class">.accountservice</span><span class="hljs-selector-class">.controller</span><span class="hljs-selector-class">.TestController</span><span class="hljs-selector-class">.debit</span>(TestController<span class="hljs-selector-class">.java</span>:<span class="hljs-number">20</span>) ~<span class="hljs-selector-attr">[classes/:na]</span><br>at jdk<span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.GeneratedMethodAccessor20</span><span class="hljs-selector-class">.invoke</span>(Unknown Source) ~<span class="hljs-selector-attr">[na:na]</span><br>at java.base/jdk<span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.DelegatingMethodAccessorImpl</span><span class="hljs-selector-class">.invoke</span>(DelegatingMethodAccessorImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">43</span>) ~<span class="hljs-selector-attr">[na:na]</span><br>at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Method</span><span class="hljs-selector-class">.invoke</span>(Method<span class="hljs-selector-class">.java</span>:<span class="hljs-number">569</span>) ~<span class="hljs-selector-attr">[na:na]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.method</span><span class="hljs-selector-class">.support</span><span class="hljs-selector-class">.InvocableHandlerMethod</span><span class="hljs-selector-class">.doInvoke</span>(InvocableHandlerMethod<span class="hljs-selector-class">.java</span>:<span class="hljs-number">207</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.method</span><span class="hljs-selector-class">.support</span><span class="hljs-selector-class">.InvocableHandlerMethod</span><span class="hljs-selector-class">.invokeForRequest</span>(InvocableHandlerMethod<span class="hljs-selector-class">.java</span>:<span class="hljs-number">152</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.mvc</span><span class="hljs-selector-class">.method</span><span class="hljs-selector-class">.annotation</span><span class="hljs-selector-class">.ServletInvocableHandlerMethod</span><span class="hljs-selector-class">.invokeAndHandle</span>(ServletInvocableHandlerMethod<span class="hljs-selector-class">.java</span>:<span class="hljs-number">117</span>) ~<span class="hljs-selector-attr">[spring-webmvc-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.mvc</span><span class="hljs-selector-class">.method</span><span class="hljs-selector-class">.annotation</span><span class="hljs-selector-class">.RequestMappingHandlerAdapter</span><span class="hljs-selector-class">.invokeHandlerMethod</span>(RequestMappingHandlerAdapter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">884</span>) ~<span class="hljs-selector-attr">[spring-webmvc-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.mvc</span><span class="hljs-selector-class">.method</span><span class="hljs-selector-class">.annotation</span><span class="hljs-selector-class">.RequestMappingHandlerAdapter</span><span class="hljs-selector-class">.handleInternal</span>(RequestMappingHandlerAdapter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">797</span>) ~<span class="hljs-selector-attr">[spring-webmvc-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.mvc</span><span class="hljs-selector-class">.method</span><span class="hljs-selector-class">.AbstractHandlerMethodAdapter</span><span class="hljs-selector-class">.handle</span>(AbstractHandlerMethodAdapter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">87</span>) ~<span class="hljs-selector-attr">[spring-webmvc-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.DispatcherServlet</span><span class="hljs-selector-class">.doDispatch</span>(DispatcherServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1080</span>) ~<span class="hljs-selector-attr">[spring-webmvc-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.DispatcherServlet</span><span class="hljs-selector-class">.doService</span>(DispatcherServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">973</span>) ~<span class="hljs-selector-attr">[spring-webmvc-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.FrameworkServlet</span><span class="hljs-selector-class">.processRequest</span>(FrameworkServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1011</span>) ~<span class="hljs-selector-attr">[spring-webmvc-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.FrameworkServlet</span><span class="hljs-selector-class">.doPost</span>(FrameworkServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">914</span>) ~<span class="hljs-selector-attr">[spring-webmvc-6.0.4.jar:6.0.4]</span><br>at jakarta<span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpServlet</span><span class="hljs-selector-class">.service</span>(HttpServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">731</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:6.0]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.FrameworkServlet</span><span class="hljs-selector-class">.service</span>(FrameworkServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">885</span>) ~<span class="hljs-selector-attr">[spring-webmvc-6.0.4.jar:6.0.4]</span><br>at jakarta<span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpServlet</span><span class="hljs-selector-class">.service</span>(HttpServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">814</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:6.0]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.internalDoFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">223</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.doFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">158</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.websocket</span><span class="hljs-selector-class">.server</span><span class="hljs-selector-class">.WsFilter</span><span class="hljs-selector-class">.doFilter</span>(WsFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">53</span>) ~<span class="hljs-selector-attr">[tomcat-embed-websocket-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.internalDoFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">185</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.doFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">158</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.RequestContextFilter</span><span class="hljs-selector-class">.doFilterInternal</span>(RequestContextFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">100</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.OncePerRequestFilter</span><span class="hljs-selector-class">.doFilter</span>(OncePerRequestFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">116</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.internalDoFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">185</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.doFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">158</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.FormContentFilter</span><span class="hljs-selector-class">.doFilterInternal</span>(FormContentFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">93</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.OncePerRequestFilter</span><span class="hljs-selector-class">.doFilter</span>(OncePerRequestFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">116</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.internalDoFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">185</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.doFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">158</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.CharacterEncodingFilter</span><span class="hljs-selector-class">.doFilterInternal</span>(CharacterEncodingFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">201</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.OncePerRequestFilter</span><span class="hljs-selector-class">.doFilter</span>(OncePerRequestFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">116</span>) ~<span class="hljs-selector-attr">[spring-web-6.0.4.jar:6.0.4]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.internalDoFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">185</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span><span class="hljs-selector-class">.doFilter</span>(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">158</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardWrapperValve</span><span class="hljs-selector-class">.invoke</span>(StandardWrapperValve<span class="hljs-selector-class">.java</span>:<span class="hljs-number">177</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardContextValve</span><span class="hljs-selector-class">.invoke</span>(StandardContextValve<span class="hljs-selector-class">.java</span>:<span class="hljs-number">97</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.authenticator</span><span class="hljs-selector-class">.AuthenticatorBase</span><span class="hljs-selector-class">.invoke</span>(AuthenticatorBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">542</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardHostValve</span><span class="hljs-selector-class">.invoke</span>(StandardHostValve<span class="hljs-selector-class">.java</span>:<span class="hljs-number">119</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.valves</span><span class="hljs-selector-class">.ErrorReportValve</span><span class="hljs-selector-class">.invoke</span>(ErrorReportValve<span class="hljs-selector-class">.java</span>:<span class="hljs-number">92</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardEngineValve</span><span class="hljs-selector-class">.invoke</span>(StandardEngineValve<span class="hljs-selector-class">.java</span>:<span class="hljs-number">78</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.connector</span><span class="hljs-selector-class">.CoyoteAdapter</span><span class="hljs-selector-class">.service</span>(CoyoteAdapter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">357</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.coyote</span><span class="hljs-selector-class">.http11</span><span class="hljs-selector-class">.Http11Processor</span><span class="hljs-selector-class">.service</span>(Http11Processor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">400</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.coyote</span><span class="hljs-selector-class">.AbstractProcessorLight</span><span class="hljs-selector-class">.process</span>(AbstractProcessorLight<span class="hljs-selector-class">.java</span>:<span class="hljs-number">65</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.coyote</span>.AbstractProtocol<span class="hljs-variable">$ConnectionHandler</span><span class="hljs-selector-class">.process</span>(AbstractProtocol<span class="hljs-selector-class">.java</span>:<span class="hljs-number">859</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.net</span>.NioEndpoint<span class="hljs-variable">$SocketProcessor</span><span class="hljs-selector-class">.doRun</span>(NioEndpoint<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1734</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.SocketProcessorBase</span><span class="hljs-selector-class">.run</span>(SocketProcessorBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">52</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.threads</span><span class="hljs-selector-class">.ThreadPoolExecutor</span><span class="hljs-selector-class">.runWorker</span>(ThreadPoolExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1191</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.threads</span>.ThreadPoolExecutor<span class="hljs-variable">$Worker</span><span class="hljs-selector-class">.run</span>(ThreadPoolExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">659</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.threads</span>.TaskThread<span class="hljs-variable">$WrappingRunnable</span><span class="hljs-selector-class">.run</span>(TaskThread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">61</span>) ~<span class="hljs-selector-attr">[tomcat-embed-core-10.1.5.jar:10.1.5]</span><br>at java.base/java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.run</span>(Thread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">840</span>) ~<span class="hljs-selector-attr">[na:na]</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;可以从日志看到，首先，Seata分布式事务管理启动，TransactionManager的单例实例被创建，它是Seata事务管理的核心组件。随后，开始了一个全新的全局事务，并且给出了该事务的唯一标识，172.17.0.6:8091:54617088302346381<br><br>&emsp;&emsp;随后，订单服务开始尝试创建新的订单，订单服务执行失败，导致了一个运行时异常。异常原因是因为账户余额扣减失败，这触发了全局事务的回滚。<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22</span>.<span class="hljs-number">785</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> ---<span class="hljs-meta"> [nio-8082-exec-1] i.seata.tm.api.DefaultGlobalTransaction  : [172.17.0.6:8091:54617088302346381] rollback status: Finished</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在这里，显示全局事务已经完成了回滚，状态是Finished。<br><br>&emsp;&emsp;最后，再去数据库看一下，发现数量又变回了90，回滚了事务。<br><br>&emsp;&emsp;值得一提的是，在日志中，显示有一个订单服务与Seata服务器之间的Netty通信通道出现非活动状态，这可能是因为网络问题或其他原因导致的。<br></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">28</span>:<span class="hljs-number">16.302</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">26256</span> --- [ctor_TMROLE_1_1] i.s.c.r.n.AbstractNetty<span class="hljs-comment">RemotingClient    : channel inactive: [id: 0x7508a115, L:/127.0.0.1:60620 ! R:/127.0.0.1:8091]</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;而后又进行了重新连接：<br></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">`<span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>T17:<span class="hljs-number">29</span>:<span class="hljs-number">22.765</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> INFO <span class="hljs-number">26256</span> — <span class="hljs-selector-attr">[t.remote.worker]</span> com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.client</span> : <span class="hljs-selector-attr">[4d4f0036-097f-451a-a833-3f49e0233308]</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;其他得可能导致事务不一致得情况也是类似的，比如：<br><br>&emsp;&emsp;调用使用了非法的数据，如非法金额：<a href="http://localhost:8082/create?userId=1&productId=1&count=2&price=-100">http://localhost:8082/create?userId=1&amp;productId=1&amp;count=2&amp;price=-100</a><br><br>&emsp;&emsp;再比如，调用的时候，库存不够了但是余额够得，也会有相似的回滚情况。<br></p><h4 id="seata的TCC模式"><a href="#seata的TCC模式" class="headerlink" title="seata的TCC模式"></a>seata的TCC模式</h4><p>&emsp;&emsp;TCC模式，也就是Try-Confirm-Cancel模式，这是一种经典的分布式事务解决方案，通过为每个分布式操作定义三个阶段，也就是Try阶段、Confirm阶段和Cancel阶段，确保在分布式系统中的数据一致性。<br><br>&emsp;&emsp;TCC比起AT来说，需要开发者手动实现Try-Confirm-Cancel逻辑，复杂度更高，而且资源开销也不小，在Try阶段是需要锁定和预留资源的。除此以外，为了保证事务的一致性，Confirm和Cancel阶段都需要保证冥等性，来防止重复执行时出现错误，也是一个缺点。<br><br>&emsp;&emsp;但是，TCC可以实现精细化的控制，并且非常适合有状态的业务，比如一些需要预留资源、锁定状态的业务场景，比如库存管理、支付系统等等。<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 微服务学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> 分布式事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—RPC框架</title>
      <link href="/2024/10/08/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94RPC%E6%A1%86%E6%9E%B6/"/>
      <url>/2024/10/08/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94RPC%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是RPC"><a href="#什么是RPC" class="headerlink" title="什么是RPC"></a>什么是RPC</h2><p>&emsp;&emsp;RPC，全程是Remote Procedure Call，换言之就是远程过程调用。是分布式系统的一种常见的通信方式，已经有许多年的历史了，也算是一种比较古早的技术。<br><br>&emsp;&emsp;RPC是一种进程间通信技术，允许程序调用另一个地址空间（通常是远程服务器上）的函数，就像调用本地函数一样。它隐藏了底层的网络通信细节，使得分布式系统中的各个模块能够像在本地系统中一样进行协作。<br></p><h2 id="RPC的基本工作原理"><a href="#RPC的基本工作原理" class="headerlink" title="RPC的基本工作原理"></a>RPC的基本工作原理</h2><p>&emsp;&emsp;RPC的核心思想是让一个程序可以通过网络调用另一个程序中的函数或方法，类似于本地调用。它的工作过程通常包括以下几个步骤：<br></p><ul><li><strong>客户端请求</strong>： 客户端调用一个本地的代理函数（通常称为“stub”或“代理”），该函数负责将调用的参数打包成一个请求消息。</li><li><strong>请求序列化</strong>： 该请求消息通过序列化的方式（通常是JSON、XML或二进制格式）转化为一个可传输的数据流。</li><li><strong>发送请求</strong>： 客户端将序列化后的数据发送到远程服务器。</li><li><strong>服务器接收请求</strong>： 服务器解包并解析请求，调用相应的服务或方法。</li><li><strong>响应</strong>： 服务器执行方法后将结果返回，通过网络传输给客户端。</li><li><strong>结果返回</strong>： 客户端解包响应结果，供调用者使用，整个过程就像在本地调用一样透明。</li></ul><p>&emsp;&emsp;如图所示：<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_RPC/RPC.svg" alt="RPC工作原理"><br>&emsp;&emsp;可以看到的是一个经典的RPC调用流程，客户端调用本地代理函数后，经过网络传输到服务端，服务端执行响应的函数，再通过网络返回结果。<br></p><h2 id="RPC的主要组成部分"><a href="#RPC的主要组成部分" class="headerlink" title="RPC的主要组成部分"></a>RPC的主要组成部分</h2><p>&emsp;&emsp;RPC主要由以下四个部分组成：<br></p><ul><li><strong>客户端代理（Client Stub）</strong>： 它是客户端代码中的一个本地函数，负责将本地调用转换为网络消息并发送到服务器。</li><li><strong>服务器代理（Server Stub）</strong>： 服务器上的代理程序，它接收客户端的消息，调用本地的服务函数，并将结果返回给客户端。</li><li><strong>网络传输协议</strong>： 通常使用TCP&#x2F;IP进行网络通信，但也可以使用HTTP、WebSocket等协议。</li><li><strong>序列化和反序列化</strong>： 由于客户端和服务器在不同的进程甚至是不同的机器上运行，需要将调用的参数和返回值转化为二进制或文本格式，以便在网络上传输（比如使用Protocol Buffers、Thrift、JSON、XML等格式）。</li></ul><h2 id="RPC的类型"><a href="#RPC的类型" class="headerlink" title="RPC的类型"></a>RPC的类型</h2><ul><li><strong>同步RPC</strong>： 客户端发出请求后，必须等待服务器处理完毕并返回结果，客户端才能继续后续操作。典型的RPC大多是同步调用。</li><li><strong>异步RPC</strong>： 客户端发出请求后，不必等待服务器返回，客户端可以继续执行其他操作，服务器的响应在稍后时刻以回调或其他方式处理。</li></ul><h2 id="RPC的优势之处"><a href="#RPC的优势之处" class="headerlink" title="RPC的优势之处"></a>RPC的优势之处</h2><p>&emsp;&emsp;<strong>简化分布式系统开发</strong>： RPC将网络通信的复杂性隐藏在接口之下，开发人员不必关心底层的网络细节，只需要关注调用接口和业务逻辑。<br><br>&emsp;&emsp;<strong>灵活的部署架构</strong>： 通过RPC，应用可以轻松地在多个服务器之间进行分布式部署，适应大规模应用的需求。<br><br>&emsp;&emsp;<strong>跨语言支持</strong>： 许多RPC框架支持多种编程语言，这使得不同语言之间的服务互操作性得以实现。<br></p><h2 id="RPC的缺点"><a href="#RPC的缺点" class="headerlink" title="RPC的缺点"></a>RPC的缺点</h2><p>&emsp;&emsp;<strong>调试困难</strong>： 由于RPC跨越了网络边界，排查问题时可能会受到网络延迟、超时、服务不可用等因素的影响，调试比本地调用复杂。<br><br>&emsp;&emsp;<strong>网络开销</strong>： 每次RPC调用都需要在网络上传输请求和响应，因此相较于本地调用会有网络延迟和带宽开销。<br><br>&emsp;&emsp;<strong>耦合度较高</strong>： 客户端和服务端通常需要共享相同的接口定义，某些实现上需要双方同时更新以保持兼容性。<br></p><h2 id="RPC比较于REST和消息队列"><a href="#RPC比较于REST和消息队列" class="headerlink" title="RPC比较于REST和消息队列"></a>RPC比较于REST和消息队列</h2><table><thead><tr><th>特性</th><th>RPC</th><th>消息队列</th><th>REST</th></tr></thead><tbody><tr><td>通信模式</td><td>同步&#x2F;异步</td><td>异步为主</td><td>同步为主</td></tr><tr><td>传输协议</td><td>TCP、HTTP&#x2F;2、HTTP</td><td>任意传输协议（常用TCP）</td><td>HTTP</td></tr><tr><td>数据格式</td><td>二进制（如Protocol Buffers、Thrift）或文本</td><td>通常为消息序列化（JSON、XML、二进制）</td><td>JSON、XML等文本格式</td></tr><tr><td>设计风格</td><td>面向过程或函数调用</td><td>基于消息的发布-订阅或队列模型</td><td>面向资源，操作资源的表现层</td></tr><tr><td>典型应用场景</td><td>微服务、分布式系统、跨语言服务</td><td>日志、事件处理、任务调度</td><td>Web API、面向浏览器的服务</td></tr><tr><td>调用方式</td><td>远程过程调用（函数或方法调用）</td><td>发布-订阅或生产-消费模型</td><td>基于HTTP动词（GET、POST、PUT等）</td></tr><tr><td>依赖</td><td>客户端和服务器共享接口定义</td><td>消息代理（如RabbitMQ、Kafka等）</td><td>无需特别依赖，只需遵循HTTP协议</td></tr><tr><td>延迟</td><td>较低（但有网络延迟）</td><td>较低到中等（取决于队列和网络情况）</td><td>较高（HTTP本身较慢，特别是HTTPS）</td></tr><tr><td>调试难度</td><td>较难（涉及网络、序列化等）</td><td>较难（涉及消息丢失、重试、队列溢出等）</td><td>较简单（HTTP可视化工具丰富）</td></tr><tr><td>扩展性</td><td>中等（接口耦合度高）</td><td>高（可进行水平扩展）</td><td>高（无状态设计，易于扩展）</td></tr><tr><td>常见框架&#x2F;工具</td><td>gRPC、Thrift、XML-RPC、JSON-RPC</td><td>RabbitMQ、Kafka、ActiveMQ</td><td>Spring Boot（Java）、Django（Python）</td></tr></tbody></table><p>&emsp;&emsp;相比之下，在REST和RPC中，RPC的接口设计可以更灵活、封装更强，但REST更简单、标准化，容易与浏览器等客户端交互。<br><br>&emsp;&emsp;消息队列（如RabbitMQ、Kafka）常用于异步的消息通信，而RPC更多用于同步的远程调用。消息队列能够缓冲消息，适合高吞吐量的场景，而RPC则倾向于实时、低延迟的交互。<br></p><h2 id="RPC实战"><a href="#RPC实战" class="headerlink" title="RPC实战"></a>RPC实战</h2><p>&emsp;&emsp;对于一个简单的RPC实现来说，代码参见：<a href="https://github.com/gagaducko/RPC-Framework-Simple">https://github.com/gagaducko/RPC-Framework-Simple</a><br><br>&emsp;&emsp;分为四个主要的模块和一些辅助的模块，即client模块、序列化模块、网络模块和server模块。<br><br>&emsp;&emsp;其具体的目录结构如下：<br></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--RPC-Framework-Simple</span><br><span class="hljs-comment">----client</span><br><span class="hljs-comment">----codec</span><br><span class="hljs-comment">----common</span><br><span class="hljs-comment">----protocol</span><br><span class="hljs-comment">----server</span><br><span class="hljs-comment">----test</span><br><span class="hljs-comment">----transport</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;common是通用工具模块，protocol是网络协议模块，transport是网络传输模块，codec是编解码模块（序列化），server是服务端模块，client是客户端模块，而test则是一个集成测试的模块，用于验证正确性。<br><br>&emsp;&emsp;通用工具模块主要是一个反射工具类，用于创建对象、获得公共方法，调用方法等。<br><br>&emsp;&emsp;codec编解码会进行序列化和反序列化，采用fastjson.JSON实现。<br><br>&emsp;&emsp;protocol和transport作为网络模块，主要负责处理网络请求的handle并定义server服务和client消费者。<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">// handle用于处理网络请求</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">RequestHandler</span> &#123;<br>    <span class="hljs-built_in">void</span> onRequest(InputStream recive, OutputStream toRespon);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// TransportServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">TransportServer</span> &#123;<br>    <span class="hljs-comment">// 初始化server服务</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> port, RequestHandler handler</span>)</span>;<br>    <span class="hljs-comment">// start启动</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start</span>()</span>;<br>    <span class="hljs-comment">// close</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stop</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// client消费服务</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">TransportClient</span> &#123;<br>    <span class="hljs-comment">// 连接Server服务</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">connect</span>(<span class="hljs-params">Peer peer</span>)</span>;<br>    <span class="hljs-comment">// 订阅server服务并返回response</span><br>    <span class="hljs-function">InputStream <span class="hljs-title">write</span>(<span class="hljs-params">InputStream data</span>)</span>;<br>    <span class="hljs-comment">// close</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">close</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;server服务端主要调用transport中的HttpTransportServer，将请求在Handle中实现，并封装在Response中，完成服务注册、管理、发现的实现。<br><br>&emsp;&emsp;client客户端则选择一个server端点连接，代理反射调用方法。<br><br>&emsp;&emsp;test模块的测试代码如下：<br></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        RpcServer <span class="hljs-keyword">server</span> = <span class="hljs-keyword">new</span> RpcServer(<span class="hljs-keyword">new</span> RpcServerConfig());<br>        <span class="hljs-keyword">server</span>.register(CalcService.<span class="hljs-keyword">class</span>, <span class="hljs-keyword">new</span> CalcServiceImpl());<br>        <span class="hljs-keyword">server</span>.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Client &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        RpcClient client = <span class="hljs-built_in">new</span> RpcClient();<br>        CalcService service = client.getProxy(CalcService.<span class="hljs-keyword">class</span>);<br>        <span class="hljs-type">int</span> number1 = (<span class="hljs-type">int</span>)(Math.random() * <span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> number2 = (<span class="hljs-type">int</span>)(Math.random() * <span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> number3 = (<span class="hljs-type">int</span>)(Math.random() * <span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> number4 = (<span class="hljs-type">int</span>)(Math.random() * <span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-keyword">add</span> = service.<span class="hljs-keyword">add</span>(number1, number2);<br>        <span class="hljs-type">int</span> minus = service.minus(number3, number4);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;number1 is: &quot; + number1 + &quot; and number2 is: &quot; + number2);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;add number1 and number2 get: &quot; + <span class="hljs-keyword">add</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;number3 is: &quot; + number3 + &quot; and number4 is: &quot; + number4);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;minus number3 by number4 get: &quot; + minus);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;运行结果如下：<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># Server</span><br>22:20:17.061 [main] <span class="hljs-built_in">INFO</span>  org.eclipse.jetty.util.log -<span class="hljs-built_in"> Logging </span>initialized @489ms <span class="hljs-keyword">to</span> org.eclipse.jetty.util.log.Slf4jLog<br>22:20:17.194 [main] <span class="hljs-built_in">INFO</span>  rpc.gagaduck.server.ServiceManager - register service: rpc.gagaduck.test.CalcService minus<br>22:20:17.194 [main] <span class="hljs-built_in">INFO</span>  rpc.gagaduck.server.ServiceManager - register service: rpc.gagaduck.test.CalcService <span class="hljs-built_in">add</span><br>22:20:17.197 [main] <span class="hljs-built_in">INFO</span>  org.eclipse.jetty.server.Server - jetty-9.4.19.v20190610; built: 2019-06-10T16:30:51.723Z; git: afcf563148970e98786327af5e07c261fda175d3; jvm 1.8.0_381-b09<br>22:20:17.241 [main] <span class="hljs-built_in">INFO</span>  o.e.j.server.handler.ContextHandler - Started o.e.j.s.ServletContextHandler@4f063c0a&#123;/,<span class="hljs-literal">null</span>,AVAILABLE&#125;<br>22:20:17.754 [main] <span class="hljs-built_in">INFO</span>  o.e.jetty.server.AbstractConnector - Started ServerConnector@457e2f02&#123;HTTP/1.1,[http/1.1]&#125;&#123;0.0.0.0:3000&#125;<br>22:20:17.754 [main] <span class="hljs-built_in">INFO</span>  org.eclipse.jetty.server.Server - Started @1187ms<br>22:20:26.151 [qtp1798286609-32] <span class="hljs-built_in">INFO</span>  r.g.transport.HTTPTransportServer -<span class="hljs-built_in"> client </span>connect<span class="hljs-built_in"></span><br><span class="hljs-built_in">client </span>connect<br>22:20:26.389 [qtp1798286609-32] <span class="hljs-built_in">INFO</span>  rpc.gagaduck.server.RpcServer - <span class="hljs-built_in">get</span> request: Request(<span class="hljs-attribute">serviceDescriptor</span>=ServiceDescriptor&#123;<span class="hljs-attribute">clazz</span>=<span class="hljs-string">&#x27;rpc.gagaduck.test.CalcService&#x27;</span>, <span class="hljs-attribute">method</span>=<span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-attribute">returnType</span>=<span class="hljs-string">&#x27;int&#x27;</span>, parameterTypes=[int, int]&#125;, params=[1, 2])<br>22:20:26.413 [qtp1798286609-32] <span class="hljs-built_in">INFO</span>  rpc.gagaduck.server.RpcServer - response<span class="hljs-built_in"> client</span><br><span class="hljs-built_in"></span>22:20:26.452 [qtp1798286609-22] <span class="hljs-built_in">INFO</span>  r.g.transport.HTTPTransportServer -<span class="hljs-built_in"> client </span>connect<span class="hljs-built_in"></span><br><span class="hljs-built_in">client </span>connect<br>22:20:26.452 [qtp1798286609-22] <span class="hljs-built_in">INFO</span>  rpc.gagaduck.server.RpcServer - <span class="hljs-built_in">get</span> request: Request(<span class="hljs-attribute">serviceDescriptor</span>=ServiceDescriptor&#123;<span class="hljs-attribute">clazz</span>=<span class="hljs-string">&#x27;rpc.gagaduck.test.CalcService&#x27;</span>, <span class="hljs-attribute">method</span>=<span class="hljs-string">&#x27;minus&#x27;</span>, <span class="hljs-attribute">returnType</span>=<span class="hljs-string">&#x27;int&#x27;</span>, parameterTypes=[int, int]&#125;, params=[10, 8])<br>22:20:26.453 [qtp1798286609-22] <span class="hljs-built_in">INFO</span>  rpc.gagaduck.server.RpcServer - response client<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># Client<br><br><span class="hljs-number">22</span>:<span class="hljs-number">26</span>:<span class="hljs-number">07.439</span> [main] <span class="hljs-keyword">INFO</span>  r.g.client.RandomTransportSelector - <span class="hljs-keyword">connect</span> <span class="hljs-keyword">server</span>: Peer(host=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>, port=<span class="hljs-number">3000</span>)<br>number1 <span class="hljs-keyword">is</span>: <span class="hljs-number">70</span> <span class="hljs-keyword">and</span> number2 <span class="hljs-keyword">is</span>: <span class="hljs-number">28</span><br><span class="hljs-keyword">add</span> number1 <span class="hljs-keyword">and</span> number2 <span class="hljs-keyword">get</span>: <span class="hljs-number">98</span><br>number3 <span class="hljs-keyword">is</span>: <span class="hljs-number">33</span> <span class="hljs-keyword">and</span> number4 <span class="hljs-keyword">is</span>: <span class="hljs-number">50</span><br>minus number3 <span class="hljs-keyword">by</span> number4 <span class="hljs-keyword">get</span>: <span class="hljs-number">-17</span><br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.imooc.com/learn/1158">慕课-自己动手实现RPC框架</a><br><a href="https://blog.csdn.net/jinxinxin1314/article/details/139939444">【微服务】RPC的实现原理</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 微服务学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RPC </tag>
            
            <tag> 框架 </tag>
            
            <tag> 远程调用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—数据库—MySQL的读写分离</title>
      <link href="/2024/09/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93%E2%80%94MySQL%E7%9A%84%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
      <url>/2024/09/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93%E2%80%94MySQL%E7%9A%84%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL的读写分离"><a href="#MySQL的读写分离" class="headerlink" title="MySQL的读写分离"></a>MySQL的读写分离</h2><p>&emsp;&emsp;MySQL的读写分离架构，就是说，由master主服务器来处理涉及到INSERT、UPDATE、DELETE等事务性的写操作，而由slave从服务器来从主服务器复制数据，处理读操作。<br><br>&emsp;&emsp;通过这种架构，有利于将压力分散到多个节点，提升整体的访问性能，同时，也能更好利用只读副本，提升资源利用率，并且增加可伸缩性和数据的安全性，避免宕机对用户的影响。<br><br>&emsp;&emsp;<strong>主从复制</strong>：读写分离需要在主从复制的基础上实现，首先，是通过配置一个MySQL的主从复制的集群来实现读写分离，在主服务器上进行写操作，将更新操作同步到从服务器上，让从服务器进行读操作，也是非常好的一种方式。<br><br>&emsp;&emsp;MySQL的读写分离有几种实现方式：<br><br>&emsp;&emsp;<strong>在应用层进行实现</strong>：首先，最好想但是也最困难的是，就是说，直接在应用层通过动态数据源切换来实现读写分离。这个样子不需要引入中间件，并且理论上来说，对于任何数据库都是合适的，但是侵入性太强，需要根据具体的service来注入不同的数据源。<br><br>&emsp;&emsp;<strong>通过中间件转发</strong>：此外，也可以通过中间件转发读写操作，比如MySQL Proxy，这是官方出的一个轻量级的数据库中间件，可以实现读写分离，进行故障的自动切换、负载均衡、连接池等功能，还有比如阿里的Cobar。<br><br>&emsp;&emsp;<strong>第三方组件的实现方式</strong>：除了中间件，还可以考虑采用第三方组件来处理读写请求，比如非常常见的是一个sharding-jdbc，这是一个开源的JAVA分库分表框架，提供了一种简单而灵活的方式来实现数据的分片和读写分离，适用于高并发和大数据量的场景。并且，在springboot中使用非常简单。<br></p><h2 id="MySQL读写分离的实现"><a href="#MySQL读写分离的实现" class="headerlink" title="MySQL读写分离的实现"></a>MySQL读写分离的实现</h2><p>&emsp;&emsp;在这里分别就三种实现示例如下：<br></p><h3 id="在应用层进行实现"><a href="#在应用层进行实现" class="headerlink" title="在应用层进行实现"></a>在应用层进行实现</h3><p>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br></p><h3 id="通过消息中间件转发"><a href="#通过消息中间件转发" class="headerlink" title="通过消息中间件转发"></a>通过消息中间件转发</h3><p>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br></p><h3 id="第三方组件的实现方式"><a href="#第三方组件的实现方式" class="headerlink" title="第三方组件的实现方式"></a>第三方组件的实现方式</h3><p>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—nginx(2)—nginx进阶</title>
      <link href="/2024/09/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94nginx-2%E2%80%94nginx%E8%BF%9B%E9%98%B6/"/>
      <url>/2024/09/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94nginx-2%E2%80%94nginx%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进阶知识 </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—数据库—MySQL的主从备份</title>
      <link href="/2024/09/27/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93%E2%80%94MySQL%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/"/>
      <url>/2024/09/27/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93%E2%80%94MySQL%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL主从备份"><a href="#MySQL主从备份" class="headerlink" title="MySQL主从备份"></a>MySQL主从备份</h2><p>&emsp;&emsp;服务器有可能突然挂机，如果是docker部署MySQL则也有可能容器突然坏了，这样对于数据库的使用自然会造成不少的影响，因此，需要对数据库采用一个高可用架构。<br><br>&emsp;&emsp;一个比较常见的场景就是主从备份，通常来说都是一主一从或者一主多从。主机进行工作，从机备份数据，如果主机突然宕机了，从机可以立刻开始工作而不会导致数据丢失。<br></p><h2 id="主从备份原理"><a href="#主从备份原理" class="headerlink" title="主从备份原理"></a>主从备份原理</h2><p>&emsp;&emsp;<strong>replication</strong>，可以实现将数据从⼀台数据库服务器（master）<strong>复制</strong>到多台数据库服务器slave上。并且，replication属于<strong>异步复制</strong>，因此是无需长连接的。<br><br>&emsp;&emsp;从工作上来说，复制是基于主服务器在其二进制日志中跟踪对其数据库的所有更改(更新、删除等)。<br><br>&emsp;&emsp;二进制日志作为从服务器启动开始修改数据库结构或内容(数据)的所有事件的书面记录。不过，二进制日志binlog通常不记录SELECT语句，因为它们既不修改数据库结构，也不修改内容。<br><br>&emsp;&emsp;服务器使用二进制日志来记录数据库的变动情况，从服务器通过读取和执行该日志文件来保持和主服务器的数据一致。在使用二进制日志时，主服务器的所有操作都会被记录下来，然后从服务器会接收到该日志的一个副本。从服务器可以指定执行该日志中的哪一类事件（譬如只插入数据或者只更新数据），默认会执行日志中的所有语句。<br><br>&emsp;&emsp;每一个从服务器会记录关于二进制日志的信息：文件名和已经处理过的语句，这样意味着不同的从服务器可以分别执行同一个二进制日志的不同部分，并且从服务器可以随时连接或者中断和服务器的连接。<br><br>&emsp;&emsp;主服务器和每一个从服务器都必须<strong>配置一个唯一的ID号</strong>。<br><br>&emsp;&emsp;在my.cnf文件的[mysqld]模块下有一个server-id配置项，这个配置项便是唯一的ID号，另外，每一个从服务器还需要通过CHANGE MASTER TO语句来配置它要连接的主服务器的ip地址、日志文件名称和该日志里面的位置，这些信息会被储存在主服务器的数据库中。<br><br>&emsp;&emsp;详细的讲，主从复制的基本过程如下：<br><br>&emsp;&emsp;<strong>主数据库保存binlog</strong>：首先，主数据库会将对数据库的更新操作以二进制格式保存在binlog中。<br><br>&emsp;&emsp;<strong>从数据库请求</strong>：而从数据库则会通过IO进程连接上主数据库，并请求从指定的日志文件的指定位置之后的内容开始进行同步。<br><br>&emsp;&emsp;<strong>主数据库返还</strong>：主数据库收到了来自从数据库IO请求后，通过负责复制的IO进程根据请求信息读取指定日志的指定位置的日志信息，返还给从数据库的IO进程。<br><br>&emsp;&emsp;<strong>从数据库设置</strong>：从数据库的IO进程，收到这个信息后，就会将接收到了的内容依次添加到relay-log文件的末端，并将读取到的主数据库的binlog文件的位置和名称记录到master-info文件中去，方便下一次读取时能清楚告诉主数据库需要从哪个位置开始往后继续读。<br><br>&emsp;&emsp;<strong>从数据库执行备份</strong>：从数据库的sql进程检测到了relay-log新增了内容之后，就会马上解析relay-log的内容并在自身进行执行。<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%95%B0%E6%8D%AE%E5%BA%93_MySQL%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="主从备份原理" title="主从备份原理"></p><h2 id="主从备份的配置"><a href="#主从备份的配置" class="headerlink" title="主从备份的配置"></a>主从备份的配置</h2><p>&emsp;&emsp;主从备份的配置主要分为以下几个步骤：<br><br>&emsp;&emsp;1. 在主服务器上开启二进制日志机制，并配置一个独立的ID号。<br><br>&emsp;&emsp;2. 在每一个从服务器上配置一个唯一的ID号。<br><br>&emsp;&emsp;3. 创建一个专门用来复制主服务器数据的账号。<br><br>&emsp;&emsp;4. 在主服务器上授予从服务器该账号的复制权限。<br><br>&emsp;&emsp;5. 在从服务器上配置主服务器的连接信息，包括主机名、账号和密码。<br><br>&emsp;&emsp;6. 启动从服务器的复制进程，确保其可以成功连接到主服务器。<br><br>&emsp;&emsp;7. 验证主从复制的状态，确保数据一致性与实时同步。<br></p><h2 id="主从备份实践"><a href="#主从备份实践" class="headerlink" title="主从备份实践"></a>主从备份实践</h2><p>&emsp;&emsp;简单来说，配置主从备份同步主要分为以下几个步骤。首先，在主服务器上，<strong>需要开启二进制日志机制并且配置一个独立的ID</strong>，这个ID是从0-255的。在每一个从服务器上，配置一个唯一的ID，创建一个用来专门复制主服务器数据的账号。在开始服务进程之前，主服务器上会记录<strong>二进制文件的位置信息</strong>。如果说，在开始服务之前，主数据库上以及有了数据，那么就必须要先创建一个数据快照，比如说先使用mysqldump导出数据库（<strong>这个非常重要！！！</strong>）。最后配置从服务器要连接的主服务器的IP地址和授权登陆，二进制日志文件名和位置。<br><br>&emsp;&emsp;接下来，对主从备份的详细方法做一个阐述。<br><br>&emsp;&emsp;首先，主从的服务器可以自由指定，现在以docekr容器来进行实践，以mysql:8.3为例，建立一个一主一从的简单mysql主从备份集群。<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull mysql:<span class="hljs-number">8</span>.<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;创建一个docker网络组（当然，如果是分布式的部署，我认为是不需要的，这里是用于在一台机器上演示多个docker容器来进行部署。）<br></p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">docker network create mysql-<span class="hljs-built_in">net</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在此基础上，创建好所有挂载的目录。<br><br>&emsp;&emsp;启动部署主服务器：<br></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs groovy">docker run --net=mysql-net -v <span class="hljs-regexp">/etc/</span>mysql<span class="hljs-regexp">/log:/</span><span class="hljs-keyword">var</span>/log \<br>-v <span class="hljs-regexp">/etc/</span>mysql<span class="hljs-regexp">/data:/</span><span class="hljs-keyword">var</span><span class="hljs-regexp">/lib/</span>mysql \<br>-v <span class="hljs-regexp">/etc/</span>mysql<span class="hljs-regexp">/conf.d/</span>mysql.<span class="hljs-attr">cnf:</span><span class="hljs-regexp">/etc/</span>mysql<span class="hljs-regexp">/conf.d/</span>mysql.cnf \<br>--restart=always -p <span class="hljs-number">3308</span>:<span class="hljs-number">3306</span> --name mysql-master \<br>-e MYSQL_ROOT_PASSWORD=<span class="hljs-number">123</span>qweasd -d <span class="hljs-attr">mysql:</span><span class="hljs-number">8.3</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这样可以运行主服务器容器，并将其加入到mysql-net网络中。<br><br>&emsp;&emsp;接着编辑主服务器MySQL的配置文件&#x2F;etc&#x2F;mysql&#x2F;conf.d&#x2F;mysql.cnf：<br></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> /etc/mysql/<span class="hljs-keyword">conf</span>.d/mysql.<span class="hljs-keyword">cnf</span><br>[mysqld]<br>server-id = <span class="hljs-number">1</span><br><span class="hljs-built_in">log</span>-bin = mysql-master-bin<br>binlog-ignore-db = mysql,information_schema,performance_schema,sys<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;接着进入MySQL服务器并配置root账户：<br></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker exec -it mysql-master bash<br>mysql -uroot -p123qweasd<br><br>ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="hljs-string">&#x27;123qweasd&#x27;</span>;<br>FLUSH PRIVILEGES;<br><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;重启应用以启用配置：<br></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker restart mysql-<span class="hljs-literal">master</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;查看主服务器的状态：<br></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker exec -it mysql-<span class="hljs-keyword">master</span> <span class="hljs-title">mysql</span> -uroot -p123qweasd -e <span class="hljs-string">&quot;SHOW MASTER STATUS;&quot;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;记下 File 和 Position 字段的值，这些将在从服务器配置时用到。<br><br>&emsp;&emsp;<strong>下一步，就是部署从服务器</strong>。<br><br>&emsp;&emsp;首先，还是运行MySQL从服务器容器并加入网络。<br></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs groovy">docker run --net=mysql-net -v <span class="hljs-regexp">/etc/</span>mysql2<span class="hljs-regexp">/log:/</span><span class="hljs-keyword">var</span>/log \<br>-v <span class="hljs-regexp">/etc/</span>mysql2<span class="hljs-regexp">/data:/</span><span class="hljs-keyword">var</span><span class="hljs-regexp">/lib/</span>mysql \<br>-v <span class="hljs-regexp">/etc/</span>mysql2<span class="hljs-regexp">/conf.d/</span>mysql.<span class="hljs-attr">cnf:</span><span class="hljs-regexp">/etc/</span>mysql<span class="hljs-regexp">/conf.d/</span>mysql.cnf \<br>--restart=always -p <span class="hljs-number">3307</span>:<span class="hljs-number">3306</span> --name mysql-slave1 \<br>-e MYSQL_ROOT_PASSWORD=<span class="hljs-number">123</span>qweasd -d <span class="hljs-attr">mysql:</span><span class="hljs-number">8.3</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;编辑从服务器的配置文件 &#x2F;etc&#x2F;mysql2&#x2F;conf.d&#x2F;mysql.cnf。注意id不要一样。<br></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">server-id</span> = <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;进入从服务器容器并设置主从复制的配置：<br></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker exec -it mysql-slave1 bash<br>mysql -uroot -p123qweasd<br>ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="hljs-string">&#x27;123qweasd&#x27;</span>;<br>FLUSH PRIVILEGES;<br><span class="hljs-keyword">exit</span><br><span class="hljs-comment"># 退出重启容器</span><br>docker restart mysql-slave1<br><span class="hljs-comment"># 再次进入，设置主从配置</span><br>docker exec -it mysql-slave1 bash<br>mysql -uroot -p123qweasd<br><br>CHANGE MASTER TO<br>MASTER_HOST=<span class="hljs-string">&#x27;mysql-master&#x27;</span>,  -- 使用主机容器名称替代 IP<br>MASTER_PORT=<span class="hljs-number">3306</span>,<br>MASTER_USER=<span class="hljs-string">&#x27;root&#x27;</span>,<br>MASTER_PASSWORD=<span class="hljs-string">&#x27;123qweasd&#x27;</span>,<br>MASTER_LOG_FILE=<span class="hljs-string">&#x27;mysql-master-bin.000004&#x27;</span>, -- 根据主服务器的实际值<br>MASTER_LOG_POS=<span class="hljs-number">158</span>; -- 根据主服务器的实际值<br><br>START SLAVE;<br><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;检查从服务器状态：<br></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> mysql-slave1 mysql -uroot -p123qweasd -e <span class="hljs-string">&quot;SHOW SLAVE STATUS \G&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%95%B0%E6%8D%AE%E5%BA%93_MySQL%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/%E5%AE%8C%E6%88%90%E8%AE%BE%E7%BD%AE%E7%9A%84%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="从服务器完成设置后的正确状态" title="从服务器完成设置后的正确状态"><br>&emsp;&emsp;验证主从同步:<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%95%B0%E6%8D%AE%E5%BA%93_MySQL%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/%E4%B8%BB%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="一主一从两个数据库" title="一主一从两个数据库"><br>&emsp;&emsp;首先，在主服务器上创建一个数据库或者表，之后检查从服务器上是否同步成功。<br></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 创建一个测试库<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> repl_test;<br>USE repl_test;<br><br># 创建一个测试表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> users (<br>    id <span class="hljs-type">INT</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY KEY</span>,<br>    <span class="hljs-type">name</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>,<br>    created_at <span class="hljs-type">TIMESTAMP</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span><br>);<br><br># 插入一些测试数据<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users (<span class="hljs-type">name</span>, email) <span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;alice@example.com&#x27;</span>),<br>(<span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;bob@example.com&#x27;</span>),<br>(<span class="hljs-string">&#x27;Charlie&#x27;</span>, <span class="hljs-string">&#x27;charlie@example.com&#x27;</span>);<br><br># 查看插入的数据<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> users;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;而后进入从数据库，看具体的情况，可以看到从数据库是同步了主数据库的变化的。<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%95%B0%E6%8D%AE%E5%BA%93_MySQL%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/%E6%93%8D%E4%BD%9C%E4%B8%BB%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="操作主数据库" title="操作主数据库"><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%95%B0%E6%8D%AE%E5%BA%93_MySQL%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8C%E6%AD%A5.png" alt="从数据库同步" title="从数据库同步"><br>&emsp;&emsp;进一步插入一些数据或者做一些修改，可以看到进一步的变化。<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%95%B0%E6%8D%AE%E5%BA%93_MySQL%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/%E7%BB%A7%E7%BB%AD%E6%93%8D%E4%BD%9C%E4%B8%BB%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="继续操作主数据库" title="继续操作主数据库"><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%95%B0%E6%8D%AE%E5%BA%93_MySQL%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E8%A1%8C%E5%90%8C%E6%AD%A5.png" alt="从数据库继续同步" title="从数据库继续同步"><br>&emsp;&emsp;这样，一个一主一从的MySQL数据库主从备份就实现了。<br></p><h2 id="主从备份可能出现的问题"><a href="#主从备份可能出现的问题" class="headerlink" title="主从备份可能出现的问题"></a>主从备份可能出现的问题</h2><p>&emsp;&emsp;主从备份的设置中，可能会出现一些问题，比如主从不同步，这时候就需要进行一些处理。<br></p><h3 id="Q1-配置信息有问题"><a href="#Q1-配置信息有问题" class="headerlink" title="Q1 配置信息有问题"></a>Q1 配置信息有问题</h3><p>&emsp;&emsp;首先，就是设置主数据库信息出现问题时候的从数据库：<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%95%B0%E6%8D%AE%E5%BA%93_MySQL%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/%E8%AE%BE%E7%BD%AE%E4%B8%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%E7%9A%84%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="主数据库信息出现问题" title="主数据库信息出现问题"><br>&emsp;&emsp;可以看到的是，当主数据库信息，比如在<em>CHANGE MASTER TO</em>中把IP或者端口设置错误的时候，slave-io-running出现了connecting的错误。所以一定要保证自己的信息是对的。<br><br>&emsp;&emsp;除了这种IP或者端口设置错误的情况，还有一些其他的情况：<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%95%B0%E6%8D%AE%E5%BA%93_MySQL%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/%E7%BB%9F%E4%B8%80ID%E7%9A%84%E6%83%85%E5%86%B5.png" alt="统一ID的情况" title="统一ID的情况"><br>&emsp;&emsp;比如，mysql的id应该是需要不一样的，假如说mysql的id出现了相同的情况，那么slave-io-running出现了no并爆出对应的报错。<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%95%B0%E6%8D%AE%E5%BA%93_MySQL%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/POSI%E4%B8%8D%E4%B8%80%E6%A0%B7.png" alt="position不一致" title="position不一致"><br>&emsp;&emsp;再比如position不一致的情况，会导致slave-sql-running出现了no的错误，有对应的报错，也需要进行修正<br></p><h3 id="Q2-SLAVE启动报错"><a href="#Q2-SLAVE启动报错" class="headerlink" title="Q2 SLAVE启动报错"></a>Q2 SLAVE启动报错</h3><p>&emsp;&emsp;当start slave的时候，有时会出现报错：<br></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ERROR <span class="hljs-number">1872</span> (HY000): <span class="hljs-keyword">Replica</span> failed <span class="hljs-keyword">to</span> initialize applier metadata structure <span class="hljs-keyword">from</span> the repository<br></code></pre></td></tr></table></figure><p><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%95%B0%E6%8D%AE%E5%BA%93_MySQL%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E6%8D%AE%E5%AD%98%E5%9C%A8%E9%97%AE%E9%A2%98%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="初始化SLAVE报错" title="初始化SLAVE报错"><br>&emsp;&emsp;这样一个报错是表示在复制的过程中，从储存库初始化元数据结构的时候出现了问题，可能原因很多，比如存储库中的元数据损坏、复制过程中可能存在网络问题，导致从主服务器获取复制数据失败、主服务器的配置可能存在问题，导致无法正确提供复制数据等等。<br><br>&emsp;&emsp;要解决这个问题，可以尝试以下几个步骤：<br><br>&emsp;&emsp;首先是可以尝试修复存储库中的元数据，或者重新创建存储库。<br><br>&emsp;&emsp;其次要确保主服务器和从服务器之间的网络连接正常，并且没有任何阻塞或延迟。<br><br>&emsp;&emsp;更要确保主服务器的配置正确，并且可以正确提供复制数据。<br><br>&emsp;&emsp;重启设置启动一下slave。<br></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># RESET SLAVE 可以用来清除从服务器上的复制状态</span><br>reset <span class="hljs-literal">slave</span>;<br><span class="hljs-literal">start</span> <span class="hljs-literal">slave</span>;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;如果重置复制状态后问题仍然存在，可能需要删除并重新创建 MySQL 中用于存储复制元数据的表。<br></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">STOP SLAVE;<br><br># 删除用于存储复制元数据的表<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> mysql.slave_master_info;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> mysql.slave_relay_log_info;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> mysql.slave_worker_info;<br><br># 重启 MySQL 服务<br>service mysql <span class="hljs-keyword">restart</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;最后再重新配置从服务器的复制，如上一步中的配置过程。<br></p><h3 id="Q3-数据库复制出现问题"><a href="#Q3-数据库复制出现问题" class="headerlink" title="Q3 数据库复制出现问题"></a>Q3 数据库复制出现问题</h3><p>&emsp;&emsp;在某些情况下，往往是主数据库进行了一些操作后，才开始做从数据库，又或者一个数据库操作了很久后，才决定变成另外一个数据库的从数据库，这个样子会出现一定问题。比如：<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%95%B0%E6%8D%AE%E5%BA%93_MySQL%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/%E5%A4%8D%E5%88%B6%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98.png" alt="数据库复制出现问题" title="数据库复制出现问题"></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">Last_Error: Coordinator stopped because there were error(s) in the worker(s). The most recent failure being: Worker 1 failed executing transaction &#x27;ANONYMOUS&#x27; at source log mysql-master-bin.000004, end_log_pos 358. See error log<span class="hljs-built_in"> and/or </span>performance_schema.replication_applier_status_by_worker table for more details about this failure<span class="hljs-built_in"> or </span>others,<span class="hljs-built_in"> if </span>any.……<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这种情况就是数据库的复制出现了问题。<br><br>&emsp;&emsp;比如这个错误提示表明，在 MySQL 主从复制过程中，从服务器的某个 Worker 线程在执行事务时遇到了问题，导致复制失败。具体错误信息指出了事务在 mysql-master-bin.000004 二进制日志文件中的位置 end_log_pos 358 出现了问题。<br><br>&emsp;&emsp;一般来说，出现这个问题的情况有以下几种：<br><br>&emsp;&emsp;一种是<strong>数据不一致</strong>，主服务器上的某个事务可能试图修改从服务器上不存在的数据，或者主从服务器的数据已经发生了不一致的情况。这会导致从服务器无法正确执行该事务，并出现复制错误。<br><br>&emsp;&emsp;一种是<strong>主从服务器上的表结构不一致</strong>，主服务器和从服务器的表结构可能存在差异，比如字段类型不同、索引不一致等。这会导致从服务器在应用主服务器的事务时出错。<br><br>&emsp;&emsp;还有可能是<strong>主数据库配置上的差异和事务处理上的不一致</strong>。对于这样的情况来说，要进行解决。<br><br>&emsp;&emsp;首先，要查看详细的错误日志。<br><br>&emsp;&emsp;错误日志通常位于 &#x2F;var&#x2F;log&#x2F;mysql&#x2F;error.log，也可以通过 MySQL 变量 log_error 查看日志路径：<br></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">SHOW VARIABLES LIKE <span class="hljs-emphasis">&#x27;log_error&#x27;</span>;<br><br><span class="hljs-section">mysql&gt; SHOW VARIABLES LIKE &#x27;log_error&#x27;;</span><br><span class="hljs-section">+---------------+--------+</span><br><span class="hljs-section">| Variable_name | Value  |</span><br><span class="hljs-section">+---------------+--------+</span><br><span class="hljs-section">| log_error     | stderr |</span><br><span class="hljs-section">+---------------+--------+</span><br>1 row in set (0.01 sec)<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;进一步的检查复制状态，可以通过 MySQL 的 performance_schema.replication_applier_status_by_worker 表来查看具体的错误：<br></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> performance_schema.replication_applier_status_by_worker <span class="hljs-keyword">WHERE</span> LAST_ERROR_NUMBER != <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%95%B0%E6%8D%AE%E5%BA%93_MySQL%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97.png" alt="查看复制状态" title="查看复制状态"><br>&emsp;&emsp;这将显示具体哪个 Worker 出现了错误及其详细信息。从这里可以看到在新建database repl_test的过程中出现了一些问题。<br><br>&emsp;&emsp;便可针对其进行排查。<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%95%B0%E6%8D%AE%E5%BA%93_MySQL%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/%E4%BF%AE%E5%A4%8D.png" alt="修复" title="修复"><br>&emsp;&emsp;最后，就是修复数据不一致问题。<br><br>&emsp;&emsp;主从服务器数据不一致时，可以手动检查从服务器上的数据是否与主服务器一致，必要时可以在从服务器上手动修复数据，或从主服务器重新同步。<br><br>&emsp;&emsp;如果发现数据不一致，可以在从服务器上插入或更新相应的记录。<br><br>&emsp;&emsp;如果你确定某个事务并不重要，可以通过跳过有问题的事务来继续复制进程。可以使用 SET GLOBAL sql_slave_skip_counter 命令跳过有问题的事务：<br></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">STOP SLAVE<span class="hljs-comment">;</span><br>SET GLOBAL sql_slave_skip_counter <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>START SLAVE<span class="hljs-comment">;</span><br>SHOW SLAVE STATUS \G<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;最后，就是检查以下主从数据库的表结构等等并重新初始化配置，解决问题。<br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—nginx(1)—nginx基础</title>
      <link href="/2024/09/26/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94nginx(1)%E2%80%94nginx%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/09/26/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94nginx(1)%E2%80%94nginx%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—分布式缓存(4)—Redis分布式锁</title>
      <link href="/2024/09/25/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-4-%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2024/09/25/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-4-%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>&emsp;&emsp;在单体的应用开发场景中，在多线程的环境下，涉及到并发同步的时候，对于可能出现的资源抢占问题，为了保证一个代码块在同一时间内只有一个线程可以访问，一般可以采用本地锁比如synchronized来进行保证。<br><br>&emsp;&emsp;但是，在分布式集群工作的开发场景中，本地锁便不起作用了。就需要引入分布式锁。<br><br>&emsp;&emsp;Redis 分布式锁是一种基于 Redis 实现的分布式系统中常用的锁机制，用于协调多个进程或线程对共享资源的访问。分布式锁可以保证在分布式环境中不同的服务实例之间同步地对某些资源进行排他访问，避免资源的竞争和不一致问题。<br></p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>&emsp;&emsp;Redis 分布式锁基于 Redis 的 SETNX（Set if Not Exists）命令实现，它的基本思路是：<br><br>&emsp;&emsp;<strong>获取锁</strong>：使用 SETNX（SET if Not eXists）命令尝试在 Redis 中设置一个唯一标识符（锁键），如果锁不存在则设置成功，并返回 1，代表获取锁成功。如果锁已存在（意味着其他进程已经持有该锁），SETNX 命令将返回 0，代表获取锁失败。<br><br>&emsp;&emsp;<strong>设置过期时间</strong>：为防止锁无法释放（如进程崩溃或网络中断导致锁被长期占用），应为锁设置一个过期时间，避免死锁。可以通过 Redis 的 EXPIRE 命令或使用 SET 命令的扩展参数 EX PX NX，一次性设置锁并指定过期时间。<br><br>&emsp;&emsp;<strong>释放锁</strong>：锁的持有者完成任务后，使用 DEL 命令删除锁键，释放锁，使得其他进程有机会获取锁。为防止误删锁（如 A 获取锁后，B 锁超时，A 恰好完成任务后删除了锁，导致 B 错误删除锁），一般通过比较锁的唯一标识（如 UUID）来确保只有持有锁的进程才能释放锁。<br></p><h2 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h2><p>&emsp;&emsp;Redisson 是一个 Java 客户端，用于与 Redis 服务器进行交互。它提供了多种高级功能，简化了 Redis 的使用，支持多种数据结构和异步操作。它使用 Redis 的底层命令，通过其高效的连接管理和线程池来优化性能。它的设计使得各种数据结构可以通过简单的 Java 对象进行操作，同时支持异步和响应式编程模型。<br><br>&emsp;&emsp;在功能上来说，Redisson提供简单的锁机制，确保多线程环境下的数据一致性。<br></p><h2 id="RedLock"><a href="#RedLock" class="headerlink" title="RedLock"></a>RedLock</h2><p>&emsp;&emsp;RedLock 是一种分布式锁算法，由 Redis 创始人发明。它解决了在分布式环境中实现可靠锁的难题，确保锁的有效性和一致性。<br><br>&emsp;&emsp;RedLock 的实现基于以下原则：<br></p><ul><li>在多个 Redis 实例中请求锁。</li><li>通过设置锁的有效时间，确保锁不会无限期持有。</li><li>若一个节点获得锁，其他节点会被告知锁的状态。</li><li>通过保证锁的获取顺序，确保只有一个节点可以成功获得锁。</li></ul><p>&emsp;&emsp;具体步骤上来说：<br></p><ul><li>在 N 个 Redis 实例中依次请求锁。</li><li>在大多数实例中成功获得锁后，认为获得锁。</li><li>定期检查锁的状态，并在必要时释放锁。</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>&emsp;&emsp;对于Redis分布式锁的实现，有多种方式：<br></p><h3 id="1-SETNX-EXPIRE"><a href="#1-SETNX-EXPIRE" class="headerlink" title="1. SETNX + EXPIRE"></a>1. SETNX + EXPIRE</h3><p>&emsp;&emsp;通过<code>SETNX</code>命令尝试设置一个键，如果成功则表示获得了锁。随后使用<code>EXPIRE</code>命令为该键设置一个过期时间，以防止锁长时间占用。<br></p><h3 id="2-SETNX-value值（系统时间-过期时间）"><a href="#2-SETNX-value值（系统时间-过期时间）" class="headerlink" title="2. SETNX + value值（系统时间 + 过期时间）"></a>2. SETNX + value值（系统时间 + 过期时间）</h3><p>&emsp;&emsp;在<code>SETNX</code>成功时，除了设置锁键，还可以将当前时间戳加上过期时间的值作为锁的值，这样可以在后续解锁时判断锁是否过期。<br></p><h3 id="3-SET的扩展命令（SET-EX-PX-NX）"><a href="#3-SET的扩展命令（SET-EX-PX-NX）" class="headerlink" title="3. SET的扩展命令（SET EX PX NX）"></a>3. SET的扩展命令（SET EX PX NX）</h3><p>&emsp;&emsp;Redis提供了扩展的<code>SET</code>命令，支持在设置键值时同时指定过期时间。使用<code>SET key value EX seconds NX</code>可以一次性完成设置值和过期时间。<br></p><h3 id="4-Lua脚本（包含SETNX-EXPIRE两条命令）"><a href="#4-Lua脚本（包含SETNX-EXPIRE两条命令）" class="headerlink" title="4. Lua脚本（包含SETNX + EXPIRE两条命令）"></a>4. Lua脚本（包含SETNX + EXPIRE两条命令）</h3><p>&emsp;&emsp;利用Lua脚本可以原子性地执行多条命令，避免了在并发情况下的锁竞争。可以在脚本中先执行<code>SETNX</code>，成功后立即调用<code>EXPIRE</code>设置过期时间。<br></p><h3 id="5-SET-EX-PX-NX-校验唯一随机值，再删除"><a href="#5-SET-EX-PX-NX-校验唯一随机值，再删除" class="headerlink" title="5. SET EX PX NX + 校验唯一随机值，再删除"></a>5. SET EX PX NX + 校验唯一随机值，再删除</h3><p>&emsp;&emsp;在获取锁时，使用一个唯一的随机值作为锁的标识。在解锁时先校验这个值是否与当前值相同，只有匹配时才删除锁，确保不会误删其他客户端的锁。<br></p><h3 id="6-Redisson框架"><a href="#6-Redisson框架" class="headerlink" title="6. Redisson框架"></a>6. Redisson框架</h3><p>&emsp;&emsp;Redisson是一个基于Redis的Java客户端，提供了简单易用的分布式锁实现，封装了底层的复杂逻辑，开发者可以方便地使用其提供的API来获取和释放锁。<br></p><h3 id="7-多机实现的分布式锁-Redlock-Redisson"><a href="#7-多机实现的分布式锁-Redlock-Redisson" class="headerlink" title="7. 多机实现的分布式锁 Redlock + Redisson"></a>7. 多机实现的分布式锁 Redlock + Redisson</h3><p>&emsp;&emsp;Redlock是一种在多个Redis实例上实现分布式锁的算法，适合在分布式环境中使用。通过Redisson，可以轻松实现Redlock算法，从而获得高可用的分布式锁。<br><br>&emsp;&emsp;<br><br>&emsp;&emsp;<br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 分布式缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式缓存 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—性能测试—分布式Jmeter搭建与使用</title>
      <link href="/2024/09/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8FJmeter%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/09/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8FJmeter%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Jmeter"><a href="#Jmeter" class="headerlink" title="Jmeter"></a>Jmeter</h2><p>&emsp;&emsp;总所周知，Jmeter是可以用于接口测试和性能测试的一个工具。随着现在技术的发展，对性能测试的要求是日益提升的，因此，Jmeter的性能测试是极为重要的。<br><br>&emsp;&emsp;然后，Jmeter是基于Java开发的，每创建一个线程或者说一个虚拟用户的时候，JVM就会默认为每个线程分配1M的堆栈内存空间，由于配置限制，Jmeter在一个单机的情况下，是很难实现过高的并发的。<br><br>&emsp;&emsp;因此，可以通过Jmeter的分布式部署，来整合多台主机的硬件资源，以此达到对被测接口进行压力测试的目的。<br><br>&emsp;&emsp;在分布式的Jmeter测试环境中，有两个非常重要的角色，分别为master和slaves。<br><br>&emsp;&emsp;<strong>master</strong>：也可以叫做主节点，主要就是负责发送测试脚本到slaves节点上，并且，在master上可以启动、停止、监控测试。最后，slaves通过将测试结果返回到master并由master进行汇总分析。<br><br>&emsp;&emsp;<strong>slaves</strong>：也可以叫做是从节点，主要负责从master节点来接收测试脚本，并执行压测，最后返回测试结果给master节点。<br><br>&emsp;&emsp;通过Jmeter的分布式部署使用，可以达到较高的可扩展性、并能高效利用多台机器的资源进行压力测试，且更接近于实际上的高并发场景，评估会更加全面。<br><br>&emsp;&emsp;当然，采用Jmeter的<strong>坏处</strong>就是对环境的一致性要求比较高，且网络因素可能会造成一定的影响。因此，在具体的部署使用过程中，要注意：带宽要够，主从节点的时间要同步，防火墙要确保不会阻拦。<br></p><h2 id="单机Jmeter搭建"><a href="#单机Jmeter搭建" class="headerlink" title="单机Jmeter搭建"></a>单机Jmeter搭建</h2><p>&emsp;&emsp;首先，对于一个单机的普通的Jmeter搭建来说，可以直接访问<a href="https://jmeter.apache.org/download_jmeter.cgi">https://jmeter.apache.org/download_jmeter.cgi</a><br><br>&emsp;&emsp;并下载适合版本的包（主要需要安装的机器上有Java的），例如，于此选择apache-jmeter-5.6.3.zip<br><br>&emsp;&emsp;下载后，将其解压到本地没有空格和中文路径的文件夹中，注意不要出现两层同名文件夹。<br><br>&emsp;&emsp;将bin目录配置进入环境变量：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">D</span>:\learning_demo\jmeter\apache-jmeter-<span class="hljs-number">5</span>.<span class="hljs-number">6</span>.<span class="hljs-number">3</span>\bin<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;可以通过如下命令查看：<br></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">jmeter -v</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;命令行输入Jmeter，出现以下内容：<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95_jmeter/jmeter%E7%95%8C%E9%9D%A2.png" alt="单机版Jmeter" title="单机版Jmeter"></p><h2 id="基于Docker的分布式Jmeter搭建及测试"><a href="#基于Docker的分布式Jmeter搭建及测试" class="headerlink" title="基于Docker的分布式Jmeter搭建及测试"></a>基于Docker的分布式Jmeter搭建及测试</h2><p>&emsp;&emsp;这里采用Docker作为分布式Jmeter搭建的工具。<br><br>&emsp;&emsp;首先，需要pull对应的master和slave镜像，镜像的选择比较多样，这里采用：<br></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker pull runcare/jmeter-<span class="hljs-keyword">master</span><br><span class="hljs-title">docker</span> pull runcare/jmeter-<span class="hljs-literal">slave</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;接着创建docker虚拟网络，来保证网络隔离和容器间的通信。<br><br>&emsp;&emsp;这里创建一个jmeter的网络：<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker<span class="hljs-built_in"> network </span>create jmeter<br><br><span class="hljs-comment"># 可以查看列表</span><br>docker<span class="hljs-built_in"> network </span>ls<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;而后，以三个容器作为Jmeter的slave节点创建从服务：<br></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> -d <span class="hljs-comment">--name slave_01 --network jmeter runcare/jmeter-slave</span><br>docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> -d <span class="hljs-comment">--name slave_02 --network jmeter runcare/jmeter-slave</span><br>docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> -d <span class="hljs-comment">--name slave_03 --network jmeter runcare/jmeter-slave</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;接着通过logs查看每个slaves的ip地址：<br></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">docker logs slave<span class="hljs-emphasis">_01</span><br><span class="hljs-emphasis">docker logs slave_02</span><br><span class="hljs-emphasis">docker logs slave_</span>03<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;此处显示如下：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">###### slave_01 ######</span><br><span class="hljs-attribute">Sep</span> <span class="hljs-number">23</span>, <span class="hljs-number">2024</span> <span class="hljs-number">1</span>:<span class="hljs-number">29</span>:<span class="hljs-number">12</span> PM java.util.prefs.FileSystemPreferences$<span class="hljs-number">1</span> run<br><span class="hljs-attribute">INFO</span>: Created user preferences directory.<br><span class="hljs-attribute">Using</span> local port: <span class="hljs-number">60001</span><br><span class="hljs-attribute">Created</span> remote object: UnicastServerRef2<span class="hljs-meta"> [liveRef: [endpoint:[172.23.0.2:60001](local),objID:[-15e5ed54:1921d5af285:-7fff, -1734960256902179902]]]</span><br><span class="hljs-attribute">Httpd</span> started <span class="hljs-literal">on</span> port: <span class="hljs-number">9000</span><br><span class="hljs-attribute">Sessiond</span> started <span class="hljs-literal">on</span> port: <span class="hljs-number">9001</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">###### slave_02 ######</span><br><span class="hljs-attribute">Sep</span> <span class="hljs-number">23</span>, <span class="hljs-number">2024</span> <span class="hljs-number">1</span>:<span class="hljs-number">29</span>:<span class="hljs-number">30</span> PM java.util.prefs.FileSystemPreferences$<span class="hljs-number">1</span> run<br><span class="hljs-attribute">INFO</span>: Created user preferences directory.<br><span class="hljs-attribute">Using</span> local port: <span class="hljs-number">60001</span><br><span class="hljs-attribute">Created</span> remote object: UnicastServerRef2<span class="hljs-meta"> [liveRef: [endpoint:[172.23.0.3:60001](local),objID:[-29c83ff3:1921d5b38b0:-7fff, -7241895482354295030]]]</span><br><span class="hljs-attribute">Httpd</span> started <span class="hljs-literal">on</span> port: <span class="hljs-number">9000</span><br><span class="hljs-attribute">Sessiond</span> started <span class="hljs-literal">on</span> port: <span class="hljs-number">9001</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">###### slave_03 ######</span><br><span class="hljs-attribute">Sep</span> <span class="hljs-number">23</span>, <span class="hljs-number">2024</span> <span class="hljs-number">1</span>:<span class="hljs-number">29</span>:<span class="hljs-number">34</span> PM java.util.prefs.FileSystemPreferences$<span class="hljs-number">1</span> run<br><span class="hljs-attribute">INFO</span>: Created user preferences directory.<br><span class="hljs-attribute">Using</span> local port: <span class="hljs-number">60001</span><br><span class="hljs-attribute">Created</span> remote object: UnicastServerRef2<span class="hljs-meta"> [liveRef: [endpoint:[172.23.0.4:60001](local),objID:[-3fd9085:1921d5b4783:-7fff, -3735717183614470538]]]</span><br><span class="hljs-attribute">Httpd</span> started <span class="hljs-literal">on</span> port: <span class="hljs-number">9000</span><br><span class="hljs-attribute">Sessiond</span> started <span class="hljs-literal">on</span> port: <span class="hljs-number">9001</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;可以看到三个容器的地址分别为：<br></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">172.23.0.2</span><br><span class="hljs-number">172.23.0.3</span><br><span class="hljs-number">172.23.0.4</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在此基础上，先创建一个测试脚本（可通过本地的jmeter进行创建），创建gagaduck.jmx一个简单的测试脚本，并放在~&#x2F;jmx_file_dir下面。启动master节点执行测试：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">result=`<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%Y%m%d%H%M%S&quot;</span>` &amp;&amp; docker run --<span class="hljs-built_in">rm</span> --network jmeter_net -v /root/jmx_file_dir:/data runcare/jmeter-master jmeter -n -t /data/gagaduck.jmx -l /data/<span class="hljs-variable">$result</span>.jtl -j /data/<span class="hljs-variable">$result</span>.<span class="hljs-built_in">log</span> -e -o /data/<span class="hljs-variable">$result</span> -R 172.23.0.2,172.23.0.3,172.23.0.4<br></code></pre></td></tr></table></figure><p><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95_jmeter/jmeter%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95.png" alt="jmeter压力测试" title="jmeter压力测试"><br>&emsp;&emsp;同时，于此，可以查看slave的日志：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Starting</span> the test <span class="hljs-literal">on</span> host <span class="hljs-number">172.23.0.4</span> @ Mon Sep <span class="hljs-number">23</span> <span class="hljs-number">14</span>:<span class="hljs-number">16</span>:<span class="hljs-number">26</span> CST <span class="hljs-number">2024</span> (<span class="hljs-number">1727072186051</span>)<br><span class="hljs-attribute">Finished</span> the test <span class="hljs-literal">on</span> host <span class="hljs-number">172.23.0.4</span> @ Mon Sep <span class="hljs-number">23</span> <span class="hljs-number">14</span>:<span class="hljs-number">16</span>:<span class="hljs-number">35</span> CST <span class="hljs-number">2024</span> (<span class="hljs-number">1727072195655</span>)<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;每一个slave都有执行test的日志输出。<br><br>&emsp;&emsp;对于这样一条命令，首先<strong>result&#x3D;date +”%Y%m%d%H%M%S”<strong>这个是获取当前的日期时间并许以特定的格式。<br><br>&emsp;&emsp;<strong>docker run –rm</strong>表示运行一个 Docker 容器，–rm 表示容器在执行结束后自动删除。<br><br>&emsp;&emsp;</strong>-v &#x2F;root&#x2F;jmx_file_dir:&#x2F;data</strong>是进行卷挂载，将本地的 &#x2F;root&#x2F;jmx_file_dir 目录映射到容器内的 &#x2F;data 目录，由此进行测试。<br><br>&emsp;&emsp;<strong>jmeter -n -t &#x2F;data&#x2F;gagaduck.jmx -l &#x2F;data&#x2F;$result.jtl -j &#x2F;data&#x2F;$result.log -e -o &#x2F;data&#x2F;$result -R 172.23.0.2,172.23.0.3,172.23.0.4</strong>这样的一个部分呢，适用于容器内的具体操作。这里使用 jmeter 工具进行相关测试，指定了测试计划文件、结果文件、日志文件等，并指定了要报告到的 IP 地址（Slaves节点的IP地址）。<br><br>&emsp;&emsp;在该命令启动后，master首先会将本地的jmx文件拷贝并分发到指定jmeter网络的所有slave节点上。<br><br>&emsp;&emsp;拿到了测试脚本之后，slave就会以命令行的模式执行脚本。执行过程中，slave会将执行获得的数据结果传回到master节点上，由master节点来汇总。也就是上面图片所展示的内容。<br><br>&emsp;&emsp;最后，回到挂在的目录下面，会有一个文件夹，这个文件夹以当前时间为名字进行命名。<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95_jmeter/%E6%8A%A5%E5%91%8A%E5%AD%98%E6%94%BE.png" alt="报告路径" title="报告路径"><br>&emsp;&emsp;进去后，打开index.html，便是当前这个测试的测试报告了。<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95_jmeter/%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A.png" alt="测试报告" title="测试报告"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能测试 </tag>
            
            <tag> Jmeter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—分布式缓存(3)—Redis分片集群</title>
      <link href="/2024/09/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-3-%E2%80%94Redis%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4/"/>
      <url>/2024/09/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-3-%E2%80%94Redis%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="分片集群"><a href="#分片集群" class="headerlink" title="分片集群"></a>分片集群</h2><p>&emsp;&emsp;有了主从、有了哨兵，解决了高可用和高并发读的问题。但是，即便如此，仍然有两个问题没有解决。<br><br>&emsp;&emsp;第一，是<strong>海量数据的储存问题</strong>。<br><br>&emsp;&emsp;第二，是<strong>高并发写的问题</strong>。<br><br>&emsp;&emsp;那么，使用分片集群，便可以解决这样的两个问题。<br><br>&emsp;&emsp;对于一个分片集群来说，集群中有多个master，每个master保存不一样的数据，对于每个master来说，有多个slave节点。<br><br>&emsp;&emsp;master之间可以通过ping来监测彼此的健康状态。<br><br>&emsp;&emsp;客户端发出的对于redis的请求，可以访问集群的任意节点，最终，都会被转发到正确的节点中去。<br><br>&emsp;&emsp;对于一个分片集群来说，一个节点就是一个运行在集群模式下的Redis服务器。启动Redis服务器时，通过判断cluster-enabled选项，选择是否开启集群模式。（Yes开启集群，No则单机模式普通服务器）<br></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#开启redis的集群模式</span><br>cluster-enabled yes<br><br><span class="hljs-comment">#集群内节点之间支持最长响应时间</span><br>cluster-<span class="hljs-keyword">node</span><span class="hljs-title">-timeout</span> <span class="hljs-number">15000</span><br><br><span class="hljs-comment">#配置集群模式下的配置文件</span><br>cluster-config-file nodes-<span class="hljs-number">6379</span>.conf<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;每个节点使用的端口各不相同，可以设置。每个节点最开始可以看做一个只有自己节点的集群，节点间通过命令相互握手，组建集群。<br><br>&emsp;&emsp;握手命令如下：<br></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 和ip为127.0.0.1，端口为6378的节点进行握手</span><br><span class="hljs-attribute">cluster</span> meet <span class="hljs-number">127.0.0.1:6378</span><br><br><span class="hljs-comment"># 显示当前集群的节点信息</span><br>cluster nodes<br></code></pre></td></tr></table></figure><h2 id="分片集群的搭建与使用"><a href="#分片集群的搭建与使用" class="headerlink" title="分片集群的搭建与使用"></a>分片集群的搭建与使用</h2><p>&emsp;&emsp;此处还是采用docker的方式来进行演示分片集群的搭建与使用。<br><br>&emsp;&emsp;首先，还是使用redis:bullseye的镜像。<br></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">docker pull <span class="hljs-keyword">redi</span><span class="hljs-variable">s:bullseye</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;而后，于此以不挂载的方式进行搭建，挂载的方式其实也是一样的。<br><br>&emsp;&emsp;第一步是创建一个network网络：<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker<span class="hljs-built_in"> network </span>create redis-cluster-network<br><br><span class="hljs-comment"># 可以查看network的列表</span><br>docker<span class="hljs-built_in"> network </span>ls<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;Redis分片集群至少需要6个Redis实例，3个为主节点，3个为副本节点。<br></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">docker run -d <span class="hljs-attr">--name</span> redis-node-<span class="hljs-number">1</span> <span class="hljs-attr">--net</span> redis-cluster-network redis:bullseye redis-server <span class="hljs-attr">--cluster-enabled</span> yes <span class="hljs-attr">--cluster-config-file</span> nodes<span class="hljs-selector-class">.conf</span> <span class="hljs-attr">--cluster-node-timeout</span> <span class="hljs-number">5000</span> <span class="hljs-attr">--appendonly</span> yes <span class="hljs-attr">--port</span> <span class="hljs-number">7001</span><br>docker run -d <span class="hljs-attr">--name</span> redis-node-<span class="hljs-number">2</span> <span class="hljs-attr">--net</span> redis-cluster-network redis:bullseye redis-server <span class="hljs-attr">--cluster-enabled</span> yes <span class="hljs-attr">--cluster-config-file</span> nodes<span class="hljs-selector-class">.conf</span> <span class="hljs-attr">--cluster-node-timeout</span> <span class="hljs-number">5000</span> <span class="hljs-attr">--appendonly</span> yes <span class="hljs-attr">--port</span> <span class="hljs-number">7002</span><br>docker run -d <span class="hljs-attr">--name</span> redis-node-<span class="hljs-number">3</span> <span class="hljs-attr">--net</span> redis-cluster-network redis:bullseye redis-server <span class="hljs-attr">--cluster-enabled</span> yes <span class="hljs-attr">--cluster-config-file</span> nodes<span class="hljs-selector-class">.conf</span> <span class="hljs-attr">--cluster-node-timeout</span> <span class="hljs-number">5000</span> <span class="hljs-attr">--appendonly</span> yes <span class="hljs-attr">--port</span> <span class="hljs-number">7003</span><br>docker run -d <span class="hljs-attr">--name</span> redis-node-<span class="hljs-number">4</span> <span class="hljs-attr">--net</span> redis-cluster-network redis:bullseye redis-server <span class="hljs-attr">--cluster-enabled</span> yes <span class="hljs-attr">--cluster-config-file</span> nodes<span class="hljs-selector-class">.conf</span> <span class="hljs-attr">--cluster-node-timeout</span> <span class="hljs-number">5000</span> <span class="hljs-attr">--appendonly</span> yes <span class="hljs-attr">--port</span> <span class="hljs-number">7004</span><br>docker run -d <span class="hljs-attr">--name</span> redis-node-<span class="hljs-number">5</span> <span class="hljs-attr">--net</span> redis-cluster-network redis:bullseye redis-server <span class="hljs-attr">--cluster-enabled</span> yes <span class="hljs-attr">--cluster-config-file</span> nodes<span class="hljs-selector-class">.conf</span> <span class="hljs-attr">--cluster-node-timeout</span> <span class="hljs-number">5000</span> <span class="hljs-attr">--appendonly</span> yes <span class="hljs-attr">--port</span> <span class="hljs-number">7005</span><br>docker run -d <span class="hljs-attr">--name</span> redis-node-<span class="hljs-number">6</span> <span class="hljs-attr">--net</span> redis-cluster-network redis:bullseye redis-server <span class="hljs-attr">--cluster-enabled</span> yes <span class="hljs-attr">--cluster-config-file</span> nodes<span class="hljs-selector-class">.conf</span> <span class="hljs-attr">--cluster-node-timeout</span> <span class="hljs-number">5000</span> <span class="hljs-attr">--appendonly</span> yes <span class="hljs-attr">--port</span> <span class="hljs-number">7006</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;接着可以检查redis的实例是否全部启动成功：<br></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker ps</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;随后，集群需要使用IP地址来进行节点间通信，可以使用以下命令来获得每个Redis实例的IP地址：<br></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">docker inspect -f &#x27;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">range.NetworkSettings.Networks</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.IPAddress</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">end</span>&#125;&#125;</span><span class="language-xml">&#x27; redis-node-1</span><br><span class="language-xml">docker inspect -f &#x27;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">range.NetworkSettings.Networks</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.IPAddress</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">end</span>&#125;&#125;</span><span class="language-xml">&#x27; redis-node-2</span><br><span class="language-xml">docker inspect -f &#x27;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">range.NetworkSettings.Networks</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.IPAddress</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">end</span>&#125;&#125;</span><span class="language-xml">&#x27; redis-node-3</span><br><span class="language-xml">docker inspect -f &#x27;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">range.NetworkSettings.Networks</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.IPAddress</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">end</span>&#125;&#125;</span><span class="language-xml">&#x27; redis-node-4</span><br><span class="language-xml">docker inspect -f &#x27;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">range.NetworkSettings.Networks</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.IPAddress</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">end</span>&#125;&#125;</span><span class="language-xml">&#x27; redis-node-5</span><br><span class="language-xml">docker inspect -f &#x27;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">range.NetworkSettings.Networks</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.IPAddress</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">end</span>&#125;&#125;</span><span class="language-xml">&#x27; redis-node-6</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;于此，得到了几个redis实例的IP地址：<br></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">172.24.0.2</span><br><span class="hljs-number">172.24.0.3</span><br><span class="hljs-number">172.24.0.4</span><br><span class="hljs-number">172.24.0.5</span><br><span class="hljs-number">172.24.0.6</span><br><span class="hljs-number">172.24.0.7</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;基于此，可以开始启动集群了：<br></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">docker run -<span class="hljs-literal">it</span> --rm --net redis-cluster-network redis:bullseye redis-cli --cluster create <span class="hljs-string">\</span><br>  <span class="hljs-number">172.24</span>.<span class="hljs-number">0.2</span>:<span class="hljs-number">7001</span> <span class="hljs-string">\</span><br>  <span class="hljs-number">172.24</span>.<span class="hljs-number">0.3</span>:<span class="hljs-number">7002</span> <span class="hljs-string">\</span><br>  <span class="hljs-number">172.24</span>.<span class="hljs-number">0.4</span>:<span class="hljs-number">7003</span> <span class="hljs-string">\</span><br>  <span class="hljs-number">172.24</span>.<span class="hljs-number">0.5</span>:<span class="hljs-number">7004</span> <span class="hljs-string">\</span><br>  <span class="hljs-number">172.24</span>.<span class="hljs-number">0.6</span>:<span class="hljs-number">7005</span> <span class="hljs-string">\</span><br>  <span class="hljs-number">172.24</span>.<span class="hljs-number">0.7</span>:<span class="hljs-number">7006</span> <span class="hljs-string">\</span><br>  --cluster-replicas <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;Port就是上面启动时使用的Port，此命令将会创建一个有三个主节点、三个从节点的Redis集群，其中 –cluster-replicas 1 表示每个主节点都会有一个副本节点。启动的时候显示如下：<br></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">&gt;&gt;&gt; Performing hash slots allocation on <span class="hljs-number">6</span> nodes...<br><span class="hljs-literal">Master</span>[<span class="hljs-number">0</span>] -&gt; Slots <span class="hljs-number">0</span> - <span class="hljs-number">5460</span><br><span class="hljs-literal">Master</span>[<span class="hljs-number">1</span>] -&gt; Slots <span class="hljs-number">5461</span> - <span class="hljs-number">10922</span><br><span class="hljs-literal">Master</span>[<span class="hljs-number">2</span>] -&gt; Slots <span class="hljs-number">10923</span> - <span class="hljs-number">16383</span><br>Adding replica <span class="hljs-number">172.24</span>.<span class="hljs-number">0.6</span>:<span class="hljs-number">7005</span> to <span class="hljs-number">172.24</span>.<span class="hljs-number">0.2</span>:<span class="hljs-number">7001</span><br>Adding replica <span class="hljs-number">172.24</span>.<span class="hljs-number">0.7</span>:<span class="hljs-number">7006</span> to <span class="hljs-number">172.24</span>.<span class="hljs-number">0.3</span>:<span class="hljs-number">7002</span><br>Adding replica <span class="hljs-number">172.24</span>.<span class="hljs-number">0.5</span>:<span class="hljs-number">7004</span> to <span class="hljs-number">172.24</span>.<span class="hljs-number">0.4</span>:<span class="hljs-number">7003</span><br>M: a85caca5fada00aa43bc3ff7baf47e8eda13c814 <span class="hljs-number">172.24</span>.<span class="hljs-number">0.2</span>:<span class="hljs-number">7001</span><br>   slots:[<span class="hljs-number">0</span>-<span class="hljs-number">5460</span>] (<span class="hljs-number">5461</span> slots) <span class="hljs-keyword">master</span><br><span class="hljs-title">M</span>: dae07fbbbf0e8ba7c9959408ac931d70deaaef0b <span class="hljs-number">172.24</span>.<span class="hljs-number">0.3</span>:<span class="hljs-number">7002</span><br>   slots:[<span class="hljs-number">5461</span>-<span class="hljs-number">10922</span>] (<span class="hljs-number">5462</span> slots) <span class="hljs-keyword">master</span><br><span class="hljs-title">M</span>: <span class="hljs-number">43</span>e2c65d9be8750131a631b6fe79a19bdb6deaee <span class="hljs-number">172.24</span>.<span class="hljs-number">0.4</span>:<span class="hljs-number">7003</span><br>   slots:[<span class="hljs-number">10923</span>-<span class="hljs-number">16383</span>] (<span class="hljs-number">5461</span> slots) <span class="hljs-keyword">master</span><br><span class="hljs-title">S</span>: a044956680f88d49209b54aaa282279c2b955679 <span class="hljs-number">172.24</span>.<span class="hljs-number">0.5</span>:<span class="hljs-number">7004</span><br>   replicates <span class="hljs-number">43</span>e2c65d9be8750131a631b6fe79a19bdb6deaee<br>S: <span class="hljs-number">71</span>f225cb0e495187062782dc668b3b9e2d1e6fcd <span class="hljs-number">172.24</span>.<span class="hljs-number">0.6</span>:<span class="hljs-number">7005</span><br>   replicates a85caca5fada00aa43bc3ff7baf47e8eda13c814<br>S: <span class="hljs-number">7108324</span>df122bc424d6f5c0502311e4b7f19701f <span class="hljs-number">172.24</span>.<span class="hljs-number">0.7</span>:<span class="hljs-number">7006</span><br>   replicates dae07fbbbf0e8ba7c9959408ac931d70deaaef0b<br>Can I set the above configuration? (<span class="hljs-keyword">type</span> &#x27;yes&#x27; to accept): yes<br>&gt;&gt;&gt; Nodes configuration updated<br>&gt;&gt;&gt; Assign a different config epoch to each <span class="hljs-keyword">node</span><br><span class="hljs-title">&gt;&gt;&gt; Sending</span> CLUSTER MEET messages to join the cluster<br>Waiting for the cluster to join<br>..<br>&gt;&gt;&gt; Performing Cluster Check (using <span class="hljs-keyword">node</span> <span class="hljs-title">172</span>.<span class="hljs-number">24.0</span>.<span class="hljs-number">2</span>:<span class="hljs-number">7001</span>)<br>M: a85caca5fada00aa43bc3ff7baf47e8eda13c814 <span class="hljs-number">172.24</span>.<span class="hljs-number">0.2</span>:<span class="hljs-number">7001</span><br>   slots:[<span class="hljs-number">0</span>-<span class="hljs-number">5460</span>] (<span class="hljs-number">5461</span> slots) <span class="hljs-keyword">master</span><br>   <span class="hljs-title">1</span> additional replica(s)<br>M: <span class="hljs-number">43</span>e2c65d9be8750131a631b6fe79a19bdb6deaee <span class="hljs-number">172.24</span>.<span class="hljs-number">0.4</span>:<span class="hljs-number">7003</span><br>   slots:[<span class="hljs-number">10923</span>-<span class="hljs-number">16383</span>] (<span class="hljs-number">5461</span> slots) <span class="hljs-keyword">master</span><br>   <span class="hljs-title">1</span> additional replica(s)<br>S: a044956680f88d49209b54aaa282279c2b955679 <span class="hljs-number">172.24</span>.<span class="hljs-number">0.5</span>:<span class="hljs-number">7004</span><br>   slots: (<span class="hljs-number">0</span> slots) <span class="hljs-literal">slave</span><br>   replicates <span class="hljs-number">43</span>e2c65d9be8750131a631b6fe79a19bdb6deaee<br>M: dae07fbbbf0e8ba7c9959408ac931d70deaaef0b <span class="hljs-number">172.24</span>.<span class="hljs-number">0.3</span>:<span class="hljs-number">7002</span><br>   slots:[<span class="hljs-number">5461</span>-<span class="hljs-number">10922</span>] (<span class="hljs-number">5462</span> slots) <span class="hljs-keyword">master</span><br>   <span class="hljs-title">1</span> additional replica(s)<br>S: <span class="hljs-number">71</span>f225cb0e495187062782dc668b3b9e2d1e6fcd <span class="hljs-number">172.24</span>.<span class="hljs-number">0.6</span>:<span class="hljs-number">7005</span><br>   slots: (<span class="hljs-number">0</span> slots) <span class="hljs-literal">slave</span><br>   replicates a85caca5fada00aa43bc3ff7baf47e8eda13c814<br>S: <span class="hljs-number">7108324</span>df122bc424d6f5c0502311e4b7f19701f <span class="hljs-number">172.24</span>.<span class="hljs-number">0.7</span>:<span class="hljs-number">7006</span><br>   slots: (<span class="hljs-number">0</span> slots) <span class="hljs-literal">slave</span><br>   replicates dae07fbbbf0e8ba7c9959408ac931d70deaaef0b<br>[OK] All nodes agree about slots configuration.<br>&gt;&gt;&gt; Check for open slots...<br>&gt;&gt;&gt; Check slots coverage...<br>[OK] All <span class="hljs-number">16384</span> slots covered.<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;搭建好后的Redis分片集群如下：<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98_%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4/Redis%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4.png" alt="Redis分片集群" title="Redis分片集群"><br>&emsp;&emsp;在集群创建成功后，使用以下命令查看集群状态：<br></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker exec -it redis-<span class="hljs-keyword">node</span><span class="hljs-title">-1</span> redis-cli -p <span class="hljs-number">7001</span> cluster nodes<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">43e2c65d9be8750131a631b6fe79a19bdb6deaee</span> <span class="hljs-number">172.24.0.4:7003</span>@<span class="hljs-number">17003</span> master - <span class="hljs-number">0</span> <span class="hljs-number">1727075791763</span> <span class="hljs-number">3</span> connected <span class="hljs-number">10923</span>-<span class="hljs-number">16383</span><br><span class="hljs-attribute">a044956680f88d49209b54aaa282279c2b955679</span> <span class="hljs-number">172.24.0.5:7004</span>@<span class="hljs-number">17004</span> slave <span class="hljs-number">43</span>e2c65d9be8750131a631b6fe79a19bdb6deaee <span class="hljs-number">0</span> <span class="hljs-number">1727075792766</span> <span class="hljs-number">3</span> connected<br><span class="hljs-attribute">dae07fbbbf0e8ba7c9959408ac931d70deaaef0b</span> <span class="hljs-number">172.24.0.3:7002</span>@<span class="hljs-number">17002</span> master - <span class="hljs-number">0</span> <span class="hljs-number">1727075791000</span> <span class="hljs-number">2</span> connected <span class="hljs-number">5461</span>-<span class="hljs-number">10922</span><br><span class="hljs-attribute">71f225cb0e495187062782dc668b3b9e2d1e6fcd</span> <span class="hljs-number">172.24.0.6:7005</span>@<span class="hljs-number">17005</span> slave a85caca5fada00aa43bc3ff7baf47e8eda13c814 <span class="hljs-number">0</span> <span class="hljs-number">1727075790558</span> <span class="hljs-number">1</span> connected<br><span class="hljs-attribute">7108324df122bc424d6f5c0502311e4b7f19701f</span> <span class="hljs-number">172.24.0.7:7006</span>@<span class="hljs-number">17006</span> slave dae07fbbbf0e8ba7c9959408ac931d70deaaef0b <span class="hljs-number">0</span> <span class="hljs-number">1727075791000</span> <span class="hljs-number">2</span> connected<br><span class="hljs-attribute">a85caca5fada00aa43bc3ff7baf47e8eda13c814</span> <span class="hljs-number">172.24.0.2:7001</span>@<span class="hljs-number">17001</span> myself,master - <span class="hljs-number">0</span> <span class="hljs-number">1727075791000</span> <span class="hljs-number">1</span> connected <span class="hljs-number">0</span>-<span class="hljs-number">5460</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;或者也可通过以下命令查看集群状态：<br></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker exec -it redis-<span class="hljs-keyword">node</span><span class="hljs-title">-1</span> redis-cli -p <span class="hljs-number">7001</span> cluster <span class="hljs-literal">inf</span>o<br></code></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">cluster_state:</span>ok<br><span class="hljs-symbol">cluster_slots_assigned:</span><span class="hljs-number">16384</span><br><span class="hljs-symbol">cluster_slots_ok:</span><span class="hljs-number">16384</span><br><span class="hljs-symbol">cluster_slots_pfail:</span><span class="hljs-number">0</span><br><span class="hljs-symbol">cluster_slots_fail:</span><span class="hljs-number">0</span><br><span class="hljs-symbol">cluster_known_nodes:</span><span class="hljs-number">6</span><br><span class="hljs-symbol">cluster_size:</span><span class="hljs-number">3</span><br><span class="hljs-symbol">cluster_current_epoch:</span><span class="hljs-number">6</span><br><span class="hljs-symbol">cluster_my_epoch:</span><span class="hljs-number">1</span><br><span class="hljs-symbol">cluster_stats_messages_ping_sent:</span><span class="hljs-number">37</span><br><span class="hljs-symbol">cluster_stats_messages_pong_sent:</span><span class="hljs-number">39</span><br><span class="hljs-symbol">cluster_stats_messages_sent:</span><span class="hljs-number">76</span><br><span class="hljs-symbol">cluster_stats_messages_ping_received:</span><span class="hljs-number">34</span><br><span class="hljs-symbol">cluster_stats_messages_pong_received:</span><span class="hljs-number">37</span><br><span class="hljs-symbol">cluster_stats_messages_meet_received:</span><span class="hljs-number">5</span><br><span class="hljs-symbol">cluster_stats_messages_received:</span><span class="hljs-number">76</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在分片集群搭建完毕后，如果说，采用原始的方式进入分片集群的一个节点，进行设置。比如，通过redis-cli 命令连接到集群中的任意节点，插入数据并验证是否自动分片。<br></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker exec -it redis-<span class="hljs-keyword">node</span><span class="hljs-title">-1</span> redis-cli -p <span class="hljs-number">7001</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;会出现如下显示：<br></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:7001</span>&gt; set key1 <span class="hljs-string">&quot;value1&quot;</span><br>(error) MOVED <span class="hljs-number">9189</span> <span class="hljs-number">172</span>.<span class="hljs-number">24</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3</span>:<span class="hljs-number">7002</span><br><span class="hljs-number">127.0.0.1:7001</span>&gt; get key1<br>(error) MOVED <span class="hljs-number">9189</span> <span class="hljs-number">172</span>.<span class="hljs-number">24</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3</span>:<span class="hljs-number">7002</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;出现 (error) MOVED 错误是因为 Redis 集群将键分片到不同的主节点上，Redis 集群使用哈希槽（hash slots）将键映射到特定的节点。当你直接连接到某个节点时，如果该键不属于这个节点，Redis 会返回 MOVED 错误，并告知你正确的主节点地址。<br><br>&emsp;&emsp;解决方法是通过 redis-cli 的集群模式连接，这样 redis-cli 会自动跟踪集群中的正确节点，不需要手动处理 MOVED 错误。在运行redis-cli的时候加上-c的选项。<br></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker exec -it redis-<span class="hljs-keyword">node</span><span class="hljs-title">-1</span> redis-cli -p <span class="hljs-number">7001</span> -c<br></code></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:7001</span>&gt; set key1 <span class="hljs-number">1099</span><br>-&gt; Redirected to slot <span class="hljs-string">[9189]</span> located at <span class="hljs-number">172</span>.<span class="hljs-number">24</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3</span>:<span class="hljs-number">7002</span><br>OK<br><span class="hljs-number">172.24.0.3:7002</span>&gt; get key1<br><span class="hljs-string">&quot;1099&quot;</span><br><span class="hljs-number">172.24.0.3:7002</span>&gt; set key1 <span class="hljs-string">&quot;gagaduck&quot;</span><br>OK<br><span class="hljs-number">172.24.0.3:7002</span>&gt; get key1<br><span class="hljs-string">&quot;gagaduck&quot;</span><br><span class="hljs-number">172.24.0.3:7002</span>&gt; set test_key <span class="hljs-string">&quot;gagaduck&quot;</span><br>-&gt; Redirected to slot <span class="hljs-string">[15118]</span> located at <span class="hljs-number">172</span>.<span class="hljs-number">24</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4</span>:<span class="hljs-number">7003</span><br>OK<br><span class="hljs-number">172.24.0.4:7003</span>&gt; get test_key<br><span class="hljs-string">&quot;gagaduck&quot;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;此时，Redis CLI 应该自动处理键的分片，并且不会再出现 MOVED 错误。<br></p><h2 id="客户端连接Redis分片集群"><a href="#客户端连接Redis分片集群" class="headerlink" title="客户端连接Redis分片集群"></a>客户端连接Redis分片集群</h2><h3 id="springboot连接分片Redis集群"><a href="#springboot连接分片Redis集群" class="headerlink" title="springboot连接分片Redis集群"></a>springboot连接分片Redis集群</h3><p>&emsp;&emsp;首先，要确保pom.xml中添加有redis的依赖：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;随后，配置集群信息：<br></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">spring.data.redis.cluster.nodes=<span class="hljs-number">172.24.0.2</span>:<span class="hljs-number">7001,172.24</span>.<span class="hljs-number">0.3:7002</span>,<span class="hljs-number">172.24.0.4</span>:<span class="hljs-number">7003,172.24</span>.<span class="hljs-number">0.5:7004</span>,<span class="hljs-number">172.24.0.6</span>:<span class="hljs-number">7005,172.24</span>.<span class="hljs-number">0.7:7006</span><br>spring.data.redis.password=<br>spring.data.redis.timeout=<span class="hljs-number">2000</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;spring.redis.cluster.nodes 列出所有Redis集群节点的IP和端口，Spring Boot将会连接这些节点，并通过Redis集群协议获取集群的信息和哈希槽分片。<br><br>&emsp;&emsp;spring.redis.timeout 设置连接的超时时间。<br><br>&emsp;&emsp;Spring Boot支持两种主要的Redis客户端：Lettuce 和 Jedis。这两者都支持Redis分片集群。默认情况下，Spring Boot使用 Lettuce，它是非阻塞的，性能更好。这里也采用Lettuce作为客户端为例。<br><br>&emsp;&emsp;对客户端进行配置：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisClusterConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> LettuceConnectionFactory <span class="hljs-title function_">redisConnectionFactory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 配置Redis集群节点</span><br>        <span class="hljs-type">RedisClusterConfiguration</span> <span class="hljs-variable">redisClusterConfiguration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisClusterConfiguration</span>(<br>                Arrays.asList(<span class="hljs-string">&quot;172.24.0.2:7001&quot;</span>, <span class="hljs-string">&quot;172.24.0.3:7002&quot;</span>, <span class="hljs-string">&quot;172.24.0.4:7003&quot;</span>,<br>                        <span class="hljs-string">&quot;172.24.0.5:7004&quot;</span>, <span class="hljs-string">&quot;172.24.0.6:7005&quot;</span>, <span class="hljs-string">&quot;172.24.0.7:7006&quot;</span>));<br><br>        <span class="hljs-comment">// 配置拓扑刷新选项</span><br>        <span class="hljs-type">ClusterTopologyRefreshOptions</span> <span class="hljs-variable">refreshOptions</span> <span class="hljs-operator">=</span> ClusterTopologyRefreshOptions.builder()<br>                .enablePeriodicRefresh(Duration.ofMinutes(<span class="hljs-number">10</span>))  <span class="hljs-comment">// 每10分钟刷新集群拓扑</span><br>                .enableAllAdaptiveRefreshTriggers()            <span class="hljs-comment">// 启用自适应刷新</span><br>                .build();<br><br>        <span class="hljs-comment">// 配置集群客户端选项</span><br>        <span class="hljs-type">ClusterClientOptions</span> <span class="hljs-variable">clusterClientOptions</span> <span class="hljs-operator">=</span> ClusterClientOptions.builder()<br>                .topologyRefreshOptions(refreshOptions)<br>                .build();<br><br>        <span class="hljs-comment">// 配置 Lettuce 客户端配置</span><br>        <span class="hljs-type">LettuceClientConfiguration</span> <span class="hljs-variable">clientConfiguration</span> <span class="hljs-operator">=</span> LettuceClientConfiguration.builder()<br>                .clientOptions(clusterClientOptions)<br>                .build();<br><br>        <span class="hljs-comment">// 创建 Lettuce 连接工厂</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LettuceConnectionFactory</span>(redisClusterConfiguration, clientConfiguration);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;正确配置好了之后，便可以通过 RedisTemplate 或 StringRedisTemplate 来操作Redis数据。Spring Boot会根据键的哈希值自动将请求路由到正确的Redis节点。<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">stringRedisTemplate.opsForValue().<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>stringRedisTemplate.opsForValue().<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;key1&quot;</span>);<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;具体可以参考<a href="https://github.com/gagaducko/learning_demos/tree/main/distributed-redis-example">https://github.com/gagaducko/learning_demos/tree/main/distributed-redis-example</a><br><br>&emsp;&emsp;如果需要显示集群的一些信息等等情况，也可以采用RedisConnectionFactory来进行操作：<br></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisConnectionFactory redisConnectionFactory;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;当进行请求时，如&#x2F;clusterInfo便可以获得cluster的一些信息：<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Cluster Info:</span><br><span class="hljs-attr">Node ID:</span> <span class="hljs-string">a044956680f88d49209b54aaa282279c2b955679</span><br><span class="hljs-attr">Address:</span> <span class="hljs-number">172.24</span><span class="hljs-number">.0</span><span class="hljs-number">.5</span><br><span class="hljs-attr">Master:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">Slots:</span> []<br><span class="hljs-string">-----------------------</span><br><span class="hljs-attr">Node ID:</span> <span class="hljs-string">71f225cb0e495187062782dc668b3b9e2d1e6fcd</span><br><span class="hljs-attr">Address:</span> <span class="hljs-number">172.24</span><span class="hljs-number">.0</span><span class="hljs-number">.6</span><br><span class="hljs-attr">Master:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">Slots:</span> []<br><span class="hljs-string">-----------------------</span><br><span class="hljs-attr">Node ID:</span> <span class="hljs-string">dae07fbbbf0e8ba7c9959408ac931d70deaaef0b</span><br><span class="hljs-attr">Address:</span> <span class="hljs-number">172.24</span><span class="hljs-number">.0</span><span class="hljs-number">.3</span><br><span class="hljs-attr">Master:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">Slots:</span> <span class="hljs-string">……</span><br><span class="hljs-string">……</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;当setKey时：<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Key <span class="hljs-string">&#x27;key1&#x27;</span> <span class="hljs-built_in">set</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;value1&#x27;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;当getKey时：<br></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Value</span> for <span class="hljs-string">&#x27;key1&#x27;</span>: value1<br></code></pre></td></tr></table></figure><h3 id="python连接分片Redis集群"><a href="#python连接分片Redis集群" class="headerlink" title="python连接分片Redis集群"></a>python连接分片Redis集群</h3><p>&emsp;&emsp;首先，需要安装依赖：<br></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> redis<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;而后配置集群节点：<br></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">startup_nodes</span> = [<br>    ClusterNode(<span class="hljs-string">&quot;172.24.0.2&quot;</span>, <span class="hljs-number">7001</span>),<br>    ClusterNode(<span class="hljs-string">&quot;172.24.0.3&quot;</span>, <span class="hljs-number">7002</span>),<br>    ClusterNode(<span class="hljs-string">&quot;172.24.0.4&quot;</span>, <span class="hljs-number">7003</span>),<br>    ClusterNode(<span class="hljs-string">&quot;172.24.0.5&quot;</span>, <span class="hljs-number">7004</span>),<br>    ClusterNode(<span class="hljs-string">&quot;172.24.0.6&quot;</span>, <span class="hljs-number">7005</span>),<br>    ClusterNode(<span class="hljs-string">&quot;172.24.0.7&quot;</span>, <span class="hljs-number">7006</span>)<br>]<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;最后创建redis连接：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 使用 startup_nodes 正确连接 Redis 集群</span><br>    redis_client = redis.RedisCluster(startup_nodes=startup_nodes, decode_responses=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment"># 设置键值对</span><br>    redis_client.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Python Redis Cluster Example&quot;</span>)<br><br>    <span class="hljs-comment"># 获取键值</span><br>    value = redis_client.get(<span class="hljs-string">&quot;name&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Stored value: <span class="hljs-subst">&#123;value&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">except</span> RedisError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error connecting to Redis Cluster: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;An unexpected error occurred: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;运行后输出：<br></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">Stored value: Python Redis Cluster <span class="hljs-keyword">Example</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;详细可见<a href="https://github.com/gagaducko/learning_demos/tree/main/distributed_redis_example_py">https://github.com/gagaducko/learning_demos/tree/main/distributed_redis_example_py</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 分布式缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式缓存 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—文件管理—minio</title>
      <link href="/2024/09/22/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E2%80%94minio/"/>
      <url>/2024/09/22/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E2%80%94minio/</url>
      
        <content type="html"><![CDATA[<h2 id="MinIO"><a href="#MinIO" class="headerlink" title="MinIO"></a>MinIO</h2><p>&emsp;&emsp;MinIO 是一个高性能的对象存储系统，专为私有云和混合云环境设计，支持存储海量的非结构化数据，如图片、视频、备份、日志文件等。MinIO 提供了与 Amazon S3 兼容的 API，因此它通常用于构建可自托管的对象存储解决方案，尤其在那些需要高可用性和扩展性的场景中。<br></p><h3 id="MinIO的主要特性"><a href="#MinIO的主要特性" class="headerlink" title="MinIO的主要特性"></a>MinIO的主要特性</h3><p>&emsp;&emsp;<strong>与 S3 兼容的 API</strong>：MinIO 完全兼容 AWS S3 的 API。这意味着你可以使用现有的 S3 客户端库和工具来与 MinIO 交互，这使得它非常适合那些希望在本地或私有云环境中复用 S3 代码和工具的用户。<br><br>&emsp;&emsp;<strong>横向扩展</strong>：MinIO 允许通过增加更多节点来横向扩展存储容量和性能。这使得它能够随着业务需求的增长轻松扩展，从而满足海量数据存储的需求。<br><br>&emsp;&emsp;<strong>高性能</strong>：MinIO 被设计为一个极高性能的对象存储系统。它利用现代硬件的多核处理能力和高速网络，能够处理大规模的存储请求，特别适合数据密集型任务，如机器学习、数据分析和视频流等。<br><br>&emsp;&emsp;<strong>分布式存储</strong>：MinIO 支持分布式部署，能够通过多个节点进行数据复制和分片，从而保证数据的高可用性和持久性。即使某个节点失效，数据也能通过冗余机制进行恢复。<br><br>&emsp;&emsp;<strong>Kubernetes 支持</strong>：MinIO 天然与 Kubernetes 兼容，能够在容器化环境中进行自动化管理和扩展，适合云原生应用。<br><br>&emsp;&emsp;<strong>高可用性和容错性</strong>：通过分布式部署，MinIO 提供了容错和数据冗余功能。即使某些磁盘或节点故障，系统仍然能够继续工作并确保数据完整性。<br><br>&emsp;&emsp;<strong>加密和安全性</strong>：MinIO 支持服务器端加密和传输层加密（TLS），能够保护数据的机密性和完整性。此外，MinIO 支持基于策略的访问控制（IAM）和 LDAP 等集成，提供精细化的权限管理。<br></p><h3 id="MinIO的架构"><a href="#MinIO的架构" class="headerlink" title="MinIO的架构"></a>MinIO的架构</h3><p>&emsp;&emsp;MinIO 采用微服务架构，特别注重简洁和高效。它没有复杂的依赖关系，所有功能都打包在一个二进制文件中。这使得 MinIO 在多种场景下的部署和管理非常简单。<br><br>&emsp;&emsp;<strong>单一二进制文件</strong>：MinIO 通过单一的二进制文件提供了所有功能，包括对象存储、API 接口、安全、容错等。这简化了安装、部署和维护的过程。<br><br>&emsp;&emsp;<strong>无状态架构</strong>：MinIO 是一个无状态服务，这意味着它没有依赖外部数据库或元数据存储。所有元数据和文件数据都存储在磁盘上或通过分布式文件系统管理。<br><br>&emsp;&emsp;<strong>水平扩展</strong>：MinIO 通过增加节点的方式进行水平扩展，且每个节点可以是物理机、虚拟机或容器。扩展时只需将新节点加入集群即可自动扩展存储能力。<br><br>&emsp;&emsp;<strong>多租户支持</strong>：MinIO 支持多租户架构，能够为多个应用或团队提供隔离的存储空间。<br></p><h3 id="MinIO的典型使用场景"><a href="#MinIO的典型使用场景" class="headerlink" title="MinIO的典型使用场景"></a>MinIO的典型使用场景</h3><p>&emsp;&emsp;<strong>大数据分析</strong>：MinIO 可用于存储海量数据，为大数据平台（如 Apache Spark、Hadoop 等）提供高性能的存储后端。<br><br>&emsp;&emsp;<strong>机器学习</strong>：机器学习模型的训练通常需要大量的图像、视频或日志文件，MinIO 的高吞吐和可扩展性非常适合这类场景。<br><br>&emsp;&emsp;<strong>备份和恢复</strong>：MinIO 常被用作企业的备份解决方案，能够存储大量的备份数据，并确保其高可用性。<br><br>&emsp;&emsp;<strong>私有云和混合云</strong>：许多企业希望在私有云或混合云中构建与 S3 兼容的存储解决方案，以降低公共云存储的成本或满足数据合规性需求。<br><br>&emsp;&emsp;<strong>数据湖存储</strong>：MinIO 是现代数据湖架构的理想存储层，它可以无缝地与大数据工具集成，支持对非结构化和半结构化数据进行高效管理。<br><br>&emsp;&emsp;<strong>Kubernetes</strong>：MinIO 可以作为 Kubernetes 中的持久存储，支持动态存储卷和持久化卷声明（PVC）。<br><br>&emsp;&emsp;<strong>CI&#x2F;CD</strong>：通过与 Jenkins、GitLab 等 CI&#x2F;CD 工具的集成，MinIO 可以用于存储构建工件、备份文件等。<br></p><h3 id="MinIO的安装与使用"><a href="#MinIO的安装与使用" class="headerlink" title="MinIO的安装与使用"></a>MinIO的安装与使用</h3><p>&emsp;&emsp;MinIO 的安装非常简单，可以在各种操作系统（Linux、macOS、Windows）上运行。<br><br>&emsp;&emsp;首先，是单机安装方式：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在 Linux 环境下安装 MinIO</span><br>wget https://dl.min.io/server/minio/release/linux-amd64/minio<br><span class="hljs-built_in">chmod</span> +x minio<br><span class="hljs-comment"># 将 MinIO 服务器指向 /data 目录</span><br>./minio server /data<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;当然，还有比较简单的方法是docker安装：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull minio/minio<br><span class="hljs-comment"># 创建挂载目录</span><br><span class="hljs-built_in">mkdir</span> -p /home/minio/config<br><span class="hljs-built_in">mkdir</span> -p /home/minio/data<br><span class="hljs-comment"># 运行 MinIO 容器</span><br>docker run -p 9000:9000 -p 9090:9090 \<br>     --net=host \<br>     --name minio \<br>     -d --restart=always \<br>     -e <span class="hljs-string">&quot;MINIO_ACCESS_KEY=gagaduck&quot;</span> \<br>     -e <span class="hljs-string">&quot;MINIO_SECRET_KEY=gagaduck&quot;</span> \<br>     -v /home/minio/data:/data \<br>     -v /home/minio/config:/root/.minio \<br>     minio/minio server \<br>     /data --console-address <span class="hljs-string">&quot;:9090&quot;</span> -address <span class="hljs-string">&quot;:9000&quot;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;运气启动后，进入localhost:9090:<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86_minio/minio%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2.png" alt="minio登陆界面" title="minio登陆界面"><br>&emsp;&emsp;输入启动设置的账号密码，进入minio前端UI界面：<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86_minio/minio.png" alt="minio前端UI界面" title="minio前端UI界面"><br>&emsp;&emsp;这里介绍一下minio文件管理的一些简单的基本概念：<br><br>&emsp;&emsp;<strong>对象（Object）</strong>：对象是 MinIO 存储系统中的核心单位。每个对象由文件数据和元数据组成，元数据包括对象的大小、创建时间、内容类型等。<br><br>&emsp;&emsp;<strong>存储桶（Bucket）</strong>：MinIO 使用存储桶（类似于文件夹）来组织对象。每个存储桶可以包含任意数量的对象，且存储桶名必须是唯一的。<br><br>&emsp;&emsp;<strong>元数据</strong>：MinIO 允许用户为每个对象设置自定义元数据，帮助更好地组织和管理文件。<br><br>&emsp;&emsp;<strong>生命周期管理</strong>：通过配置 MinIO 的生命周期策略，可以自动管理对象的存储和删除，例如定期删除过期对象或将对象移动到低成本存储层。<br><br>&emsp;&emsp;<strong>版本控制</strong>：MinIO 支持对象版本控制，能够跟踪文件的不同版本。开启版本控制后，更新对象时不会覆盖旧版本，而是保留历史版本。<br><br>&emsp;&emsp;<strong>数据复制</strong>：MinIO 支持跨数据中心的数据复制，允许用户将文件从一个存储桶自动复制到另一个存储桶，实现高可用性和数据备份。<br><br>&emsp;&emsp;除了通过可视化界面操作，也可以通过MinIO控制台或者mc命令行工具，对minio进行操作，如：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建存储桶</span><br>mc mb myminio/mybucket<br><br><span class="hljs-comment"># 上传文件</span><br>mc <span class="hljs-built_in">cp</span> /path/to/local/file myminio/mybucket/file<br><br><span class="hljs-comment"># 下载文件</span><br>mc <span class="hljs-built_in">cp</span> myminio/mybucket/file /path/to/local/file<br><br><span class="hljs-comment"># 删除文件</span><br>mc <span class="hljs-built_in">rm</span> myminio/mybucket/file<br><br><span class="hljs-comment"># 删除存储桶</span><br>mc rb myminio/mybucket<br><br><span class="hljs-comment"># 列出存储桶中的文件</span><br>mc <span class="hljs-built_in">ls</span> myminio/mybucket<br><br><span class="hljs-comment"># 列出所有存储桶</span><br>mc <span class="hljs-built_in">ls</span> myminio<br><br><span class="hljs-comment"># 查看文件元数据</span><br>mc <span class="hljs-built_in">stat</span> myminio/mybucket/file<br><br><span class="hljs-comment"># 设置对象访问策略</span><br>mc policy <span class="hljs-built_in">set</span> public myminio/mybucket<br><br>……<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在单点minio的基础上，还可进一步搭建<strong>分布式minio集群</strong>，通过多个节点实现数据分片和冗杂，提高可用性和扩展性。<br><br>&emsp;&emsp;以下以Docker 搭建分布式 MinIO 集群为例：<br><br>&emsp;&emsp;首先，需要确保安装了docker和docker-compose，至少需要4个节点或者说容器来搭建这样一个分布式集群，每个节点储存一部分数据，来提高容错和性能。<br><br>&emsp;&emsp;下一步就是创建一个docker-compose.yml文件来定义MinIO服务。可参考如下：<br></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">services:</span><br><span class="hljs-symbol">  minio1:</span><br><span class="hljs-symbol">    image:</span> minio/minio<br><span class="hljs-symbol">    volumes:</span><br>      - data1:/data<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-string">&quot;9001:9000&quot;</span><br>      - <span class="hljs-string">&quot;9096:9090&quot;</span><br><span class="hljs-symbol">    environment:</span><br><span class="hljs-symbol">      MINIO_ROOT_USER:</span> admin<br><span class="hljs-symbol">      MINIO_ROOT_PASSWORD:</span> admin123<br><span class="hljs-symbol">    command:</span> server --address <span class="hljs-string">&quot;:9000&quot;</span> --console-address <span class="hljs-string">&quot;:9090&quot;</span> http:<span class="hljs-comment">//minio1/data http://minio2/data http://minio3/data http://minio4/data</span><br><span class="hljs-symbol">    networks:</span><br>      - minio_distributed<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  minio2:</span><br><span class="hljs-symbol">    image:</span> minio/minio<br><span class="hljs-symbol">    volumes:</span><br>      - data2:/data<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-string">&quot;9002:9000&quot;</span><br>      - <span class="hljs-string">&quot;9097:9090&quot;</span><br><span class="hljs-symbol">    environment:</span><br><span class="hljs-symbol">      MINIO_ROOT_USER:</span> admin<br><span class="hljs-symbol">      MINIO_ROOT_PASSWORD:</span> admin123<br><span class="hljs-symbol">    command:</span> server --address <span class="hljs-string">&quot;:9000&quot;</span> --console-address <span class="hljs-string">&quot;:9090&quot;</span> http:<span class="hljs-comment">//minio1/data http://minio2/data http://minio3/data http://minio4/data</span><br><span class="hljs-symbol">    networks:</span><br>      - minio_distributed<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  minio3:</span><br><span class="hljs-symbol">    image:</span> minio/minio<br><span class="hljs-symbol">    volumes:</span><br>      - data3:/data<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-string">&quot;9003:9000&quot;</span><br>      - <span class="hljs-string">&quot;9098:9090&quot;</span><br><span class="hljs-symbol">    environment:</span><br><span class="hljs-symbol">      MINIO_ROOT_USER:</span> admin<br><span class="hljs-symbol">      MINIO_ROOT_PASSWORD:</span> admin123<br><span class="hljs-symbol">    command:</span> server --address <span class="hljs-string">&quot;:9000&quot;</span> --console-address <span class="hljs-string">&quot;:9090&quot;</span> http:<span class="hljs-comment">//minio1/data http://minio2/data http://minio3/data http://minio4/data</span><br><span class="hljs-symbol">    networks:</span><br>      - minio_distributed<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  minio4:</span><br><span class="hljs-symbol">    image:</span> minio/minio<br><span class="hljs-symbol">    volumes:</span><br>      - data4:/data<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-string">&quot;9004:9000&quot;</span><br>      - <span class="hljs-string">&quot;9099:9090&quot;</span><br><span class="hljs-symbol">    environment:</span><br><span class="hljs-symbol">      MINIO_ROOT_USER:</span> admin<br><span class="hljs-symbol">      MINIO_ROOT_PASSWORD:</span> admin123<br><span class="hljs-symbol">    command:</span> server --address <span class="hljs-string">&quot;:9000&quot;</span> --console-address <span class="hljs-string">&quot;:9090&quot;</span> http:<span class="hljs-comment">//minio1/data http://minio2/data http://minio3/data http://minio4/data</span><br><span class="hljs-symbol">    networks:</span><br>      - minio_distributed<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">volumes:</span><br><span class="hljs-symbol">  data1:</span><br><span class="hljs-symbol">  data2:</span><br><span class="hljs-symbol">  data3:</span><br><span class="hljs-symbol">  data4:</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">networks:</span><br><span class="hljs-symbol">  minio_distributed:</span><br><span class="hljs-symbol">    driver:</span> bridge<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;每个服务（minio1、minio2、minio3、minio4）代表一个 MinIO 实例，分别绑定不同的端口（9001 到 9004）。其控制台也是，从9096-9099。<strong>volumes</strong>用于挂载本地数据目录，将数据持久化到容器外部。<strong>command</strong>指定了分布式模式下各个节点的地址，所有节点互相可见，组成集群，同时也指定控制台IP和服务地址。环境变量 <strong>MINIO_ROOT_USER</strong> 和 <strong>MINIO_ROOT_PASSWORD</strong> 用于设置集群的访问凭证。<br><br>&emsp;&emsp;在此基础上，启动集群：<br></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;如图所示，为一个四个节点的minio集群：<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86_minio/minio%E9%9B%86%E7%BE%A4.png" alt="minio集群" title="minio集群"><br>&emsp;&emsp;每个 MinIO 节点都有自己的 Web 控制台，你可以通过访问 <a href="http://localhost:9096、http://localhost:9097、http://localhost:9098、http://localhost:9099">http://localhost:9096、http://localhost:9097、http://localhost:9098、http://localhost:9099</a> 来查看各个节点的状态。<br><br>&emsp;&emsp;使用配置的管理员账号（admin 和 admin123）登录到控制台。<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86_minio/%E5%A4%9A%E8%8A%82%E7%82%B9minio.png" alt="多节点minio" title="多节点minio"><br>&emsp;&emsp;而后可以做一些验证，比如现在shutdown掉某个节点（9097），继续查看9096，发现没有问题的。在集群中上传文件时，数据会自动分布在不同节点上。如果某个节点发生故障，其他节点仍然可以提供数据存取服务，确保数据的高可用性。<br><br>&emsp;&emsp;此外，在分布式集群中，MinIO 会自动处理数据的分片和复制。通过配置数据冗余，你可以增加容错能力，确保即使多个节点故障，数据仍然安全。<br><br>&emsp;&emsp;还可以自行配置一些如桶的复制策略等等的内容：<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86_minio/%E8%AE%BE%E7%BD%AEbucket%E7%9A%84%E5%A4%8D%E5%88%B6%E7%AD%96%E7%95%A5.png" alt="minio中bucket的复制策略" title="minio中bucket的复制策略"></p><h2 id="SpringBoot集成MinIO"><a href="#SpringBoot集成MinIO" class="headerlink" title="SpringBoot集成MinIO"></a>SpringBoot集成MinIO</h2><p>&emsp;&emsp;对于一些需要高效管理大规模非结构化数据时（如图像、视频、日志等）的项目来说，MinIO 提供了类似于 AWS S3 的对象存储功能，且完全开源、易于部署，因此非常适合与 Spring Boot 集成使用。<br><br>&emsp;&emsp;通过将minio和springboot进行集成，有利于实现简便的对象存储操作，一些常见的场景比如多媒体管理的场景、日志和备份管理的场景、文件共享平台等等。<br><br>&emsp;&emsp;对于minio和springboot的集成，可以参考<a href="https://github.com/gagaducko/springboot-minio-example">https://github.com/gagaducko/springboot-minio-example</a><br><br>&emsp;&emsp;首先，是需要加入相关的依赖：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.minio<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>minio<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.5.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在此基础上，配置minio的一些信息，如：<br></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">minio.endpoint</span>=http://<span class="hljs-number">192.168</span>.<span class="hljs-number">186.1</span>:<span class="hljs-number">9000</span>/<br><span class="hljs-attr">minio.accessKey</span>=P4QLPVGGSQD3LX5OMG46<br><span class="hljs-attr">minio.secretKey</span>=xdZSChR6PM0PlUWxzMlqo+oZzURP5gClHv2IFsb3<br><span class="hljs-attr">minio.bucketName</span>=gagaduck<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;需要注意的是，这个accessKey和secretKey需要进入minio配置。详细位置参考下图，在service accounts中：<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86_minio/accessKey%E9%85%8D%E7%BD%AE.png" alt="配置accessKey和secretKey" title="配置accessKey和secretKey"><br>&emsp;&emsp;而后可以创建一个minio的配置类进行配置：<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Data</span><br><span class="hljs-variable">@Configuration</span><br><span class="hljs-variable">@ConfigurationProperties</span>(prefix = <span class="hljs-string">&quot;minio&quot;</span>)<br>public class MinioClientConfig &#123;<br><br>    <span class="hljs-comment">// endpoint</span><br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">endpoint</span>;<br><br>    <span class="hljs-comment">// accessKey</span><br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">accessKey</span>;<br><br>    <span class="hljs-comment">// secretKey</span><br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">secretKey</span>;<br><br>    <span class="hljs-comment">// bucketName</span><br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">bucketName</span>;<br><br><br>    @<span class="hljs-selector-tag">Bean</span><br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">MinioClient</span>  <span class="hljs-selector-tag">minioClient</span>() &#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">MinioClient</span><span class="hljs-selector-class">.builder</span>()<br>                <span class="hljs-selector-class">.endpoint</span>(endpoint)<br>                <span class="hljs-selector-class">.credentials</span>(accessKey, secretKey)<br>                <span class="hljs-selector-class">.build</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;对minio的操作参见如下component：<br></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinioClientUtil</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">MinioClient</span> minioClient;<br><br>    <span class="hljs-comment">// 与bucket相关的内容</span><br>    <span class="hljs-comment">// 是否存在</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Boolean</span> <span class="hljs-title function_">bucketExists</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> bucketName</span>) &#123;<br>        <span class="hljs-title class_">Boolean</span> found;<br>        <span class="hljs-keyword">try</span> &#123;<br>            found = minioClient.<span class="hljs-title function_">bucketExists</span>(<span class="hljs-title class_">BucketExistsArgs</span>.<span class="hljs-title function_">builder</span>().<span class="hljs-title function_">bucket</span>(bucketName).<span class="hljs-title function_">build</span>());<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> found;<br>    &#125;<br><br>    <span class="hljs-comment">// 创建bucket</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Boolean</span> <span class="hljs-title function_">makeBucket</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> bucketName</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            minioClient.<span class="hljs-title function_">makeBucket</span>(<span class="hljs-title class_">MakeBucketArgs</span>.<span class="hljs-title function_">builder</span>()<br>                    .<span class="hljs-title function_">bucket</span>(bucketName)<br>                    .<span class="hljs-title function_">build</span>());<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除bucket</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Boolean</span> <span class="hljs-title function_">removeBucket</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> bucketName</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            minioClient.<span class="hljs-title function_">removeBucket</span>(<span class="hljs-title class_">RemoveBucketArgs</span>.<span class="hljs-title function_">builder</span>()<br>                    .<span class="hljs-title function_">bucket</span>(bucketName)<br>                    .<span class="hljs-title function_">build</span>());<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取全部bucket</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>&gt; <span class="hljs-title function_">getAllBuckets</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Bucket</span>&gt; buckets = minioClient.<span class="hljs-title function_">listBuckets</span>();<br>            <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>&gt; jsonObjects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-title class_">Bucket</span> bucket : buckets) &#123;<br>                <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span> jsonObject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>();<br>                jsonObject.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;name&quot;</span>, bucket.<span class="hljs-title function_">name</span>());<br>                jsonObject.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;creationDate&quot;</span>, bucket.<span class="hljs-title function_">creationDate</span>());<br>                jsonObjects.<span class="hljs-title function_">add</span>(jsonObject);<br>            &#125;<br>            <span class="hljs-keyword">return</span> jsonObjects;<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">//文件传输相关内容工具</span><br><br>    <span class="hljs-comment">// 上传文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">upload</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> bucketName, <span class="hljs-title class_">MultipartFile</span> file</span>) &#123;<br>        <span class="hljs-title class_">String</span> originalFilename = file.<span class="hljs-title function_">getOriginalFilename</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">StringUtils</span>.<span class="hljs-title function_">isBlank</span>(originalFilename))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();<br>        &#125;<br><span class="hljs-comment">//        String fileName = UuidUtils.generateUuid() + originalFilename.substring(originalFilename.lastIndexOf(&quot;.&quot;));</span><br>        <span class="hljs-title class_">String</span> fileName = originalFilename;<br>        <span class="hljs-comment">// 创建一个DateTimeFormatter对象，用于格式化日期时间</span><br>        <span class="hljs-title class_">DateTimeFormatter</span> formatter = <span class="hljs-title class_">DateTimeFormatter</span>.<span class="hljs-title function_">ofPattern</span>(<span class="hljs-string">&quot;yyyy-MM/dd&quot;</span>);<br>        <span class="hljs-comment">// 获取当前日期时间</span><br>        <span class="hljs-title class_">LocalDateTime</span> now = <span class="hljs-title class_">LocalDateTime</span>.<span class="hljs-title function_">now</span>();<br>        <span class="hljs-comment">// 格式化日期时间</span><br>        <span class="hljs-title class_">String</span> formattedDate = now.<span class="hljs-title function_">format</span>(formatter);<br>        <span class="hljs-comment">// 拼接日期字符串和文件名</span><br>        <span class="hljs-title class_">String</span> objectName = formattedDate + <span class="hljs-string">&quot;/&quot;</span> + fileName;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-title class_">PutObjectArgs</span> objectArgs = <span class="hljs-title class_">PutObjectArgs</span>.<span class="hljs-title function_">builder</span>().<span class="hljs-title function_">bucket</span>(bucketName).<span class="hljs-title function_">object</span>(objectName)<br>                    .<span class="hljs-title function_">stream</span>(file.<span class="hljs-title function_">getInputStream</span>(), file.<span class="hljs-title function_">getSize</span>(), -<span class="hljs-number">1</span>).<span class="hljs-title function_">contentType</span>(file.<span class="hljs-title function_">getContentType</span>()).<span class="hljs-title function_">build</span>();<br>            <span class="hljs-comment">//文件名称相同会覆盖</span><br>            minioClient.<span class="hljs-title function_">putObject</span>(objectArgs);<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> objectName;<br>    &#125;<br><br>    <span class="hljs-comment">// 预览图片和文档</span><br>    <span class="hljs-comment">// 图片就返回对应url</span><br>    <span class="hljs-comment">// 文档返回对应文档</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">preview</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> bucketName, <span class="hljs-title class_">String</span> fileName</span>)&#123;<br>        <span class="hljs-comment">// 查看文件地址</span><br>        <span class="hljs-title class_">GetPresignedObjectUrlArgs</span> build = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetPresignedObjectUrlArgs</span>().<span class="hljs-title function_">builder</span>().<span class="hljs-title function_">bucket</span>(bucketName).<span class="hljs-title function_">object</span>(fileName).<span class="hljs-title function_">method</span>(<span class="hljs-title class_">Method</span>.<span class="hljs-property">GET</span>).<span class="hljs-title function_">build</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> minioClient.<span class="hljs-title function_">getPresignedObjectUrl</span>(build);<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 文件下载</span><br>    <span class="hljs-comment">// 通过fileName来下载</span><br>    <span class="hljs-comment">// 文件下载，通过fileName来下载</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">download</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> bucketName, <span class="hljs-title class_">String</span> fileName, <span class="hljs-title class_">HttpServletResponse</span> res</span>) &#123;<br>        <span class="hljs-title class_">GetObjectArgs</span> objectArgs = <span class="hljs-title class_">GetObjectArgs</span>.<span class="hljs-title function_">builder</span>()<br>                .<span class="hljs-title function_">bucket</span>(bucketName)<br>                .<span class="hljs-title function_">object</span>(fileName)<br>                .<span class="hljs-title function_">build</span>();<br>        <span class="hljs-title function_">try</span> (<span class="hljs-title class_">GetObjectResponse</span> response = minioClient.<span class="hljs-title function_">getObject</span>(objectArgs);<br>             <span class="hljs-title class_">ServletOutputStream</span> outputStream = res.<span class="hljs-title function_">getOutputStream</span>()) &#123;<br>            <span class="hljs-comment">// 设置响应头</span><br>            res.<span class="hljs-title function_">setCharacterEncoding</span>(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>            res.<span class="hljs-title function_">setContentType</span>(<span class="hljs-string">&quot;application/octet-stream&quot;</span>);<br>            <span class="hljs-title class_">String</span> encodedFileName = <span class="hljs-title class_">URLEncoder</span>.<span class="hljs-title function_">encode</span>(fileName, <span class="hljs-string">&quot;UTF-8&quot;</span>).<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&quot;\\+&quot;</span>, <span class="hljs-string">&quot;%20&quot;</span>);<br>            res.<span class="hljs-title function_">addHeader</span>(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=\&quot;&quot;</span> + encodedFileName + <span class="hljs-string">&quot;\&quot;&quot;</span>);<br>            <span class="hljs-comment">// 使用更大的缓冲区以提高性能</span><br>            byte[] buf = <span class="hljs-keyword">new</span> byte[<span class="hljs-number">8192</span>];<br>            int len;<br>            <span class="hljs-keyword">while</span> ((len = response.<span class="hljs-title function_">read</span>(buf)) != -<span class="hljs-number">1</span>) &#123;<br>                outputStream.<span class="hljs-title function_">write</span>(buf, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            outputStream.<span class="hljs-title function_">flush</span>();<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">MinioException</span> | <span class="hljs-title class_">IOException</span> | <span class="hljs-title class_">InvalidKeyException</span> | <span class="hljs-title class_">NoSuchAlgorithmException</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>&gt; <span class="hljs-title function_">listObjects</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> bucketName</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">listObjectsRecursive</span>(bucketName, <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>&gt; <span class="hljs-title function_">listObjectsRecursive</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> bucketName, <span class="hljs-title class_">String</span> prefix</span>) &#123;<br>        <span class="hljs-title class_">Iterable</span>&lt;<span class="hljs-title class_">Result</span>&lt;<span class="hljs-title class_">Item</span>&gt;&gt; results = minioClient.<span class="hljs-title function_">listObjects</span>(<br>                <span class="hljs-title class_">ListObjectsArgs</span>.<span class="hljs-title function_">builder</span>().<span class="hljs-title function_">bucket</span>(bucketName).<span class="hljs-title function_">prefix</span>(prefix).<span class="hljs-title function_">recursive</span>(<span class="hljs-literal">true</span>).<span class="hljs-title function_">build</span>());<br>        <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>&gt; items = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-title class_">Result</span>&lt;<span class="hljs-title class_">Item</span>&gt; result : results) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-title class_">Item</span> item = result.<span class="hljs-title function_">get</span>();<br>                <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span> jsonObject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>();<br>                jsonObject.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;isDir&quot;</span>, item.<span class="hljs-title function_">isDir</span>());<br>                jsonObject.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;ObjectName&quot;</span>, item.<span class="hljs-title function_">objectName</span>());<br>                jsonObject.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;size&quot;</span>, item.<span class="hljs-title function_">size</span>());<br>                jsonObject.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;lastModified&quot;</span>, item.<span class="hljs-title function_">lastModified</span>());<br>                items.<span class="hljs-title function_">add</span>(jsonObject);<br>            &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br>                e.<span class="hljs-title function_">printStackTrace</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> items;<br>    &#125;<br><br><br>    <span class="hljs-comment">// 删除文件对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> bucketName, <span class="hljs-title class_">String</span> fileName</span>)&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            minioClient.<span class="hljs-title function_">removeObject</span>( <span class="hljs-title class_">RemoveObjectArgs</span>.<span class="hljs-title function_">builder</span>().<span class="hljs-title function_">bucket</span>(bucketName).<span class="hljs-title function_">object</span>(fileName).<span class="hljs-title function_">build</span>());<br>        &#125;<span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;再进一步实现对应的controller等等内容。<br><br>&emsp;&emsp;做一个简单的总结，Spring Boot 集成 MinIO 的好处在于它提供了一个轻量级、兼容 S3 的对象存储解决方案，支持高可用、分布式存储，以及精细的访问控制。特别适合需要处理大规模文件、日志和备份的应用场景，通过与 Spring 的无缝集成，可以显著提升文件管理的效率和安全性。<br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件管理 </tag>
            
            <tag> minio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—分布式缓存(2)—Redis哨兵</title>
      <link href="/2024/09/21/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-2-%E2%80%94Redis%E5%93%A8%E5%85%B5/"/>
      <url>/2024/09/21/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-2-%E2%80%94Redis%E5%93%A8%E5%85%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis哨兵简介"><a href="#Redis哨兵简介" class="headerlink" title="Redis哨兵简介"></a>Redis哨兵简介</h2><p>&emsp;&emsp;前文中提到了主从备份，但是主从集群如果出现故障怎么恢复呢？哨兵就是一个用于自动故障恢复的机制。<br><br>&emsp;&emsp;Redis哨兵（Sentinel）是Redis的高可用性解决方案，它能够监控Redis主从节点的运行状态，并在主节点发生故障时自动进行故障转移，将其中一个从节点提升为新的主节点，以保证Redis服务的连续性和高可用性。<br></p><h2 id="哨兵的功能"><a href="#哨兵的功能" class="headerlink" title="哨兵的功能"></a>哨兵的功能</h2><p>&emsp;&emsp;首先，第一个功能就是<strong>监控</strong>。对于哨兵（sentinel）来说，他会不断检查一个主从集群的状态，看这个集群中的主节点和各个从节点之间是否在按照预期进行工作。<br><br>&emsp;&emsp;第二个功能是<strong>自动故障恢复</strong>，如果说主节点出现了问题，那么，哨兵sentinel就会提升一个从节点为新的主节点，即便是故障实例恢复之后也会以新的主节点为主。<br><br>&emsp;&emsp;最后一个功能是<strong>通知客户端</strong>，当集群发生故障后，Redis的这个sentinel就会作为一个Redis客户端的服务发现来源，把最新的消息推送到Redis的客户端上去。<br></p><h2 id="哨兵的监控原理"><a href="#哨兵的监控原理" class="headerlink" title="哨兵的监控原理"></a>哨兵的监控原理</h2><p>&emsp;&emsp;监控是基于心跳机制来实现的。<br><br>&emsp;&emsp;哨兵Sentinel会每隔1s向集群中的每个实例发送一次ping命令。如果说Sentinel节点发现这个实例未有在规定的时间内响应，那么这个实例就会被认为是主观下线的。<br><br>&emsp;&emsp;如果，超过了一定数量的sentinel都认为这个实例主观下线了，那么这个实例就是客观下线了，这个“数量（quorum）”最好需要超过Sentinel实例数量的一半。<br></p><h2 id="哨兵的故障恢复原理"><a href="#哨兵的故障恢复原理" class="headerlink" title="哨兵的故障恢复原理"></a>哨兵的故障恢复原理</h2><p>&emsp;&emsp;一旦说这个主节点被Sentinel认为是客观下线了，故障了，那么，哨兵就会在从节点中选择一个新的节点做为一个新的主节点。<br><br>&emsp;&emsp;首先，sentinel会判断从节点与主节点断开时间的长短，如果超过了某个值（配置文件配置的），那么就排除掉这个从节点。<br><br>&emsp;&emsp;然后进一步的，判断从节点的slave-priority值（也是在配置文件中配置的），越小那么优先级越高，如果是0，永远不参加选举。<br><br>&emsp;&emsp;如果说slave-priority一样的话，那么就判断从节点的offset值，越大说明数据越新，优先级也越高。<br><br>&emsp;&emsp;最后，再判断从节点的运行id大小，越小那么优先级越高。<br><br>&emsp;&emsp;由此，选出来一个新的主节点，开始切换。<br><br>&emsp;&emsp;sentinel给这个新的主节点发送salveof no one的命令，让其真正成为新的主节点。<br><br>&emsp;&emsp;然后，sentinel会给其他的从节点发送slaveof new_masterIP port的命令，让这些老的从节点成为新主节点的从节点并开始同步数据。<br><br>&emsp;&emsp;最后，sentinel还会将故障节点，也就是老的主节点标记为从节点，当故障节点恢复之后，会自动成为新的主节点的从节点。<br></p><h2 id="哨兵的通知"><a href="#哨兵的通知" class="headerlink" title="哨兵的通知"></a>哨兵的通知</h2><p>&emsp;&emsp;通知也是哨兵的最后一个任务，哨兵会将新的主节点的连接信息发送给其他从节点建立新的连接（这是前文提到的）。<br><br>&emsp;&emsp;在此基础上，还要将新的主节点的连接信息，通知所有的客户端，将读写请求转移到以新master为核心的新集群上去。<br></p><h2 id="带有哨兵的Redis集群实现"><a href="#带有哨兵的Redis集群实现" class="headerlink" title="带有哨兵的Redis集群实现"></a>带有哨兵的Redis集群实现</h2><p>&emsp;&emsp;以一个简约的高可用的集群模式为例进行实现，即一主二从三哨兵。<br><br>&emsp;&emsp;首先确保有redis镜像。并建立三个redis容器。且哨兵的前置条件是主从复制ok。如图为一个一主二从的主从复制的redis：<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98_%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/redis%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%E9%9B%86%E7%BE%A4.png" alt="一主二从" title="一主二从"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">docker pull <span class="hljs-keyword">redi</span><span class="hljs-variable">s:bullseye</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;设置好需要的映射文件，比如redis.conf，还有sentinel.conf等，如下为一个sentinel.conf的实例：<br></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">port 26379<br>sentinel<span class="hljs-built_in"> monitor </span>mymaster 192.168.186.1 6379 2<br>sentinel down-after-milliseconds mymaster 5000<br>sentinel failover-timeout mymaster 60000<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;指定 Sentinel 监听的端口为 26379。这个端口用于接收来自客户端和其他 Redis 实例的请求。<br><br>&emsp;&emsp;sentinel monitor mymaster：定义了一个监控的主节点，命名为 mymaster。<br><br>&emsp;&emsp;192.168.186.1：这是主节点的 IP 地址（可以是服务名，如果在 Docker 中使用）。<br><br>&emsp;&emsp;6379：主节点的端口。<br><br>&emsp;&emsp;2：表示需要在多数 Sentinel 同意的情况下，认为主节点是故障的，即至少需要 2 个 Sentinel 实例认为主节点故障才能触发故障转移。<br><br>&emsp;&emsp;sentinel down-after-milliseconds mymaster 5000设置一个超时阈值，当主节点在 5000 毫秒（5 秒）内未响应时，Sentinel 会将其标记为“下线”（即故障）。这意味着在此时间内，如果没有收到主节点的心跳，Sentinel 会认为主节点可能故障。<br><br>&emsp;&emsp;sentinel failover-timeout mymaster 60000设置故障转移的超时值为 60000 毫秒（60 秒）。当主节点被标记为故障后，Sentinel 会在这个时间内尝试执行故障转移操作。如果在这段时间内故障转移成功，Sentinel 会将新的主节点推向集群。<br><br>&emsp;&emsp;而后，创建一个yml文件，采用docker-compose的方式进行部署，可以参考<a href="https://github.com/gagaducko/learning_demos/tree/main/redis-sentinel">https://github.com/gagaducko/learning_demos/tree/main/redis-sentinel</a><br></p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3.8&#x27;</span><br><br><span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">redis-net</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">driver</span><span class="hljs-punctuation">:</span> <span class="hljs-string">bridge</span><br><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">redis-master</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">redis:bullseye</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;6379:6379&quot;</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;redis-server&quot;, &quot;--protected-mode no&quot;]</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis-net</span><br>  <br>  <span class="hljs-attribute">redis-slave1</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">redis:bullseye</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;6380:6379&quot;</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;redis-server&quot;, &quot;--protected-mode no&quot;, &quot;--slaveof&quot;, &quot;redis-master&quot;, &quot;6379&quot;]</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis-net</span><br><br>  <span class="hljs-attribute">redis-slave2</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">redis:bullseye</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;6381:6379&quot;</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;redis-server&quot;, &quot;--protected-mode no&quot;, &quot;--slaveof&quot;, &quot;redis-master&quot;, &quot;6379&quot;]</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis-net</span><br><br>  <span class="hljs-attribute">sentinel1</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">redis:bullseye</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;26379:26379&quot;</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;redis-sentinel&quot;, &quot;/etc/redis/sentinel.conf&quot;]</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis-sentinel1-conf:/etc/redis</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis-net</span><br><br>  <span class="hljs-attribute">sentinel2</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">redis:bullseye</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;26380:26379&quot;</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;redis-sentinel&quot;, &quot;/etc/redis/sentinel.conf&quot;]</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis-sentinel2-conf:/etc/redis</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis-net</span><br><br>  <span class="hljs-attribute">sentinel3</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">redis:bullseye</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;26381:26379&quot;</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;redis-sentinel&quot;, &quot;/etc/redis/sentinel.conf&quot;]</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis-sentinel3-conf:/etc/redis</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis-net</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;运行该yml：<br></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;显示如下：<br></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[+] Running <span class="hljs-number">7</span>/<span class="hljs-number">7</span><br> ✔ Network redis-sentinel_redis-net         Created                                                                <span class="hljs-number">0.0s</span><br> ✔ Container redis-sentinel-redis-slave1-<span class="hljs-number">1</span>  <span class="hljs-literal">Started</span>                                                                <span class="hljs-number">1.2s</span><br> ✔ Container redis-sentinel-redis-slave2-<span class="hljs-number">1</span>  <span class="hljs-literal">Started</span>                                                                <span class="hljs-number">0.9s</span><br> ✔ Container redis-sentinel-sentinel3-<span class="hljs-number">1</span>     <span class="hljs-literal">Started</span>                                                                <span class="hljs-number">1.4s</span><br> ✔ Container redis-sentinel-sentinel1-<span class="hljs-number">1</span>     <span class="hljs-literal">Started</span>                                                                <span class="hljs-number">1.7s</span><br> ✔ Container redis-sentinel-redis-<span class="hljs-literal">master</span>-<span class="hljs-number">1</span>  <span class="hljs-literal">Started</span>                                                                <span class="hljs-number">1.7s</span><br> ✔ Container redis-sentinel-sentinel2-<span class="hljs-number">1</span>     <span class="hljs-literal">Started</span>                                                                <span class="hljs-number">1.5s</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;docker的显示如下：<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98_redis%E5%93%A8%E5%85%B5/sentinel.png" alt="一主二从三哨兵" title="一主二从三哨兵"><br>&emsp;&emsp;sentinel1的logs如下：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">51</span>:<span class="hljs-number">43</span>.<span class="hljs-number">248</span> # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo<br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">51</span>:<span class="hljs-number">43</span>.<span class="hljs-number">248</span> # Redis version=<span class="hljs-number">6</span>.<span class="hljs-number">2</span>.<span class="hljs-number">6</span>, bits=<span class="hljs-number">64</span>, commit=<span class="hljs-number">00000000</span>, modified=<span class="hljs-number">0</span>, pid=<span class="hljs-number">1</span>, just started<br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">51</span>:<span class="hljs-number">43</span>.<span class="hljs-number">248</span> # Configuration loaded<br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">51</span>:<span class="hljs-number">43</span>.<span class="hljs-number">248</span> * monotonic clock: POSIX clock_gettime<br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">51</span>:<span class="hljs-number">43</span>.<span class="hljs-number">249</span> * Running mode=sentinel, port=<span class="hljs-number">26379</span>.<br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">51</span>:<span class="hljs-number">43</span>.<span class="hljs-number">249</span> # Sentinel ID is b20b1bc8496a99c92c9ce678192d8137142c19e2<br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">51</span>:<span class="hljs-number">43</span>.<span class="hljs-number">249</span> # +monitor master mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span> quorum <span class="hljs-number">2</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">51</span>:<span class="hljs-number">44</span>.<span class="hljs-number">679</span> * +sentinel-address-switch master mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span> ip <span class="hljs-number">172.25.0.2</span> port <span class="hljs-number">26379</span> for <span class="hljs-number">47</span>cd49c23b5fdc0c43cec035689ba42fcae72dc8<br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">51</span>:<span class="hljs-number">45</span>.<span class="hljs-number">291</span> * +sentinel-invalid-addr sentinel a944f333ad8ed5484bbde9682d34b35218c500ef <span class="hljs-number">172.25.0.6</span> <span class="hljs-number">26379</span> @ mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">51</span>:<span class="hljs-number">45</span>.<span class="hljs-number">292</span> * +sentinel sentinel b20b1bc8496a99c92c9ce678192d8137142c19e2 <span class="hljs-number">172.25.0.6</span> <span class="hljs-number">26379</span> @ mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">51</span>:<span class="hljs-number">45</span>.<span class="hljs-number">497</span> * +sentinel-address-switch master mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span> ip <span class="hljs-number">172.25.0.7</span> port <span class="hljs-number">26379</span> for a944f333ad8ed5484bbde9682d34b35218c500ef<br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">51</span>:<span class="hljs-number">53</span>.<span class="hljs-number">272</span> * +slave slave <span class="hljs-number">172.25.0.4:6379</span> <span class="hljs-number">172.25.0.4</span> <span class="hljs-number">6379</span> @ mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;同时，可以看到映射出来的sentinel.conf发生了变化：<br></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">port <span class="hljs-number">26379</span><br>sentinel monitor mymaster <span class="hljs-number">192.168</span><span class="hljs-number">.186</span><span class="hljs-number">.1</span> <span class="hljs-number">6379</span> <span class="hljs-number">2</span><br>sentinel down-<span class="hljs-keyword">after</span>-milliseconds mymaster <span class="hljs-number">5000</span><br>sentinel failover-timeout mymaster <span class="hljs-number">60000</span><br># <span class="hljs-keyword">Generated</span> <span class="hljs-keyword">by</span> CONFIG REWRITE<br><span class="hljs-keyword">user</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">on</span> nopass sanitize-payload ~* &amp;* +@<span class="hljs-keyword">all</span><br>dir &quot;/data&quot;<br>sentinel myid b20b1bc8496a99c92c9ce678192d8137142c19e2<br>sentinel config-epoch mymaster <span class="hljs-number">0</span><br>sentinel leader-epoch mymaster <span class="hljs-number">0</span><br>sentinel <span class="hljs-keyword">current</span>-epoch <span class="hljs-number">0</span><br>sentinel known-<span class="hljs-keyword">replica</span> mymaster <span class="hljs-number">172.25</span><span class="hljs-number">.0</span><span class="hljs-number">.5</span> <span class="hljs-number">6379</span><br>sentinel known-sentinel mymaster <span class="hljs-number">172.25</span><span class="hljs-number">.0</span><span class="hljs-number">.6</span> <span class="hljs-number">26379</span> b20b1bc8496a99c92c9ce678192d8137142c19e2<br>sentinel known-sentinel mymaster <span class="hljs-number">172.25</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span> <span class="hljs-number">26379</span> <span class="hljs-number">47</span>cd49c23b5fdc0c43cec035689ba42fcae72dc8<br>sentinel known-sentinel mymaster <span class="hljs-number">172.25</span><span class="hljs-number">.0</span><span class="hljs-number">.7</span> <span class="hljs-number">26379</span> a944f333ad8ed5484bbde9682d34b35218c500ef<br>sentinel known-<span class="hljs-keyword">replica</span> mymaster <span class="hljs-number">172.25</span><span class="hljs-number">.0</span><span class="hljs-number">.4</span> <span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;sentinel myid b20b1bc8496a99c92c9ce678192d8137142c19e。每个 Sentinel 实例都有一个唯一的 ID，这行指定了当前 Sentinel 的唯一标识符，用于识别和协调。<br><br>&emsp;&emsp;sentinel config-epoch mymaster 0。这表示监控的主节点（mymaster）的配置纪元，初始值为 0，通常在 Sentinel 进行配置更改时更新。<br><br>&emsp;&emsp;sentinel leader-epoch mymaster 0。表示当前领导者的纪元，初始为 0。这个值在发生故障转移时更新。<br><br>&emsp;&emsp;sentinel current-epoch 0。这是当前的纪元计数器，随着时间推移而更新，用于管理故障转移和配置版本。<br><br>&emsp;&emsp;sentinel known-replica mymaster 172.25.0.1 6379。这行记录了已知的从节点（replica），显示了它们的 IP 地址和端口。有三个从节点，分别是 172.25.0.1、172.25.0.2 和 172.25.0.3，这说明 Sentinel 能够识别并跟踪这些从节点。<br><br>&emsp;&emsp;sentinel known-sentinel mymaster 172.25.0.6 26379 b20b1bc8496a99c92c9ce678192d8137142c19e。记录已知的 Sentinel 实例，包括其 IP、端口和 ID。这里显示了 172.25.0.6 的 Sentinel 实例。<br><br>&emsp;&emsp;于此，一个简单的一主二从三哨兵的redis集群就完成了。<br><br>&emsp;&emsp;接下来，做一下简单的验证。<br><br>&emsp;&emsp;首先，先通过redis-cli连接到任一sentinel实例。这里选择一个sentinel的端口，比如26379：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> exec -it &lt;sentinel1_container_id&gt; redis-cli -p <span class="hljs-number">26379</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在 Sentinel CLI 中，运行以下命令查看主节点的状态：<br></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">SENTINEL masters</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这会列出所有被 Sentinel 监控的主节点及其状态：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">26379</span>&gt; SENTINEL masters<br><span class="hljs-attribute">1</span>)  <span class="hljs-number">1</span>) <span class="hljs-string">&quot;name&quot;</span><br>    <span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;mymaster&quot;</span><br>    <span class="hljs-attribute">3</span>) <span class="hljs-string">&quot;ip&quot;</span><br>    <span class="hljs-attribute">4</span>) <span class="hljs-string">&quot;172.25.0.4&quot;</span><br>    <span class="hljs-attribute">5</span>) <span class="hljs-string">&quot;port&quot;</span><br>    <span class="hljs-attribute">6</span>) <span class="hljs-string">&quot;6379&quot;</span><br>    <span class="hljs-attribute">7</span>) <span class="hljs-string">&quot;runid&quot;</span><br>    <span class="hljs-attribute">8</span>) <span class="hljs-string">&quot;888febfd6c393ff1f1a8b34a6b80da70336674e5&quot;</span><br>    <span class="hljs-attribute">9</span>) <span class="hljs-string">&quot;flags&quot;</span><br>   <span class="hljs-attribute">10</span>) <span class="hljs-string">&quot;master&quot;</span><br>   <span class="hljs-attribute">11</span>) <span class="hljs-string">&quot;link-pending-commands&quot;</span><br>   <span class="hljs-attribute">12</span>) <span class="hljs-string">&quot;0&quot;</span><br>   <span class="hljs-attribute">13</span>) <span class="hljs-string">&quot;link-refcount&quot;</span><br>   <span class="hljs-attribute">14</span>) <span class="hljs-string">&quot;1&quot;</span><br>   <span class="hljs-attribute">15</span>) <span class="hljs-string">&quot;last-ping-sent&quot;</span><br>   <span class="hljs-attribute">16</span>) <span class="hljs-string">&quot;0&quot;</span><br>   <span class="hljs-attribute">17</span>) <span class="hljs-string">&quot;last-ok-ping-reply&quot;</span><br>   <span class="hljs-attribute">18</span>) <span class="hljs-string">&quot;740&quot;</span><br>   <span class="hljs-attribute">19</span>) <span class="hljs-string">&quot;last-ping-reply&quot;</span><br>   <span class="hljs-attribute">20</span>) <span class="hljs-string">&quot;740&quot;</span><br>   <span class="hljs-attribute">21</span>) <span class="hljs-string">&quot;down-after-milliseconds&quot;</span><br>   <span class="hljs-attribute">22</span>) <span class="hljs-string">&quot;5000&quot;</span><br>   <span class="hljs-attribute">23</span>) <span class="hljs-string">&quot;info-refresh&quot;</span><br>   <span class="hljs-attribute">24</span>) <span class="hljs-string">&quot;9744&quot;</span><br>   <span class="hljs-attribute">25</span>) <span class="hljs-string">&quot;role-reported&quot;</span><br>   <span class="hljs-attribute">26</span>) <span class="hljs-string">&quot;master&quot;</span><br>   <span class="hljs-attribute">27</span>) <span class="hljs-string">&quot;role-reported-time&quot;</span><br>   <span class="hljs-attribute">28</span>) <span class="hljs-string">&quot;254766&quot;</span><br>   <span class="hljs-attribute">29</span>) <span class="hljs-string">&quot;config-epoch&quot;</span><br>   <span class="hljs-attribute">30</span>) <span class="hljs-string">&quot;1&quot;</span><br>   <span class="hljs-attribute">31</span>) <span class="hljs-string">&quot;num-slaves&quot;</span><br>   <span class="hljs-attribute">32</span>) <span class="hljs-string">&quot;4&quot;</span><br>   <span class="hljs-attribute">33</span>) <span class="hljs-string">&quot;num-other-sentinels&quot;</span><br>   <span class="hljs-attribute">34</span>) <span class="hljs-string">&quot;3&quot;</span><br>   <span class="hljs-attribute">35</span>) <span class="hljs-string">&quot;quorum&quot;</span><br>   <span class="hljs-attribute">36</span>) <span class="hljs-string">&quot;2&quot;</span><br>   <span class="hljs-attribute">37</span>) <span class="hljs-string">&quot;failover-timeout&quot;</span><br>   <span class="hljs-attribute">38</span>) <span class="hljs-string">&quot;60000&quot;</span><br>   <span class="hljs-attribute">39</span>) <span class="hljs-string">&quot;parallel-syncs&quot;</span><br>   <span class="hljs-attribute">40</span>) <span class="hljs-string">&quot;1&quot;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;同样，可以查看从节点的状态：<br></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">SENTINEL slaves mymaster</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;确保从节点是正确跟随主节点的：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">26379</span>&gt; SENTINEL slaves mymaster<br><span class="hljs-attribute">1</span>)  <span class="hljs-number">1</span>) <span class="hljs-string">&quot;name&quot;</span><br>    <span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;172.25.0.3:6379&quot;</span><br>    <span class="hljs-attribute">3</span>) <span class="hljs-string">&quot;ip&quot;</span><br>    <span class="hljs-attribute">4</span>) <span class="hljs-string">&quot;172.25.0.3&quot;</span><br>    <span class="hljs-attribute">5</span>) <span class="hljs-string">&quot;port&quot;</span><br>    <span class="hljs-attribute">6</span>) <span class="hljs-string">&quot;6379&quot;</span><br>    <span class="hljs-attribute">7</span>) <span class="hljs-string">&quot;runid&quot;</span><br>    <span class="hljs-attribute">8</span>) <span class="hljs-string">&quot;896cae5dbdc2e4996105636a182710d4112a1d26&quot;</span><br>    <span class="hljs-attribute">9</span>) <span class="hljs-string">&quot;flags&quot;</span><br>   <span class="hljs-attribute">10</span>) <span class="hljs-string">&quot;slave&quot;</span><br>   <span class="hljs-attribute">11</span>) <span class="hljs-string">&quot;link-pending-commands&quot;</span><br>   <span class="hljs-attribute">12</span>) <span class="hljs-string">&quot;0&quot;</span><br>   <span class="hljs-attribute">13</span>) <span class="hljs-string">&quot;link-refcount&quot;</span><br>   <span class="hljs-attribute">14</span>) <span class="hljs-string">&quot;1&quot;</span><br>   <span class="hljs-attribute">15</span>) <span class="hljs-string">&quot;last-ping-sent&quot;</span><br>   <span class="hljs-attribute">16</span>) <span class="hljs-string">&quot;0&quot;</span><br>   <span class="hljs-attribute">17</span>) <span class="hljs-string">&quot;last-ok-ping-reply&quot;</span><br>   <span class="hljs-attribute">18</span>) <span class="hljs-string">&quot;801&quot;</span><br>   <span class="hljs-attribute">19</span>) <span class="hljs-string">&quot;last-ping-reply&quot;</span><br>   <span class="hljs-attribute">20</span>) <span class="hljs-string">&quot;801&quot;</span><br>   <span class="hljs-attribute">21</span>) <span class="hljs-string">&quot;down-after-milliseconds&quot;</span><br>   <span class="hljs-attribute">22</span>) <span class="hljs-string">&quot;5000&quot;</span><br>   <span class="hljs-attribute">23</span>) <span class="hljs-string">&quot;info-refresh&quot;</span><br>   <span class="hljs-attribute">24</span>) <span class="hljs-string">&quot;2402&quot;</span><br>   <span class="hljs-attribute">25</span>) <span class="hljs-string">&quot;role-reported&quot;</span><br>   <span class="hljs-attribute">26</span>) <span class="hljs-string">&quot;slave&quot;</span><br>   <span class="hljs-attribute">27</span>) <span class="hljs-string">&quot;role-reported-time&quot;</span><br>   <span class="hljs-attribute">28</span>) <span class="hljs-string">&quot;323732&quot;</span><br>   <span class="hljs-attribute">29</span>) <span class="hljs-string">&quot;master-link-down-time&quot;</span><br>   <span class="hljs-attribute">30</span>) <span class="hljs-string">&quot;0&quot;</span><br>   <span class="hljs-attribute">31</span>) <span class="hljs-string">&quot;master-link-status&quot;</span><br>   <span class="hljs-attribute">32</span>) <span class="hljs-string">&quot;ok&quot;</span><br>   <span class="hljs-attribute">33</span>) <span class="hljs-string">&quot;master-host&quot;</span><br>   <span class="hljs-attribute">34</span>) <span class="hljs-string">&quot;172.25.0.4&quot;</span><br>   <span class="hljs-attribute">35</span>) <span class="hljs-string">&quot;master-port&quot;</span><br>   <span class="hljs-attribute">36</span>) <span class="hljs-string">&quot;6379&quot;</span><br>   <span class="hljs-attribute">37</span>) <span class="hljs-string">&quot;slave-priority&quot;</span><br>   <span class="hljs-attribute">38</span>) <span class="hljs-string">&quot;100&quot;</span><br>   <span class="hljs-attribute">39</span>) <span class="hljs-string">&quot;slave-repl-offset&quot;</span><br>   <span class="hljs-attribute">40</span>) <span class="hljs-string">&quot;83895&quot;</span><br>   <span class="hljs-attribute">41</span>) <span class="hljs-string">&quot;replica-announced&quot;</span><br>   <span class="hljs-attribute">42</span>) <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-attribute">2</span>)  <span class="hljs-number">1</span>) <span class="hljs-string">&quot;name&quot;</span><br>    <span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;172.25.0.5:6379&quot;</span><br>    <span class="hljs-attribute">3</span>) <span class="hljs-string">&quot;ip&quot;</span><br>    <span class="hljs-attribute">4</span>) <span class="hljs-string">&quot;172.25.0.5&quot;</span><br>    <span class="hljs-attribute">5</span>) <span class="hljs-string">&quot;port&quot;</span><br>    <span class="hljs-attribute">6</span>) <span class="hljs-string">&quot;6379&quot;</span><br>    <span class="hljs-attribute">7</span>) <span class="hljs-string">&quot;runid&quot;</span><br>    <span class="hljs-attribute">8</span>) <span class="hljs-string">&quot;a2d594cc616ed8f9530e7c1e2f0858e79187ba0f&quot;</span><br>    <span class="hljs-attribute">9</span>) <span class="hljs-string">&quot;flags&quot;</span><br>   <span class="hljs-attribute">10</span>) <span class="hljs-string">&quot;slave&quot;</span><br>   <span class="hljs-attribute">11</span>) <span class="hljs-string">&quot;link-pending-commands&quot;</span><br>   <span class="hljs-attribute">12</span>) <span class="hljs-string">&quot;0&quot;</span><br>   <span class="hljs-attribute">13</span>) <span class="hljs-string">&quot;link-refcount&quot;</span><br>   <span class="hljs-attribute">14</span>) <span class="hljs-string">&quot;1&quot;</span><br>   <span class="hljs-attribute">15</span>) <span class="hljs-string">&quot;last-ping-sent&quot;</span><br>   <span class="hljs-attribute">16</span>) <span class="hljs-string">&quot;0&quot;</span><br>   <span class="hljs-attribute">17</span>) <span class="hljs-string">&quot;last-ok-ping-reply&quot;</span><br>   <span class="hljs-attribute">18</span>) <span class="hljs-string">&quot;315&quot;</span><br>   <span class="hljs-attribute">19</span>) <span class="hljs-string">&quot;last-ping-reply&quot;</span><br>   <span class="hljs-attribute">20</span>) <span class="hljs-string">&quot;315&quot;</span><br>   <span class="hljs-attribute">21</span>) <span class="hljs-string">&quot;down-after-milliseconds&quot;</span><br>   <span class="hljs-attribute">22</span>) <span class="hljs-string">&quot;5000&quot;</span><br>   <span class="hljs-attribute">23</span>) <span class="hljs-string">&quot;info-refresh&quot;</span><br>   <span class="hljs-attribute">24</span>) <span class="hljs-string">&quot;6678&quot;</span><br>   <span class="hljs-attribute">25</span>) <span class="hljs-string">&quot;role-reported&quot;</span><br>   <span class="hljs-attribute">26</span>) <span class="hljs-string">&quot;slave&quot;</span><br>   <span class="hljs-attribute">27</span>) <span class="hljs-string">&quot;role-reported-time&quot;</span><br>   <span class="hljs-attribute">28</span>) <span class="hljs-string">&quot;327733&quot;</span><br>   <span class="hljs-attribute">29</span>) <span class="hljs-string">&quot;master-link-down-time&quot;</span><br>   <span class="hljs-attribute">30</span>) <span class="hljs-string">&quot;0&quot;</span><br>   <span class="hljs-attribute">31</span>) <span class="hljs-string">&quot;master-link-status&quot;</span><br>   <span class="hljs-attribute">32</span>) <span class="hljs-string">&quot;ok&quot;</span><br>   <span class="hljs-attribute">33</span>) <span class="hljs-string">&quot;master-host&quot;</span><br>   <span class="hljs-attribute">34</span>) <span class="hljs-string">&quot;172.25.0.4&quot;</span><br>   <span class="hljs-attribute">35</span>) <span class="hljs-string">&quot;master-port&quot;</span><br>   <span class="hljs-attribute">36</span>) <span class="hljs-string">&quot;6379&quot;</span><br>   <span class="hljs-attribute">37</span>) <span class="hljs-string">&quot;slave-priority&quot;</span><br>   <span class="hljs-attribute">38</span>) <span class="hljs-string">&quot;100&quot;</span><br>   <span class="hljs-attribute">39</span>) <span class="hljs-string">&quot;slave-repl-offset&quot;</span><br>   <span class="hljs-attribute">40</span>) <span class="hljs-string">&quot;82815&quot;</span><br>   <span class="hljs-attribute">41</span>) <span class="hljs-string">&quot;replica-announced&quot;</span><br>   <span class="hljs-attribute">42</span>) <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-attribute">3</span>)  <span class="hljs-number">1</span>) <span class="hljs-string">&quot;name&quot;</span><br>    <span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;192.168.186.1:6379&quot;</span><br>    <span class="hljs-attribute">3</span>) <span class="hljs-string">&quot;ip&quot;</span><br>    <span class="hljs-attribute">4</span>) <span class="hljs-string">&quot;192.168.186.1&quot;</span><br>    <span class="hljs-attribute">5</span>) <span class="hljs-string">&quot;port&quot;</span><br>    <span class="hljs-attribute">6</span>) <span class="hljs-string">&quot;6379&quot;</span><br>    <span class="hljs-attribute">7</span>) <span class="hljs-string">&quot;runid&quot;</span><br>    <span class="hljs-attribute">8</span>) <span class="hljs-string">&quot;896cae5dbdc2e4996105636a182710d4112a1d26&quot;</span><br>    <span class="hljs-attribute">9</span>) <span class="hljs-string">&quot;flags&quot;</span><br>   <span class="hljs-attribute">10</span>) <span class="hljs-string">&quot;slave&quot;</span><br>   <span class="hljs-attribute">11</span>) <span class="hljs-string">&quot;link-pending-commands&quot;</span><br>   <span class="hljs-attribute">12</span>) <span class="hljs-string">&quot;0&quot;</span><br>   <span class="hljs-attribute">13</span>) <span class="hljs-string">&quot;link-refcount&quot;</span><br>   <span class="hljs-attribute">14</span>) <span class="hljs-string">&quot;1&quot;</span><br>   <span class="hljs-attribute">15</span>) <span class="hljs-string">&quot;last-ping-sent&quot;</span><br>   <span class="hljs-attribute">16</span>) <span class="hljs-string">&quot;0&quot;</span><br>   <span class="hljs-attribute">17</span>) <span class="hljs-string">&quot;last-ok-ping-reply&quot;</span><br>   <span class="hljs-attribute">18</span>) <span class="hljs-string">&quot;709&quot;</span><br>   <span class="hljs-attribute">19</span>) <span class="hljs-string">&quot;last-ping-reply&quot;</span><br>   <span class="hljs-attribute">20</span>) <span class="hljs-string">&quot;709&quot;</span><br>   <span class="hljs-attribute">21</span>) <span class="hljs-string">&quot;down-after-milliseconds&quot;</span><br>   <span class="hljs-attribute">22</span>) <span class="hljs-string">&quot;5000&quot;</span><br>   <span class="hljs-attribute">23</span>) <span class="hljs-string">&quot;info-refresh&quot;</span><br>   <span class="hljs-attribute">24</span>) <span class="hljs-string">&quot;6515&quot;</span><br>   <span class="hljs-attribute">25</span>) <span class="hljs-string">&quot;role-reported&quot;</span><br>   <span class="hljs-attribute">26</span>) <span class="hljs-string">&quot;slave&quot;</span><br>   <span class="hljs-attribute">27</span>) <span class="hljs-string">&quot;role-reported-time&quot;</span><br>   <span class="hljs-attribute">28</span>) <span class="hljs-string">&quot;327732&quot;</span><br>   <span class="hljs-attribute">29</span>) <span class="hljs-string">&quot;master-link-down-time&quot;</span><br>   <span class="hljs-attribute">30</span>) <span class="hljs-string">&quot;0&quot;</span><br>   <span class="hljs-attribute">31</span>) <span class="hljs-string">&quot;master-link-status&quot;</span><br>   <span class="hljs-attribute">32</span>) <span class="hljs-string">&quot;ok&quot;</span><br>   <span class="hljs-attribute">33</span>) <span class="hljs-string">&quot;master-host&quot;</span><br>   <span class="hljs-attribute">34</span>) <span class="hljs-string">&quot;172.25.0.4&quot;</span><br>   <span class="hljs-attribute">35</span>) <span class="hljs-string">&quot;master-port&quot;</span><br>   <span class="hljs-attribute">36</span>) <span class="hljs-string">&quot;6379&quot;</span><br>   <span class="hljs-attribute">37</span>) <span class="hljs-string">&quot;slave-priority&quot;</span><br>   <span class="hljs-attribute">38</span>) <span class="hljs-string">&quot;100&quot;</span><br>   <span class="hljs-attribute">39</span>) <span class="hljs-string">&quot;slave-repl-offset&quot;</span><br>   <span class="hljs-attribute">40</span>) <span class="hljs-string">&quot;83085&quot;</span><br>   <span class="hljs-attribute">41</span>) <span class="hljs-string">&quot;replica-announced&quot;</span><br>   <span class="hljs-attribute">42</span>) <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-attribute">4</span>)  <span class="hljs-number">1</span>) <span class="hljs-string">&quot;name&quot;</span><br>    <span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;172.25.0.1:6379&quot;</span><br>    <span class="hljs-attribute">3</span>) <span class="hljs-string">&quot;ip&quot;</span><br>    <span class="hljs-attribute">4</span>) <span class="hljs-string">&quot;172.25.0.1&quot;</span><br>    <span class="hljs-attribute">5</span>) <span class="hljs-string">&quot;port&quot;</span><br>    <span class="hljs-attribute">6</span>) <span class="hljs-string">&quot;6379&quot;</span><br>    <span class="hljs-attribute">7</span>) <span class="hljs-string">&quot;runid&quot;</span><br>    <span class="hljs-attribute">8</span>) <span class="hljs-string">&quot;896cae5dbdc2e4996105636a182710d4112a1d26&quot;</span><br>    <span class="hljs-attribute">9</span>) <span class="hljs-string">&quot;flags&quot;</span><br>   <span class="hljs-attribute">10</span>) <span class="hljs-string">&quot;slave&quot;</span><br>   <span class="hljs-attribute">11</span>) <span class="hljs-string">&quot;link-pending-commands&quot;</span><br>   <span class="hljs-attribute">12</span>) <span class="hljs-string">&quot;0&quot;</span><br>   <span class="hljs-attribute">13</span>) <span class="hljs-string">&quot;link-refcount&quot;</span><br>   <span class="hljs-attribute">14</span>) <span class="hljs-string">&quot;1&quot;</span><br>   <span class="hljs-attribute">15</span>) <span class="hljs-string">&quot;last-ping-sent&quot;</span><br>   <span class="hljs-attribute">16</span>) <span class="hljs-string">&quot;0&quot;</span><br>   <span class="hljs-attribute">17</span>) <span class="hljs-string">&quot;last-ok-ping-reply&quot;</span><br>   <span class="hljs-attribute">18</span>) <span class="hljs-string">&quot;315&quot;</span><br>   <span class="hljs-attribute">19</span>) <span class="hljs-string">&quot;last-ping-reply&quot;</span><br>   <span class="hljs-attribute">20</span>) <span class="hljs-string">&quot;315&quot;</span><br>   <span class="hljs-attribute">21</span>) <span class="hljs-string">&quot;down-after-milliseconds&quot;</span><br>   <span class="hljs-attribute">22</span>) <span class="hljs-string">&quot;5000&quot;</span><br>   <span class="hljs-attribute">23</span>) <span class="hljs-string">&quot;info-refresh&quot;</span><br>   <span class="hljs-attribute">24</span>) <span class="hljs-string">&quot;6678&quot;</span><br>   <span class="hljs-attribute">25</span>) <span class="hljs-string">&quot;role-reported&quot;</span><br>   <span class="hljs-attribute">26</span>) <span class="hljs-string">&quot;slave&quot;</span><br>   <span class="hljs-attribute">27</span>) <span class="hljs-string">&quot;role-reported-time&quot;</span><br>   <span class="hljs-attribute">28</span>) <span class="hljs-string">&quot;327733&quot;</span><br>   <span class="hljs-attribute">29</span>) <span class="hljs-string">&quot;master-link-down-time&quot;</span><br>   <span class="hljs-attribute">30</span>) <span class="hljs-string">&quot;0&quot;</span><br>   <span class="hljs-attribute">31</span>) <span class="hljs-string">&quot;master-link-status&quot;</span><br>   <span class="hljs-attribute">32</span>) <span class="hljs-string">&quot;ok&quot;</span><br>   <span class="hljs-attribute">33</span>) <span class="hljs-string">&quot;master-host&quot;</span><br>   <span class="hljs-attribute">34</span>) <span class="hljs-string">&quot;172.25.0.4&quot;</span><br>   <span class="hljs-attribute">35</span>) <span class="hljs-string">&quot;master-port&quot;</span><br>   <span class="hljs-attribute">36</span>) <span class="hljs-string">&quot;6379&quot;</span><br>   <span class="hljs-attribute">37</span>) <span class="hljs-string">&quot;slave-priority&quot;</span><br>   <span class="hljs-attribute">38</span>) <span class="hljs-string">&quot;100&quot;</span><br>   <span class="hljs-attribute">39</span>) <span class="hljs-string">&quot;slave-repl-offset&quot;</span><br>   <span class="hljs-attribute">40</span>) <span class="hljs-string">&quot;82815&quot;</span><br>   <span class="hljs-attribute">41</span>) <span class="hljs-string">&quot;replica-announced&quot;</span><br>   <span class="hljs-attribute">42</span>) <span class="hljs-string">&quot;1&quot;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;为了测试 Sentinel 的故障转移能力，可以手动停止主节点，观察 Sentinel 如何处理：<br></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">docker <span class="hljs-keyword">stop</span> <span class="hljs-symbol">&lt;redis-master_container_id&gt;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;然后，等待几秒钟，使用以下命令再次连接 Sentinel，检查是否进行了故障转移：<br></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">SENTINEL masters</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">26379</span>&gt; SENTINEL masters<br><span class="hljs-attribute">1</span>)  <span class="hljs-number">1</span>) <span class="hljs-string">&quot;name&quot;</span><br>    <span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;mymaster&quot;</span><br>    <span class="hljs-attribute">3</span>) <span class="hljs-string">&quot;ip&quot;</span><br>    <span class="hljs-attribute">4</span>) <span class="hljs-string">&quot;172.25.0.4&quot;</span><br>    <span class="hljs-attribute">5</span>) <span class="hljs-string">&quot;port&quot;</span><br>    <span class="hljs-attribute">6</span>) <span class="hljs-string">&quot;6379&quot;</span><br>    <span class="hljs-attribute">7</span>) <span class="hljs-string">&quot;runid&quot;</span><br>    <span class="hljs-attribute">8</span>) <span class="hljs-string">&quot;888febfd6c393ff1f1a8b34a6b80da70336674e5&quot;</span><br>    <span class="hljs-attribute">9</span>) <span class="hljs-string">&quot;flags&quot;</span><br>   <span class="hljs-attribute">10</span>) <span class="hljs-string">&quot;master&quot;</span><br>   <span class="hljs-attribute">11</span>) <span class="hljs-string">&quot;link-pending-commands&quot;</span><br>   <span class="hljs-attribute">12</span>) <span class="hljs-string">&quot;0&quot;</span><br>   <span class="hljs-attribute">13</span>) <span class="hljs-string">&quot;link-refcount&quot;</span><br>   <span class="hljs-attribute">14</span>) <span class="hljs-string">&quot;1&quot;</span><br>   <span class="hljs-attribute">15</span>) <span class="hljs-string">&quot;last-ping-sent&quot;</span><br>   <span class="hljs-attribute">16</span>) <span class="hljs-string">&quot;0&quot;</span><br>   <span class="hljs-attribute">17</span>) <span class="hljs-string">&quot;last-ok-ping-reply&quot;</span><br>   <span class="hljs-attribute">18</span>) <span class="hljs-string">&quot;271&quot;</span><br>   <span class="hljs-attribute">19</span>) <span class="hljs-string">&quot;last-ping-reply&quot;</span><br>   <span class="hljs-attribute">20</span>) <span class="hljs-string">&quot;271&quot;</span><br>   <span class="hljs-attribute">21</span>) <span class="hljs-string">&quot;down-after-milliseconds&quot;</span><br>   <span class="hljs-attribute">22</span>) <span class="hljs-string">&quot;5000&quot;</span><br>   <span class="hljs-attribute">23</span>) <span class="hljs-string">&quot;info-refresh&quot;</span><br>   <span class="hljs-attribute">24</span>) <span class="hljs-string">&quot;181&quot;</span><br>   <span class="hljs-attribute">25</span>) <span class="hljs-string">&quot;role-reported&quot;</span><br>   <span class="hljs-attribute">26</span>) <span class="hljs-string">&quot;master&quot;</span><br>   <span class="hljs-attribute">27</span>) <span class="hljs-string">&quot;role-reported-time&quot;</span><br>   <span class="hljs-attribute">28</span>) <span class="hljs-string">&quot;435985&quot;</span><br>   <span class="hljs-attribute">29</span>) <span class="hljs-string">&quot;config-epoch&quot;</span><br>   <span class="hljs-attribute">30</span>) <span class="hljs-string">&quot;1&quot;</span><br>   <span class="hljs-attribute">31</span>) <span class="hljs-string">&quot;num-slaves&quot;</span><br>   <span class="hljs-attribute">32</span>) <span class="hljs-string">&quot;4&quot;</span><br>   <span class="hljs-attribute">33</span>) <span class="hljs-string">&quot;num-other-sentinels&quot;</span><br>   <span class="hljs-attribute">34</span>) <span class="hljs-string">&quot;3&quot;</span><br>   <span class="hljs-attribute">35</span>) <span class="hljs-string">&quot;quorum&quot;</span><br>   <span class="hljs-attribute">36</span>) <span class="hljs-string">&quot;2&quot;</span><br>   <span class="hljs-attribute">37</span>) <span class="hljs-string">&quot;failover-timeout&quot;</span><br>   <span class="hljs-attribute">38</span>) <span class="hljs-string">&quot;60000&quot;</span><br>   <span class="hljs-attribute">39</span>) <span class="hljs-string">&quot;parallel-syncs&quot;</span><br>   <span class="hljs-attribute">40</span>) <span class="hljs-string">&quot;1&quot;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;还可以查看sentinel容器的日志：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">docker logs <span class="hljs-tag">&lt;<span class="hljs-name">sentinel1_container_id</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;看具体的一个内部状态和故障处理过程。<br><br>&emsp;&emsp;比如，sentinel1的日志：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">28</span>.<span class="hljs-number">762</span> # +sdown master mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">28</span>.<span class="hljs-number">825</span> # +odown master mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span> #quorum <span class="hljs-number">2</span>/<span class="hljs-number">2</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">28</span>.<span class="hljs-number">825</span> # +new-epoch <span class="hljs-number">1</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">28</span>.<span class="hljs-number">825</span> # +try-failover master mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">28</span>.<span class="hljs-number">853</span> # +vote-for-leader b20b1bc8496a99c92c9ce678192d8137142c19e2 <span class="hljs-number">1</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">28</span>.<span class="hljs-number">853</span> # b20b1bc8496a99c92c9ce678192d8137142c19e2 voted for b20b1bc8496a99c92c9ce678192d8137142c19e2 <span class="hljs-number">1</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">28</span>.<span class="hljs-number">885</span> # a944f333ad8ed5484bbde9682d34b35218c500ef voted for b20b1bc8496a99c92c9ce678192d8137142c19e2 <span class="hljs-number">1</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">28</span>.<span class="hljs-number">885</span> # <span class="hljs-number">47</span>cd49c23b5fdc0c43cec035689ba42fcae72dc8 voted for b20b1bc8496a99c92c9ce678192d8137142c19e2 <span class="hljs-number">1</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">28</span>.<span class="hljs-number">912</span> # +elected-leader master mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">28</span>.<span class="hljs-number">912</span> # +failover-state-select-slave master mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">28</span>.<span class="hljs-number">965</span> # +selected-slave slave <span class="hljs-number">172.25.0.4:6379</span> <span class="hljs-number">172.25.0.4</span> <span class="hljs-number">6379</span> @ mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">28</span>.<span class="hljs-number">965</span> * +failover-state-send-slaveof-noone slave <span class="hljs-number">172.25.0.4:6379</span> <span class="hljs-number">172.25.0.4</span> <span class="hljs-number">6379</span> @ mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">29</span>.<span class="hljs-number">048</span> * +failover-state-wait-promotion slave <span class="hljs-number">172.25.0.4:6379</span> <span class="hljs-number">172.25.0.4</span> <span class="hljs-number">6379</span> @ mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">29</span>.<span class="hljs-number">297</span> # +promoted-slave slave <span class="hljs-number">172.25.0.4:6379</span> <span class="hljs-number">172.25.0.4</span> <span class="hljs-number">6379</span> @ mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">29</span>.<span class="hljs-number">297</span> # +failover-state-reconf-slaves master mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">29</span>.<span class="hljs-number">346</span> * +slave-reconf-sent slave <span class="hljs-number">172.25.0.5:6379</span> <span class="hljs-number">172.25.0.5</span> <span class="hljs-number">6379</span> @ mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">29</span>.<span class="hljs-number">402</span> * +slave-reconf-inprog slave <span class="hljs-number">172.25.0.5:6379</span> <span class="hljs-number">172.25.0.5</span> <span class="hljs-number">6379</span> @ mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">29</span>.<span class="hljs-number">402</span> * +slave-reconf-done slave <span class="hljs-number">172.25.0.5:6379</span> <span class="hljs-number">172.25.0.5</span> <span class="hljs-number">6379</span> @ mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">29</span>.<span class="hljs-number">458</span> * +slave-reconf-sent slave <span class="hljs-number">172.25.0.1:6379</span> <span class="hljs-number">172.25.0.1</span> <span class="hljs-number">6379</span> @ mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">29</span>.<span class="hljs-number">713</span> * +slave-reconf-inprog slave <span class="hljs-number">172.25.0.1:6379</span> <span class="hljs-number">172.25.0.1</span> <span class="hljs-number">6379</span> @ mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">29</span>.<span class="hljs-number">713</span> * +slave-reconf-done slave <span class="hljs-number">172.25.0.1:6379</span> <span class="hljs-number">172.25.0.1</span> <span class="hljs-number">6379</span> @ mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">29</span>.<span class="hljs-number">813</span> # +failover-end master mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">29</span>.<span class="hljs-number">813</span> # +switch-master mymaster <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span> <span class="hljs-number">172.25.0.4</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">29</span>.<span class="hljs-number">813</span> * +slave slave <span class="hljs-number">172.25.0.5:6379</span> <span class="hljs-number">172.25.0.5</span> <span class="hljs-number">6379</span> @ mymaster <span class="hljs-number">172.25.0.4</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">29</span>.<span class="hljs-number">813</span> * +slave slave <span class="hljs-number">172.25.0.1:6379</span> <span class="hljs-number">172.25.0.1</span> <span class="hljs-number">6379</span> @ mymaster <span class="hljs-number">172.25.0.4</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">29</span>.<span class="hljs-number">814</span> * +slave slave <span class="hljs-number">192.168.186.1:6379</span> <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span> @ mymaster <span class="hljs-number">172.25.0.4</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">08</span>:<span class="hljs-number">53</span>:<span class="hljs-number">33</span>.<span class="hljs-number">814</span> * +slave slave <span class="hljs-number">172.25.0.3:6379</span> <span class="hljs-number">172.25.0.3</span> <span class="hljs-number">6379</span> @ mymaster <span class="hljs-number">172.25.0.4</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">09</span>:<span class="hljs-number">00</span>:<span class="hljs-number">33</span>.<span class="hljs-number">338</span> # +sdown slave <span class="hljs-number">172.25.0.3:6379</span> <span class="hljs-number">172.25.0.3</span> <span class="hljs-number">6379</span> @ mymaster <span class="hljs-number">172.25.0.4</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">09</span>:<span class="hljs-number">00</span>:<span class="hljs-number">33</span>.<span class="hljs-number">338</span> # +sdown slave <span class="hljs-number">192.168.186.1:6379</span> <span class="hljs-number">192.168.186.1</span> <span class="hljs-number">6379</span> @ mymaster <span class="hljs-number">172.25.0.4</span> <span class="hljs-number">6379</span><br><span class="hljs-attribute">1</span>:X <span class="hljs-number">02</span> Oct <span class="hljs-number">2024</span> <span class="hljs-number">09</span>:<span class="hljs-number">00</span>:<span class="hljs-number">33</span>.<span class="hljs-number">338</span> # +sdown slave <span class="hljs-number">172.25.0.1:6379</span> <span class="hljs-number">172.25.0.1</span> <span class="hljs-number">6379</span> @ mymaster <span class="hljs-number">172.25.0.4</span> <span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;+sdown master mymaster 192.168.186.1 6379 表示 Sentinel 认为主节点不可用。<br><br>&emsp;&emsp;+odown master mymaster 192.168.186.1 6379 #quorum 2&#x2F;2 表示故障达到了被确认的sentinel的数量被确认，需要进行故障转移。<br><br>&emsp;&emsp;+new-epoch 1 和 +try-failover master mymaster 表示开始进行故障转移。<br><br>&emsp;&emsp;+elected-leader master mymaster 表示选举出一个领导者进行故障转移。<br><br>&emsp;&emsp;+promoted-slave slave 172.25.0.4:6379 表示选定的从节点 172.25.0.4 被提升为新的主节点。<br><br>&emsp;&emsp;日志中有多个 +slave-reconf 记录，显示从节点被重新配置为跟随新主节点。<br><br>&emsp;&emsp;+failover-end master mymaster 192.168.186.1 6379 和 +switch-master mymaster 192.168.186.1 6379 172.25.0.4 6379 表示故障转移完成，新的主节点已被选定，并且从节点已被重新配置为跟随新的主节点。<br><br>&emsp;&emsp;最后几行显示从节点 172.25.0.3 和其他从节点（如 192.168.186.1）被标记为 sdown，表示它们在新的主节点下仍然不可用。<br><br>&emsp;&emsp;同时，也可以看见，在原先的slave1（172.25.0.4）中，以及变成了一个master节点，向slave1中，set key1 111后，可以set成功，并且在slave2中可以通过get key1得到111。<br><br>&emsp;&emsp;在这种情况下，即便重启了原先的redis-master，发现原先的master节点也变成了slave节点。<br><br>&emsp;&emsp;还可进一步的进行测试，把slave1关掉，发现，现在在slave2变成了一个可以set key的主节点而master变成了可以被slave2所同步的从节点，重新打开slave1后，slave1作为一个slave2的新的从节点加入到了这个集群中。<br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 分布式缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式缓存 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—分布式缓存(1)—Redis的主从与持久化</title>
      <link href="/2024/09/20/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-1-%E2%80%94Redis%E7%9A%84%E4%B8%BB%E4%BB%8E%E4%B8%8E%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2024/09/20/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-1-%E2%80%94Redis%E7%9A%84%E4%B8%BB%E4%BB%8E%E4%B8%8E%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;对于单机的redis来说，在实际业务的使用中，存在着一定的问题。主要包括四类：<br><br>&emsp;&emsp;首先是<strong>数据丢失问题</strong>，服务重启，Redis作为一种在内存中进行储存的工具，会丢失数据。<br><br>&emsp;&emsp;第二是<strong>并发能力问题</strong>，对于Redis来说，单节点的Redis并发能力虽然不错，但是并不能满足较高并发场景的情况。<br><br>&emsp;&emsp;第三是<strong>故障恢复问题</strong>，假如说redis宕机了，服务不可用了，怎么恢复呢？这就需要一种自动的故障恢复手段。<br><br>&emsp;&emsp;最后是<strong>储存能力问题</strong>，前面有提到，Redis是基于内存的一种缓存工具，单节点所能储存的数据量显然是无法满足海量数据需求的。<br><br>&emsp;&emsp;因此，针对于Redis，对于不同的业务需求，不能局限于一种单机的使用，而是需要考虑许多内容，包括持久化、主动、哨兵、分片集群、多级缓存等等。<br></p><h2 id="Redis的持久化"><a href="#Redis的持久化" class="headerlink" title="Redis的持久化"></a>Redis的持久化</h2><p>&emsp;&emsp;对于Redis的持久化来说，有两种主要的持久化方案，分别是<strong>RDB持久化</strong>和<strong>AOF持久化</strong>。<br></p><h3 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h3><p>&emsp;&emsp;RDB持久化，全称Redis Database Backup file，也叫Redis数据备份文件或者Redis数据快照，是一种将Redis在内存中的数据以快照的形式写入磁盘中的持久化方案。<br><br>&emsp;&emsp;另外，RDB也是<strong>redis备份的默认方式</strong>。<br><br>&emsp;&emsp;简单来说，当Redis实例故障重启之后，从磁盘读取快照文件，恢复数据。<br><br>&emsp;&emsp;这个快照文件就被称为<strong>RDB文件</strong>，默认是保存在Redis的当前运行目录的。<br><br>&emsp;&emsp;这种方式的优点是，大规模的数据恢复、并且对于数据恢复的完整性要求不高的情况下，会更加高效；并且由于以二进制方式储存，占用的内存会更小；此外，Redis使用bgsave命令进行持久化，基本不会影响主进程，能保证redis的高性能。<br><br>&emsp;&emsp;而缺点则在于，Fork的时候，内存中的数据会被克隆一份，大致2倍的膨胀，数据庞大时还是比较消耗性能；另外，在备份周期在一定间隔时间做一次备份，所以如果Redis意外down的话，就会丢失最后一次快照后所有修改。<br></p><h3 id="RDB持久化的执行时机"><a href="#RDB持久化的执行时机" class="headerlink" title="RDB持久化的执行时机"></a>RDB持久化的执行时机</h3><p>&emsp;&emsp;RBD持久化在四种情况下会执行。分别是：<br><br>&emsp;&emsp;执行<strong>save命令</strong>的时候，会立即执行一次RDB。save命令会导致主进程执行RDB，这个过程中其它所有命令都会被阻塞。这个命令一般只有在数据迁移时可能用到。<br><br>&emsp;&emsp;执行<strong>bgsave命令</strong>，这个命令会以异步的方式进行RDB，会开启一个独立进程完成RDB，主进程会持续处理用户请求，而不受影响。<br><br>&emsp;&emsp;<strong>停机时</strong>，当停机的时候，Redis会执行一次save，来实现RDB持久化。<br><br>&emsp;&emsp;此外，Redis内部也有触发RDB的机制，这个可以在redis.conf文件中找到并配置，一般是这种格式：<br></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"># 在m秒内，如果有至少n个<span class="hljs-built_in">key</span>被修改，那么就会执行bgsave，如果是<span class="hljs-built_in">save</span> <span class="hljs-string">&quot;&quot;</span> 则表示禁用RDB持久化<br><span class="hljs-built_in">save</span> m n<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;此外，RDB也可以做其他的一些配置在redis.conf中，比如是否压缩：<br></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rdbcompression</span> <span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这个一般是不建议开启的，因为磁盘不值钱，很多，但是压缩是很消耗CPU的。<br><br>&emsp;&emsp;还有配置RDB文件的名称：<br></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">dbfilename <span class="hljs-keyword">dump</span>.rdb<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;以及配置文件保存的路径目录：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dir</span> ./<br></code></pre></td></tr></table></figure><h3 id="RDB的原理"><a href="#RDB的原理" class="headerlink" title="RDB的原理"></a>RDB的原理</h3><p>&emsp;&emsp;对于RDB来说，bgsave开始时会fork主进程得到子进程，子进程共享主进程的内存数据。完成fork后读取内存数据并写入 RDB 文件。<br><br>&emsp;&emsp;这个fork采用了copy-on-write的技术，也就是说：<br><br>&emsp;&emsp;首先，主进程fork得到子进程，对于子进程来说，fork完后，读取内存数据，写新的RDB文件并且替换掉旧的RDB文件。<br><br>&emsp;&emsp;而对于主进程来说，如果执行的是读操作，那么就可以访问共享内存。<br><br>&emsp;&emsp;如果是执行的写操作，就会拷贝一份数据再进行写操作。<br></p><h3 id="RDB持久化的配置"><a href="#RDB持久化的配置" class="headerlink" title="RDB持久化的配置"></a>RDB持久化的配置</h3><p>&emsp;&emsp;对于RDB的配置来说，需要对Redis安装目录下的redis.conf进行配置。首先，RDB是默认开启的，但也需要有一些基本的配置，以下是一个配置RDB持久化的示例片段：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># RDB持久化配置</span><br><span class="hljs-attribute">save</span> <span class="hljs-number">900</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">save</span> <span class="hljs-number">300</span> <span class="hljs-number">10</span><br><span class="hljs-attribute">save</span> <span class="hljs-number">60</span> <span class="hljs-number">10000</span><br><br><span class="hljs-comment"># RDB文件名</span><br><span class="hljs-attribute">dbfilename</span> dump.rdb<br><br><span class="hljs-comment"># RDB文件和AOF文件的存储目录</span><br><span class="hljs-attribute">dir</span> /var/lib/redis/<br><br><span class="hljs-comment"># 后台保存出错时停止写操作</span><br><span class="hljs-attribute">stop</span>-writes-<span class="hljs-literal">on</span>-bgsave-error yes<br><br><span class="hljs-comment"># 使用LZF压缩字符串对象</span><br><span class="hljs-attribute">rdbcompression</span> yes<br><br><span class="hljs-comment"># 使用CRC64算法进行数据校验</span><br><span class="hljs-attribute">rdbchecksum</span> yes<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;其中，save 900 1表示在900秒内，如果至少有1个key被修改，那么就会执行bgsave，如果是save “” 则表示禁用RDB持久化。<br><br>&emsp;&emsp;dbfilename dump.rdb表示RDB文件名，dir &#x2F;var&#x2F;lib&#x2F;redis&#x2F;表示RDB文件和AOF文件的存储目录。<br><br>&emsp;&emsp;stop-writes-on-bgsave-error yes表示后台保存出错时停止写操作。<br><br>&emsp;&emsp;rdbcompression yes表示使用LZF压缩字符串对象。<br><br>&emsp;&emsp;rdbchecksum yes表示使用CRC64算法进行数据校验。<br></p><h3 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h3><p>&emsp;&emsp;AOF全称为Append Only File（追加文件）。<br><br>&emsp;&emsp;AOF的持久化是以独立日志的方式记录每次写的命令，重启时重新执行AOF文件中的命令恢复数据。<br><br>&emsp;&emsp;换言之，可以看作是一个命令日志文件，里面记录着执行的命令记录。重启后，又重新执行一遍，数据就恢复了。<br><br>&emsp;&emsp;AOF的配置默认是关闭的，也需要通过redis.conf进行修改：<br></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 是否开启AOF功能，默认是no</span><br><span class="hljs-attribute">appendonly</span> <span class="hljs-literal">yes</span><br><span class="hljs-comment"># AOF文件的名称</span><br>appendfilename <span class="hljs-string">&quot;appendonly.aof&quot;</span><br><span class="hljs-comment"># 表示每执行一次写命令，立即记录到AOF文件</span><br>appendfsync always <br><span class="hljs-comment"># 写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案</span><br>appendfsync everysec <br><span class="hljs-comment"># 写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</span><br>appendfsync <span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;另外，如果想要开启AOF，需要先将RDB停用掉。如上述可以采用<br></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">save</span> <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;的这么一种方式进行停用。<br><br>&emsp;&emsp;记录命令的频率appendfsync有三种策略情况：<br></p><table><thead><tr><th>策略名称</th><th>描述</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>no</td><td>不进行fsync，操作系统决定何时刷新数据到磁盘。</td><td>最高性能，因为避免了磁盘I&#x2F;O操作。</td><td>系统崩溃时可能会丢失大量数据。</td></tr><tr><td>everysec</td><td>每秒执行一次fsync操作。</td><td>在性能和数据安全性之间取得了平衡，最多丢失1秒的数据。</td><td>系统崩溃时可能会丢失1秒内的数据，性能略低于”no”。</td></tr><tr><td>always</td><td>每次写入操作后都执行fsync。</td><td>提供了最高的数据安全性，几乎不会丢失数据。</td><td>性能影响最大，因为每次写入都要进行磁盘I&#x2F;O操作。</td></tr></tbody></table><p>&emsp;&emsp;另外，由于是记录命令，所以AOF文件会比RDB文件大很多，并且，AOF由于是记录命令，再重新执行，对于同一个key的多次写操作来说，只有最后一次操作才是有意义的操作，因此，可以用<strong>bgrewriteaof</strong>这样一个命令，来让AOF文件执行重写功能，以期待用最少的命令达到相同的效果。<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># redis-cli中</span><br>bgrewriteaof<br><span class="hljs-comment"># 优化日志命令</span><br><span class="hljs-built_in">set</span> key 123<br><span class="hljs-built_in">set</span> key 456  --------&gt; <span class="hljs-built_in">set</span> key 777<br><span class="hljs-built_in">set</span> key 777<br><br><span class="hljs-built_in">set</span> key 111<br><span class="hljs-built_in">set</span> name gagaduck -------&gt; mset name gagaduck key 777<br><span class="hljs-built_in">set</span> key 777<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;如上所示，重写命令。当然Redis在触发阈值后也会自动去重写AOF文件，这个阈值也是可以在redis.conf进行配置的：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># AOF文件比上次文件 增长超过多少百分比则触发重写</span><br><span class="hljs-attribute">auto</span>-aof-rewrite-percentage <span class="hljs-number">100</span><br><span class="hljs-comment"># AOF文件体积最小多大以上才触发重写 </span><br><span class="hljs-attribute">auto</span>-aof-rewrite-min-size <span class="hljs-number">64</span>mb <br></code></pre></td></tr></table></figure><h3 id="AOF对比RDB"><a href="#AOF对比RDB" class="headerlink" title="AOF对比RDB"></a>AOF对比RDB</h3><table><thead><tr><th>特性&#x2F;方式</th><th>AOF</th><th>RDB</th></tr></thead><tbody><tr><td>数据安全性</td><td>更高，可以配置为每条写命令后同步</td><td>较低，取决于保存频率</td></tr><tr><td>恢复速度</td><td>较慢，因为需要重放所有命令</td><td>快速，直接载入数据快照</td></tr><tr><td>文件大小</td><td>通常比RDB大，因为记录了所有写命令</td><td>较小，只保存某一时刻的数据快照</td></tr><tr><td>写操作性能影响</td><td>较高，取决于同步策略</td><td>较低，只有在保存时影响</td></tr><tr><td>重写&#x2F;保存机制</td><td>后台重写，不阻塞主线程</td><td>保存时阻塞主线程</td></tr><tr><td>数据丢失风险</td><td>最多丢失1秒内的数据（取决于配置）</td><td>最多丢失最后一次快照后的数据</td></tr><tr><td>配置复杂度</td><td>相对复杂，有多种同步策略</td><td>相对简单，只需设置保存间隔和时间</td></tr></tbody></table><p>&emsp;&emsp;各自适用的场景：<br></p><table><thead><tr><th>方式</th><th>适用场景</th></tr></thead><tbody><tr><td>AOF</td><td>需要高数据安全性的场景，能够接受较慢的恢复速度和较大的文件体积，例如需要保证数据完整性的应用。</td></tr><tr><td>RDB</td><td>需要快速恢复和较小文件体积的场景，能够接受一定时间内数据丢失的风险，例如缓存或对数据完整性要求不高的应用。</td></tr></tbody></table><h2 id="Redis的主从复制"><a href="#Redis的主从复制" class="headerlink" title="Redis的主从复制"></a>Redis的主从复制</h2><h3 id="为什么需要Redis主从"><a href="#为什么需要Redis主从" class="headerlink" title="为什么需要Redis主从"></a>为什么需要Redis主从</h3><p>&emsp;&emsp;单节点的Redis并发是有上限的，如果要进一步提高Redis的并发能力，就需要通过读写分离，需要搭建主从集群。由master节点进行写操作，而采用一群从节点进行读操作，主节点和从节点之间保证数据的同步。<br></p><h3 id="主从复制的配置"><a href="#主从复制的配置" class="headerlink" title="主从复制的配置"></a>主从复制的配置</h3><p>&emsp;&emsp;主从复制的配置是非常简单的，在配置文件中，只需要在从节点配置文件中添加如下配置即可：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">slaveof</span> <span class="hljs-number">127.0.0.1</span> <span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;当然也可以通过命令行进行配置：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">slaveof</span> <span class="hljs-number">127.0.0.1</span> <span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;需要注意的是，如果redis有密码，需要设置一下密码，可以在配置文件中设置：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">masterauth</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;也可以在命令行中设置：<br></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">config set masterauth <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;例如，现在搭建了一个主节点在127.0.0.1:6379，另外启动一个docker为127.0.0.1:6378:<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98_%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/redis%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD.png" alt="Redis主从设置" title="Redis主从设置"><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98_%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/redis-slave.png" alt="Redis从节点显示1" title="Redis从节点显示1"><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98_%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/%E4%BB%8E%E8%8A%82%E7%82%B9%E6%98%BE%E7%A4%BA.png" alt="Redis从节点显示2" title="Redis从节点显示2"></p><h3 id="主从复制的原理"><a href="#主从复制的原理" class="headerlink" title="主从复制的原理"></a>主从复制的原理</h3><h4 id="全量同步"><a href="#全量同步" class="headerlink" title="全量同步"></a>全量同步</h4><p>&emsp;&emsp;当Redis主从第一次建立连接的时候，会执行一次全量同步，用于将master节点的所有数据都拷贝到slave节点。可分为三个阶段：<br><br>&emsp;&emsp;<strong>第一阶段</strong>：从节点执行replicaof命令，开始建立连接，从Redis向主Redis请求数据同步，主Redis判断是否是第一次数据同步，如果是第一次数据同步，那么就向从Redis返回主节点的数据版本信息，从节点收到版本信息后保存下来。<br><br>&emsp;&emsp;<strong>第二阶段</strong>：主节点执行bgsave，生成RDB，并且记录RDB期间所有的命令到一个repl_backlog中，而后发送RDB文件到从节点，从节点收到后，清空本地数据并加载RDB文件。<br><br>&emsp;&emsp;最后，<strong>第三阶段</strong>，主节点将repl_backlog中的命令发送到从节点，从节点接收并执行。<br><br>&emsp;&emsp;此外，对于主节点如何判断是否是第一次同步的问题，需要看一个replid是否一致。<br><br>&emsp;&emsp;从节点发送自己的Replication Id（是数据集的标记，id一致则说明是同一数据集。每一个master都有唯一的replid，slave则会继承master节点的replid）和offset（偏移量，随着记录在repl_baklog中的数据增多而逐渐增大，如果slave的offset小于master的offset，说明slave数据落后于master，需要更新）到主节点。<br><br>&emsp;&emsp;对于主节点来说，判断这个请求的replid是否和自己的一致，如果不一致，说明现在的从节点还不是自己的从节点而是另外一个主节点，因此，需要发送主节点的replid和offset到从节点，让从节点保存下来从而从一个主节点变成一个从节点。<br></p><h4 id="增量同步"><a href="#增量同步" class="headerlink" title="增量同步"></a>增量同步</h4><p>&emsp;&emsp;全量同步相当于做RDB，然后再把RDB传输到slave，这个成本实在是太高了，尤其是如果说RDB很大，就更高了，因此，一般来说，只有在初次同步会全量同步，其他时候应该选择增量同步。<br><br>&emsp;&emsp;对于增量同步来说，流程一般如下：<br><br>&emsp;&emsp;从节点发送自己的reolid和offset给主节点，由主节点判断是否一致，如果一致，那么说明是从节点并且不是初次同步，回复给从节点continue，并去repl_backlog中获取从节点传输过来的offset后面的数据，并发送offset后面的命令来让从节点执行，以此同步。<br></p><h4 id="repl-backlog"><a href="#repl-backlog" class="headerlink" title="repl_backlog"></a>repl_backlog</h4><p>&emsp;&emsp;在全量同步和增量同步中，都提到了一个东西就是repl_backlog。<br><br>&emsp;&emsp;对于主节点来说，怎么能知道从节点和自己的差异在哪里呢？就需要靠这个文件。<br><br>&emsp;&emsp;repl_backlog这个文件是一个固定大小的环形数组，脚标到达数组末尾后，会再次从0开始读写，这样数组头部的数据就会被覆盖。<br><br>&emsp;&emsp;在这个文件中，会记录Redis处理过的命令日志及offset，包括主节点当前的offset，和从节点已经拷贝到的offset。<br><br>&emsp;&emsp;主从offset之间的差异，就是从节点需要拷贝增量的数据。<br><br>&emsp;&emsp;由于是一个环形数组，所以会出现以下两种情况：<br><br>&emsp;&emsp;<strong>第一种</strong>，从节点增量很及时，追上了主节点的进度，那么，这种情况下，就很正常的继续更新。<br><br>&emsp;&emsp;<strong>第二种</strong>，如果说网络阻塞了，主节点的offset远远超过从节点了，那么当主节点继续写入数据，offset覆盖了旧的，把slave现在的offset也给覆盖了，那么这个时候，slave就无法通过增量同步了，因为连自己的offset在主节点都找不到了，拿什么新增数据呢？只能做全量同步了。<br><br>&emsp;&emsp;换言之，repl_backlog是一个环形数组，有上限，写满了，就会覆盖最老的，如果从节点断开的时间太久或者阻塞太厉害，没有备份的数据就会被覆盖，那么就无法基于log来做增量同步了，只能全量同步RDB了。<br></p><h4 id="主从同步的优化"><a href="#主从同步的优化" class="headerlink" title="主从同步的优化"></a>主从同步的优化</h4><p>&emsp;&emsp;对于主从同步来说，可以从以下几个方面进行优化：<br><br>&emsp;&emsp;首先自然是适当扩大repl_backlog的大小，这样能尽量避免全量同步，全量同步太花时间了。如果发现从节点宕机了及时恢复也是从这一方面的考虑。<br><br>&emsp;&emsp;另外，就是限制从节点的数量，避免给主节点太多压力，如果确实需要很多从节点，那么考虑使用主-从-从的链式结构，一层层做同步：<br></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs 1c">  master<br>  <span class="hljs-string">|</span><br>  v<br>slave1<br>  <span class="hljs-string">|</span><br>  v<br>slave2<br>  <span class="hljs-string">|</span><br>  v<br>slave3<br>  <span class="hljs-string">|</span><br>  v<br>slave4<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这样，master只需要同步给slave1，slave1再同步给slave2，slave2再同步给slave3，slave3再同步给slave4，这样master的压力就小了很多。<br><br>&emsp;&emsp;另外，就是使用pipeline，pipeline可以减少网络交互的次数，提升性能，但是pipeline的长度不能太大，否则会占用过多的内存。<br><br>&emsp;&emsp;最后，就是使用无盘复制，也就是直接从内存中读取RDB文件，而不是先写入磁盘再读取，这样可以减少磁盘IO，提升性能:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启用无盘复制</span><br>repl-diskless-sync <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 分布式缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式缓存 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—CI/CD—Jenkins</title>
      <link href="/2024/09/18/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94CI-CD%E2%80%94Jenkins/"/>
      <url>/2024/09/18/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94CI-CD%E2%80%94Jenkins/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是CI-CD"><a href="#什么是CI-CD" class="headerlink" title="什么是CI&#x2F;CD"></a>什么是CI&#x2F;CD</h2><p>&emsp;&emsp;CI&#x2F;CD（持续集成&#x2F;持续交付）是一组实践，用于在软件开发过程中自动化代码集成、测试、部署的流程。CI（持续集成）指的是开发人员频繁地将代码集成到共享代码库中，每次集成都会自动运行测试以确保代码的稳定性。<br><br>&emsp;&emsp;CD分为持续交付和持续部署。<br><br>&emsp;&emsp;持续交付是指代码在通过测试后，能够自动准备好部署；<br><br>&emsp;&emsp;持续部署则是指代码在每次变更后会自动部署到生产环境中。<br></p><h2 id="为什么需要CI-CD"><a href="#为什么需要CI-CD" class="headerlink" title="为什么需要CI&#x2F;CD"></a>为什么需要CI&#x2F;CD</h2><p>&emsp;&emsp;CI&#x2F;CD通过自动化的构建、测试、部署流程，可以显著的提高软件开发的效率和质量。<br><br>&emsp;&emsp;并且它还减少了人工干预的需求，从而加速了产品的交付周期，并降低了因为代码集成和发布造成的问题。通过频繁的集成和持续的测试，可以让开发团队能够更早发现问题，减少修复的成本。<br><br>&emsp;&emsp;同时，CD让团队可以轻松将变更部署到生产环境，减少了发布过程中的风险。<br><br>&emsp;&emsp;因此，CI&#x2F;CD也是云原生时代不可或缺的一部分。<br></p><h2 id="Jenkins是什么"><a href="#Jenkins是什么" class="headerlink" title="Jenkins是什么"></a>Jenkins是什么</h2><p>&emsp;&emsp;Jenkins是一个开源的CI&#x2F;CD自动化服务器，广泛用于构建、测试、部署软件项目。它支持众多的插件，可以与不同的工具、版本控制系统和技术栈集成。Jenkins通过流水线的形式自动化了开发流程中的各个步骤，从代码提交到生产环境的发布，可以有效提升开发效率。由于其灵活性和可扩展性，Jenkins也自然成为了最受欢迎的CI&#x2F;CD工具之一。<br></p><h2 id="Jenkins安装"><a href="#Jenkins安装" class="headerlink" title="Jenkins安装"></a>Jenkins安装</h2><p>&emsp;&emsp;采用docker的方式进行简单的安装：<br></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino">docker search jenkins<br>docker pull jenkins/jenkins<br><span class="hljs-comment">// 创建文件夹</span><br>mkdir -p /home/jenkins_home<br><span class="hljs-comment">// 赋予权限</span><br>chmod <span class="hljs-number">777</span> /home/jenkins_home<br><span class="hljs-comment">// 运行容器</span><br>docker run -d -uroot -p <span class="hljs-number">9096</span>:<span class="hljs-number">8080</span> -p <span class="hljs-number">50000</span>:<span class="hljs-number">50000</span> -v /home/jenkins_home:/var/jenkins_home --name jenkins jenkins/jenkins<br><span class="hljs-comment">// 查看容器日志</span><br>docker logs -f jenkins<br><span class="hljs-comment">// 查看密码</span><br>cat /home/jenkins_home/secrets/initialAdminPassword<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在浏览器输入IP端口，访问，输入密码，安装插件，创建用户，配置实例，可以启动使用了。<br></p><h2 id="Jenkins使用"><a href="#Jenkins使用" class="headerlink" title="Jenkins使用"></a>Jenkins使用</h2><p>&emsp;&emsp;这里，用一个简单的例子来阐述一个简单的、整个从提交git后构建部署为一个docker实例的过程：<br><br>&emsp;&emsp;首先，确保jenkins在9096端口，并且有一个可以持续开发的项目，以一个简单的例子：<a href="https://github.com/gagaducko/learning_demos/tree/main/jenkins-demo">https://github.com/gagaducko/learning_demos/tree/main/jenkins-demo</a><br><br>&emsp;&emsp;这里面有一个简单的python文件，运行后访问localhost:8080可以得到：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hello</span>! Version here is <span class="hljs-number">1</span>.<span class="hljs-number">0</span>, and version is <span class="hljs-number">1</span>.<span class="hljs-number">0</span> now!<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在此基础上，开始对jenkins进行构建，首先，需要确保jenkins有以下依赖：Git Plugin：支持从 Git 仓库拉取代码；Docker Pipeline Plugin：用于 Docker 的构建和推送；Pipeline Plugin：支持使用 Pipeline 进行自动化构建。<br><br>&emsp;&emsp;在dashboard创建一个test-jenkins项目，在Configuration处进行编辑。配置Jenkinsfile如下：<br></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs dart">pipeline &#123;<br>    agent any<br><br>    environment &#123;<br>        <span class="hljs-comment">// 设置 Docker 镜像名称和标签</span><br>        DOCKER_IMAGE = <span class="hljs-string">&quot;test-jenkins&quot;</span><br>        DOCKER_TAG = <span class="hljs-string">&quot;latest&quot;</span><br>        REPO_URL = <span class="hljs-string">&quot;https://github.com/gagaducko/learning_demos.git&quot;</span><br>        REPO_BRANCH = <span class="hljs-string">&quot;main&quot;</span><br>        DOCKERFILE_DIR = <span class="hljs-string">&quot;jenkins-demo&quot;</span> <span class="hljs-comment">// Dockerfile所在的目录</span><br>    &#125;<br><br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Clone Repository&#x27;</span>) &#123;<br>            steps &#123;<br>                <span class="hljs-comment">// 克隆 Git 仓库</span><br>                git branch: <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;REPO_BRANCH&#125;</span>&quot;</span>, url: <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;REPO_URL&#125;</span>&quot;</span><br>            &#125;<br>        &#125;<br><br>        stage(<span class="hljs-string">&#x27;Build Docker Image&#x27;</span>) &#123;<br>            steps &#123;<br>                script &#123;<br>                    <span class="hljs-comment">// 构建 Docker 镜像，指定构建上下文为 Dockerfile 所在的目录</span><br>                    docker.build(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;DOCKER_IMAGE&#125;</span>:<span class="hljs-subst">$&#123;DOCKER_TAG&#125;</span>&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;DOCKERFILE_DIR&#125;</span>&quot;</span>)<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        stage(<span class="hljs-string">&#x27;Stop Old Container&#x27;</span>) &#123;<br>            steps &#123;<br>                script &#123;<br>                    <span class="hljs-comment">// 停止旧的 Docker 容器</span><br>                    sh <span class="hljs-string">&quot;docker stop <span class="hljs-subst">$&#123;DOCKER_IMAGE&#125;</span> || true&quot;</span><br>                    sh <span class="hljs-string">&quot;docker rm <span class="hljs-subst">$&#123;DOCKER_IMAGE&#125;</span> || true&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br><br>        stage(<span class="hljs-string">&#x27;Run New Container&#x27;</span>) &#123;<br>            steps &#123;<br>                script &#123;<br>                    <span class="hljs-comment">// 启动新的 Docker 容器</span><br>                    sh <span class="hljs-string">&quot;docker run -d --name <span class="hljs-subst">$&#123;DOCKER_IMAGE&#125;</span> -p 8080:8080 <span class="hljs-subst">$&#123;DOCKER_IMAGE&#125;</span>:<span class="hljs-subst">$&#123;DOCKER_TAG&#125;</span>&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    post &#123;<br>        always &#123;<br>            script &#123;<br>                <span class="hljs-comment">// 仅清理当前构建镜像的旧标签</span><br>                sh <span class="hljs-string">&quot;docker image prune -f --filter &#x27;dangling=true&#x27; --filter &#x27;label=image=<span class="hljs-subst">$&#123;DOCKER_IMAGE&#125;</span>&#x27;&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这个 Jenkinsfile 定义了一个完整的 Jenkins pipeline，用于从 Git 仓库克隆代码，构建 Docker 镜像，部署新的容器并清理旧的镜像。<br><br>&emsp;&emsp;pipeline {}：整个声明式的 Jenkins pipeline 被包含在 pipeline {} 块中。<br><br>&emsp;&emsp;agent any：指定 Jenkins 可以在任何可用的节点上执行这条 pipeline。也可以通过 agent {} 指定特定的节点或 Docker 容器。<br><br>&emsp;&emsp;environment {}：定义了全局环境变量，所有的步骤中都可以访问。<br><br>&emsp;&emsp;stage {}：一个 pipeline 由多个 stage 组成，每个 stage 表示一个执行阶段。<br><br>&emsp;&emsp;git branch: “${REPO_BRANCH}”, url: “${REPO_URL}”：克隆指定的 Git 仓库和分支到 Jenkins 工作目录。<br><br>&emsp;&emsp;script {}：允许在声明式 pipeline 中运行任意的 Groovy 脚本。<br><br>&emsp;&emsp;docker.build()：这是 Docker Pipeline 插件中的一个方法，用来构建 Docker 镜像。<br><br>&emsp;&emsp;docker stop：停止正在运行的容器。如果容器不存在，使用 || true 确保不会因为错误导致任务失败。<br><br>&emsp;&emsp;docker rm：删除容器，以便后续启动新的容器。<br><br>&emsp;&emsp;docker run：启动新的 Docker 容器。<br><br>&emsp;&emsp;post {}：定义了在 pipeline 执行完后总是执行的操作。<br><br>&emsp;&emsp;always {}：无论 pipeline 成功还是失败，总是执行其中的脚本。<br><br>&emsp;&emsp;docker image prune：清理构建过程中生成的无用（dangling）镜像，只针对当前构建的镜像进行清理。<br><br>&emsp;&emsp;需要注意的是，如果 Jenkins 本身运行在 Docker 容器中，需要挂载 Docker 的 UNIX 套接字以便 Jenkins 容器可以访问主机的 Docker 守护进程。在启动 Jenkins 容器时，添加以下挂载选项：<br></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs groovy">-v <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/docker.sock:/</span><span class="hljs-keyword">var</span><span class="hljs-regexp">/run/</span>docker.sock \<br>-v <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/docker:/</span>usr<span class="hljs-regexp">/bin/</span>docker \<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;否则会出现如下的错误：<br></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">+ docker build -t test-jenkins:latest jenkins-demo<br><span class="hljs-regexp">/var/</span>jenkins_home<span class="hljs-regexp">/workspace/</span>test-jenkins@tmp<span class="hljs-regexp">/durable-70867870/</span>script.sh.copy: <span class="hljs-number">1</span>: docker: not found<br>script returned <span class="hljs-keyword">exit</span> code <span class="hljs-number">127</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;当修改代码为1.1后，重新构建后，再次访问localhost:8080：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hello</span>! Version here is <span class="hljs-number">1</span>.<span class="hljs-number">1</span>, and version is <span class="hljs-number">1</span>.<span class="hljs-number">1</span> now!<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这是一个简单的流水线设计，jenkinsfile是很重要的。<br><br>&emsp;&emsp;对于一些复杂的项目来说，也可以用类似的方式进行CI&#x2F;CD的构建。<br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> CI/CD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CI/CD </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—微服务—技术栈实践(10)—消息中间件</title>
      <link href="/2024/09/17/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-10-%E2%80%94%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2024/09/17/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-10-%E2%80%94%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h2><p>&emsp;&emsp;在微服务架构中，服务之间的解耦和高效通信是关键，而消息中间件在其中扮演了不可或缺的角色。它允许不同服务通过异步消息的方式进行通信，既减少了服务间的直接依赖，也提高了系统的容错性与扩展性。<br><br>&emsp;&emsp;于此，本文将简单介绍两种常见的消息中间件技术——Kafka 和 RocketMQ，并分析它们在微服务架构中的使用场景与实现方式。<br><br>&emsp;&emsp;消息中间件是一种用于在分布式系统中传递消息的软件。它作为消息的中转站，确保消息能够在发送者和接收者之间高效且可靠地传递。<br><br>&emsp;&emsp;常见的消息中间件技术包括kafka、rabbitmq、rocketmq等。其在微服务架构中的主要应用包括了服务之间的异步通信、事件驱动架构中的事件流处理、提供消息的持久化存储，以防数据丢失、解耦生产者与消费者，使得它们不需要同时在线。<br></p><table><thead><tr><th>消息中间件</th><th>架构</th><th>优点</th><th>缺点</th><th>典型应用场景</th></tr></thead><tbody><tr><td><strong>Kafka</strong></td><td>分布式流处理平台</td><td>- 高吞吐量，适合大数据场景<br>- 支持持久化，数据可靠性高<br>- 横向扩展性强<br>- 良好的日志管理功能</td><td>- 不适合低延迟场景<br>- 依赖 Zookeeper 进行集群管理<br>- 消息处理机制较为复杂</td><td>- 实时日志收集<br>- 数据流处理<br>- 大数据分析和监控系统</td></tr><tr><td><strong>RabbitMQ</strong></td><td>基于 AMQP 协议的消息代理</td><td>- 支持复杂的路由功能<br>- 提供消息确认机制，消息可靠性强<br>- 支持丰富的协议（如 AMQP、MQTT）<br>- 低延迟，适合高并发场景</td><td>- 吞吐量相对较低<br>- 难以处理大规模消息流量</td><td>- 在线订票、秒杀等实时系统<br>- 金融交易系统<br>- 消息队列优先级和延时任务</td></tr><tr><td><strong>RocketMQ</strong></td><td>分布式、主从架构</td><td>- 支持分布式事务消息<br>- 高吞吐量，延迟低<br>- 支持顺序消息和延时消息<br>- 扩展性强</td><td>- 社区和生态相对较小<br>- 功能相对较少，缺乏一些高级功能</td><td>- 金融支付系统<br>- 秒杀、高并发订单系统<br>- 分布式事务处理</td></tr><tr><td><strong>ActiveMQ</strong></td><td>基于 JMS（Java 消息服务）</td><td>- 易于使用，兼容 JMS 标准<br>- 支持多种协议（如 STOMP、AMQP）<br>- 丰富的消息传递模式（点对点、发布订阅等）</td><td>- 性能和扩展性不如 Kafka、RocketMQ<br>- 延迟较高，不适合大规模并发</td><td>- 传统企业消息系统<br>- 轻量级的消息传递和集成<br>- 小型应用和系统集成</td></tr></tbody></table><h2 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h2><h3 id="什么是kafka"><a href="#什么是kafka" class="headerlink" title="什么是kafka"></a>什么是kafka</h3><p>&emsp;&emsp;Kafka 是由 LinkedIn 开发并贡献给 Apache 基金会的分布式流处理平台。最初 Kafka 被设计为一种高吞吐量的消息队列，但它现在已经成为一个功能强大的流数据平台，能够处理实时数据流的发布和订阅，以及持久化存储。<br><br>&emsp;&emsp;Kafka 的架构由以下几部分组成：<br></p><table><thead><tr><th>组件</th><th>说明</th></tr></thead><tbody><tr><td><strong>Broker</strong></td><td>消息的存储和转发节点，负责接收、存储和转发消息。Kafka 集群由多个 Broker 组成。</td></tr><tr><td><strong>Producer</strong></td><td>消息生产者，向 Broker 发送消息。每个消息都属于一个 Topic。</td></tr><tr><td><strong>Consumer</strong></td><td>消息消费者，从 Broker 中读取消息。消费者可以订阅一个或多个 Topic。</td></tr><tr><td><strong>Zookeeper</strong></td><td>用于管理 Kafka 集群的元数据和协调 Broker 的状态，Kafka 通过 Zookeeper 进行集群管理。</td></tr><tr><td><strong>Topic</strong></td><td>消息的分类，每个 Topic 下有多个分区（Partition）。</td></tr><tr><td><strong>Partition</strong></td><td>每个 Topic 可以有多个 Partition，消息在 Partition 中按照顺序存储，Partition 可以分布在不同的 Broker 上。</td></tr><tr><td><strong>Consumer Group</strong></td><td>消费者分组机制，Consumer Group 中的消费者共享消费任务，每条消息仅被其中一个消费者消费。</td></tr></tbody></table><h3 id="Kafka实践"><a href="#Kafka实践" class="headerlink" title="Kafka实践"></a>Kafka实践</h3><h4 id="docker安装kafka"><a href="#docker安装kafka" class="headerlink" title="docker安装kafka"></a>docker安装kafka</h4><p>&emsp;&emsp;对于较新版的kafka来说，可以考虑直接使用KRaft而非zookeeper。<br><br>&emsp;&emsp;于此采用docker compose，首先需根据实际情况创建一个docker-compose.yaml文件，例如：<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># version: &quot;3&quot;</span><br>services:<br>   kafka:<br>     image: <span class="hljs-string">&#x27;bitnami/kafka:latest&#x27;</span><br>     user: root<br>     ports:<br>       - <span class="hljs-string">&#x27;9092:9092&#x27;</span><br>       - <span class="hljs-string">&#x27;9093:9093&#x27;</span><br>     environment:<br>       - <span class="hljs-attribute">KAFKA_ENABLE_KRAFT</span>=<span class="hljs-literal">yes</span><br>       - <span class="hljs-attribute">KAFKA_CFG_PROCESS_ROLES</span>=broker,controller<br>       - <span class="hljs-attribute">KAFKA_CFG_CONTROLLER_LISTENER_NAMES</span>=CONTROLLER<br>       - <span class="hljs-attribute">KAFKA_CFG_LISTENERS</span>=PLAINTEXT://:9092,CONTROLLER://:9093<br>       - <span class="hljs-attribute">KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP</span>=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT<br>       - <span class="hljs-attribute">KAFKA_CFG_ADVERTISED_LISTENERS</span>=PLAINTEXT://192.168.1.186:9092<br>       - <span class="hljs-attribute">KAFKA_CFG_NODE_ID</span>=1<br>       - <span class="hljs-attribute">KAFKA_BROKER_ID</span>=1<br>       - <span class="hljs-attribute">KAFKA_KRAFT_CLUSTER_ID</span>=LelM2dIFQkiUFvXCEcqRWA<br>       - <span class="hljs-attribute">KAFKA_CFG_CONTROLLER_QUORUM_VOTERS</span>=1@192.168.1.186:9093<br>       - <span class="hljs-attribute">ALLOW_PLAINTEXT_LISTENER</span>=<span class="hljs-literal">yes</span><br>     volumes:<br>       - /data/deploy/kafkaCluster/kraft:/bitnami/kafka:rw<br>     network_mode: bridge<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;然后执行docker-compose up即可启动kafka服务，启动后可以通过docker compose logs kafka查看日志。（对于不同的docker compose版本是有些许去别的，有些需要指定name。）<br><br>&emsp;&emsp;值得注意的是，上面的是基于kraft部署多节点的kafka集群的，以下介绍一种简单的kafka部署。参考<a href="https://blog.csdn.net/m0_51390969/article/details/140156693">https://blog.csdn.net/m0_51390969/article/details/140156693</a><br><br>&emsp;&emsp;首先是选择一组兼容性较好的kafka和zookeeper版本。<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull bitnami/kafka:<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">docker</span> pull bitnami/zookeeper:<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;而后创建一个kafka网络，以确保kafka和zookeeper在同一个docker网络中运行，能够相互通信：<br></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker network create kafka</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;而后运行zookeeper：<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -d --name zookeeper --network kafka -e <span class="hljs-attribute">ALLOW_ANONYMOUS_LOGIN</span>=<span class="hljs-literal">yes</span> bitnami/zookeeper:3.8.2<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在此基础上运行kafka：<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -d --name kafka --network kafka -e <span class="hljs-attribute">KAFKA_BROKER_ID</span>=1 -e <span class="hljs-attribute">KAFKA_ZOOKEEPER_CONNECT</span>=zookeeper:2181 -e <span class="hljs-attribute">ALLOW_PLAINTEXT_LISTENER</span>=<span class="hljs-literal">yes</span> -e <span class="hljs-attribute">KAFKA_ADVERTISED_LISTENERS</span>=PLAINTEXT://localhost:9092 -p 9092:9092 bitnami/kafka:3.6.1<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;检查安装情况的方式可以参考上文提到的链接:<br></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">docker logs zookeeper<br>docker logs kafka<br><span class="hljs-comment"># 采用kafka命令行进行检查</span><br>docker exec -it kafka <span class="hljs-string">/bin/bash</span><br><span class="hljs-comment"># 列出 Kafka 主题</span><br>kafka-topics.sh <span class="hljs-params">--list</span> <span class="hljs-params">--bootstrap-server</span> kafka<span class="hljs-function">:9092</span><br><span class="hljs-comment"># 创建一个名为 test-topic 的主题</span><br>kafka-topics.sh <span class="hljs-params">--create</span> <span class="hljs-params">--topic</span> test-topic <span class="hljs-params">--partitions</span> 1 <span class="hljs-params">--replication-factor</span> 1 <span class="hljs-params">--bootstrap-server</span> kafka<span class="hljs-function">:9092</span><br><span class="hljs-comment"># 列出所有主题，确认 test-topic 是否存在</span><br>kafka-topics.sh <span class="hljs-params">--list</span> <span class="hljs-params">--bootstrap-server</span> kafka<span class="hljs-function">:9092</span><br><span class="hljs-comment"># 删除 test-topic 主题</span><br>kafka-topics.sh <span class="hljs-params">--delete</span> <span class="hljs-params">--topic</span> test-topic <span class="hljs-params">--bootstrap-server</span> kafka<span class="hljs-function">:9092</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;另外，还有个需要注意的东西，就是<strong>kafka的外部访问</strong><br><br>&emsp;&emsp;比如kafka部署在192.168.1.1上，那么对于192.168.1.2上的服务，很容易发现会有问题，无法正常使用kafka。<br><br>&emsp;&emsp;要让kafka进行外网访问，需要修改kafka的配置文件server.properties。以docker部署kafka+zookeeper为例子：<br></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta"># 进入kafka的容器，将配置文件拷贝出来</span><br>docker cp kafka:/opt/bitnami/kafka/config/<span class="hljs-keyword">server</span>.properties <span class="hljs-keyword">server</span>.properties<br><span class="hljs-meta"># 修改配置文件</span><br>vim <span class="hljs-keyword">server</span>.properties<br><span class="hljs-meta"># 修改如下内容</span><br><span class="hljs-meta"># 这样Kafka就会在所有网络接口上监听9092端口</span><br>listeners=PLAINTEXT:<span class="hljs-comment">//0.0.0.0:9092</span><br><span class="hljs-meta"># 修改Kafka的advertised.listeners，将localhost改为宿主机的公共IP地址，这样Kafka就会将消息发送到宿主机的IP地址</span><br>advertised.listeners=PLAINTEXT:<span class="hljs-comment">//宿主机IP:9092</span><br><span class="hljs-meta"># 将修改后的配置文件拷贝回去</span><br>docker cp <span class="hljs-keyword">server</span>.properties kafka:/opt/bitnami/kafka/config/<span class="hljs-keyword">server</span>.properties<br><span class="hljs-meta"># 或者直接映射文件也可以</span><br><span class="hljs-meta"># 最后重启kafka让配置文件失效</span><br>docker restart kafka<br></code></pre></td></tr></table></figure><h4 id="kafka的使用"><a href="#kafka的使用" class="headerlink" title="kafka的使用"></a>kafka的使用</h4><p>&emsp;&emsp;在安装好kafka的基础上，于此介绍一下基于springboot对kafka的使用。<br><br>&emsp;&emsp;首先，依旧是先配置好合适的依赖：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-kafka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在此基础上，添加对应的kafka配置：<br></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">spring.kafka.bootstrap-servers</span>=localhost:<span class="hljs-number">9092</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;随后编写生产者：<br></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaProducer</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">KafkaTemplate</span>&lt;<span class="hljs-title class_">String</span>,<span class="hljs-title class_">String</span>&gt; kafkaTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">sendKafkaTest</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> topic, <span class="hljs-title class_">String</span> msg</span>) &#123;<br>        kafkaTemplate.<span class="hljs-title function_">send</span>(topic, msg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;send topic: &quot;</span> + topic + <span class="hljs-string">&quot;and msg is: &quot;</span> + msg;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;以一个简单的接口调用测试：<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RestController</span><br>public class KafkaController &#123;<br><br>    <span class="hljs-variable">@Resource</span><br>    private KafkaProducer kafkaProducer;<br><br>    <span class="hljs-variable">@PostMapping</span>(<span class="hljs-string">&quot;/test&quot;</span>)<br>    public String <span class="hljs-built_in">pushMsg</span>(<span class="hljs-variable">@RequestParam</span>(<span class="hljs-string">&quot;topic&quot;</span>) String topic,<br>                          <span class="hljs-variable">@RequestParam</span>(<span class="hljs-string">&quot;message&quot;</span>) String message) &#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">kafkaProducer</span><span class="hljs-selector-class">.sendKafkaTest</span>(topic, message);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;随后创建一个生产者，对产生的内容进行消费：<br></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaConsumer</span> &#123;<br>    <span class="hljs-meta">@KafkaListener</span>(topics = &#123;<span class="hljs-string">&quot;PushTopic&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>&#125;,groupId = <span class="hljs-string">&quot;123&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">consume</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> message</span>)&#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;接收到消息：&quot;</span>+message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;通过postman进行简单的测试：<br></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">localhost:<span class="hljs-number">8080</span>/<span class="hljs-keyword">test</span>?topic=PushTopic&amp;<span class="hljs-keyword">message</span>=<span class="hljs-string">&quot;test message&quot;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;如此，便实现了一个简单的由springboot整合的kafka。<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%BE%AE%E6%9C%8D%E5%8A%A1_%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka%E6%94%B6%E5%8F%91%E6%B6%88%E6%81%AF.png" alt="Kafka的生产与消费" title="Kafka的生产与消费"></p><h2 id="RocketMq"><a href="#RocketMq" class="headerlink" title="RocketMq"></a>RocketMq</h2><h3 id="什么是RocketMq"><a href="#什么是RocketMq" class="headerlink" title="什么是RocketMq"></a>什么是RocketMq</h3><p>&emsp;&emsp;RocketMQ 是由阿里巴巴开源的分布式消息中间件，起初是为电商场景设计的高可用、高可靠的消息队列系统。它特别适用于高并发、大数据量的场景，提供了更低的消息延迟和丰富的消息调度能力。<br><br>&emsp;&emsp;RocketMQ的架构由以下几个部分组成：<br></p><table><thead><tr><th>组件</th><th>说明</th></tr></thead><tbody><tr><td><strong>Broker</strong></td><td>消息的存储和转发节点，分为 Master 和 Slave。Master 负责写入和读操作，Slave 负责数据备份。</td></tr><tr><td><strong>Producer</strong></td><td>消息生产者，向 Broker 发送消息。一个 Producer 可以将消息发送到多个 Topic。</td></tr><tr><td><strong>Consumer</strong></td><td>消息消费者，从 Broker 中读取消息。Consumer 可以订阅多个 Topic，并且可以分组以实现负载均衡。</td></tr><tr><td><strong>NameServer</strong></td><td>提供服务发现功能，消费者和生产者通过 NameServer 查找 Broker 地址。</td></tr><tr><td><strong>Topic</strong></td><td>消息的分类，每个 Topic 下可以有多个消息队列（Queue）。</td></tr><tr><td><strong>Message Queue</strong></td><td>每个 Topic 可以有多个消息队列，消息在队列中按照顺序存储，消费时可以保证顺序性。</td></tr><tr><td><strong>Consumer Group</strong></td><td>消费者分组机制，一个 Consumer Group 中的消费者共同消费 Group 下的消息，每条消息只被消费一次。</td></tr></tbody></table><p>&emsp;&emsp;使用 RocketMQ 的优势主要在于其对于事务一致性的支持，但其并发量稍逊于百万吞吐的kafka，因此，Kafka 更适合大规模数据流处理，RocketMQ 则在低延迟和事务处理场景中表现出色。根据具体业务需求，选择合适的消息中间件，能够显著提升系统的可扩展性与稳定性。<br></p><h3 id="RocketMQ实践"><a href="#RocketMQ实践" class="headerlink" title="RocketMQ实践"></a>RocketMQ实践</h3><h4 id="docker安装rocketMQ"><a href="#docker安装rocketMQ" class="headerlink" title="docker安装rocketMQ"></a>docker安装rocketMQ</h4><p>&emsp;&emsp;对于rocketmq来说，部署需要nameserver和broker。采用docker部署是比较简单得方式，参考<a href="https://rocketmq.apache.org/zh/docs/quickStart/02quickstartWithDocker/">https://rocketmq.apache.org/zh/docs/quickStart/02quickstartWithDocker/</a><br><br>&emsp;&emsp;首先拉取rocketmq镜像，以5.3.0为例：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull apache/rocketmq:<span class="hljs-number">5</span>.<span class="hljs-number">3</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在此基础上创建容器共享网络，方便多个服务之间得相互通信。<br></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker network create rocketmq</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;而后启动NameServer：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 启动 NameServer</span><br><span class="hljs-attribute">docker</span> run -d --name rmqnamesrv -p <span class="hljs-number">9876</span>:<span class="hljs-number">9876</span> --network rocketmq apache/rocketmq:<span class="hljs-number">5</span>.<span class="hljs-number">3</span>.<span class="hljs-number">0</span> sh mqnamesrv<br><span class="hljs-comment"># 验证 NameServer 是否启动成功</span><br><span class="hljs-attribute">docker</span> logs -f rmqnamesrv<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">OpenJDK <span class="hljs-number">64</span>-<span class="hljs-type">Bit</span> <span class="hljs-keyword">Server</span> VM <span class="hljs-built_in">warning</span>: <span class="hljs-keyword">Using</span> the DefNew young collector <span class="hljs-keyword">with</span> the CMS collector <span class="hljs-keyword">is</span> deprecated <span class="hljs-keyword">and</span> will likely be removed <span class="hljs-keyword">in</span> a future <span class="hljs-keyword">release</span><br>OpenJDK <span class="hljs-number">64</span>-<span class="hljs-type">Bit</span> <span class="hljs-keyword">Server</span> VM <span class="hljs-built_in">warning</span>: UseCMSCompactAtFullCollection <span class="hljs-keyword">is</span> deprecated <span class="hljs-keyword">and</span> will likely be removed <span class="hljs-keyword">in</span> a future <span class="hljs-keyword">release</span>.<br>The <span class="hljs-type">Name</span> <span class="hljs-keyword">Server</span> boot success. serializeType=<span class="hljs-type">JSON</span>, address <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">9876</span><br>context canceled<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;NameServer 成功启动后，我们启动 Broker 和 Proxy.<br></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment"># 配置 Broker 的IP地址</span><br>echo <span class="hljs-string">&quot;brokerIP1=127.0.0.1&quot;</span> &gt; broker.conf<br><br><span class="hljs-comment"># 启动 Broker 和 Proxy</span><br>docker run -d <span class="hljs-string">\</span><br>--name rmqbroker <span class="hljs-string">\</span><br>--network rocketmq <span class="hljs-string">\</span><br>-p <span class="hljs-number">10912</span>:<span class="hljs-number">10912</span> -p <span class="hljs-number">10911</span>:<span class="hljs-number">10911</span> -p <span class="hljs-number">10909</span>:<span class="hljs-number">10909</span> <span class="hljs-string">\</span><br>-p <span class="hljs-number">8080</span>:<span class="hljs-number">8080</span> -p <span class="hljs-number">8081</span>:<span class="hljs-number">8081</span> <span class="hljs-string">\</span><br>-e <span class="hljs-string">&quot;NAMESRV_ADDR=rmqnamesrv:9876&quot;</span> <span class="hljs-string">\</span><br>-v ./broker.conf:/home/rocketmq/rocketmq-<span class="hljs-number">5.3</span>.<span class="hljs-number">0</span>/conf/broker.conf <span class="hljs-string">\</span><br>apache/rocketmq:<span class="hljs-number">5.3</span>.<span class="hljs-number">0</span> sh mqbroker --enable-proxy <span class="hljs-string">\</span><br>-c /home/rocketmq/rocketmq-<span class="hljs-number">5.3</span>.<span class="hljs-number">0</span>/conf/broker.conf<br><br><span class="hljs-comment"># 验证 Broker 是否启动成功</span><br>docker exec -<span class="hljs-literal">it</span> rmqbroker bash -c <span class="hljs-string">&quot;tail -n 10 /home/rocketmq/logs/rocketmqlogs/proxy.log&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2024</span>-<span class="hljs-number">09</span>-<span class="hljs-number">17</span> <span class="hljs-number">20</span>:<span class="hljs-number">12</span>:<span class="hljs-number">42</span> INFO main - ServiceProvider loaded no AccessValidator, using default org.apache.rocketmq.acl.plain.PlainAccessValidator<br><span class="hljs-attribute">2024</span>-<span class="hljs-number">09</span>-<span class="hljs-number">17</span> <span class="hljs-number">20</span>:<span class="hljs-number">12</span>:<span class="hljs-number">43</span> INFO main - grpc server has built. port: <span class="hljs-number">8081</span>, tlsKeyPath: <span class="hljs-number">1</span>, tlsCertPath: <span class="hljs-number">32</span>, threadPool: <span class="hljs-number">136314880</span>, queueCapacity: &#123;&#125;, boosLoop: &#123;&#125;, workerLoop: &#123;&#125;, maxInboundMessageSize: &#123;&#125;<br><span class="hljs-attribute">2024</span>-<span class="hljs-number">09</span>-<span class="hljs-number">17</span> <span class="hljs-number">20</span>:<span class="hljs-number">12</span>:<span class="hljs-number">43</span> INFO main - Server is running in TLS permissive mode<br><span class="hljs-attribute">2024</span>-<span class="hljs-number">09</span>-<span class="hljs-number">17</span> <span class="hljs-number">20</span>:<span class="hljs-number">12</span>:<span class="hljs-number">43</span> INFO main - Using OpenSSL provider<br><span class="hljs-attribute">2024</span>-<span class="hljs-number">09</span>-<span class="hljs-number">17</span> <span class="hljs-number">20</span>:<span class="hljs-number">12</span>:<span class="hljs-number">43</span> INFO main - SSLContext created for server<br><span class="hljs-attribute">2024</span>-<span class="hljs-number">09</span>-<span class="hljs-number">17</span> <span class="hljs-number">20</span>:<span class="hljs-number">12</span>:<span class="hljs-number">43</span> INFO main - The broker[<span class="hljs-number">9</span>cb3449f88cb, <span class="hljs-number">127.0.0.1:10911</span>] boot success. serializeType=JSON and name server is rmqnamesrv:<span class="hljs-number">9876</span><br><span class="hljs-attribute">2024</span>-<span class="hljs-number">09</span>-<span class="hljs-number">17</span> <span class="hljs-number">20</span>:<span class="hljs-number">12</span>:<span class="hljs-number">43</span> INFO main - user specified name server address: rmqnamesrv:<span class="hljs-number">9876</span><br><span class="hljs-attribute">2024</span>-<span class="hljs-number">09</span>-<span class="hljs-number">17</span> <span class="hljs-number">20</span>:<span class="hljs-number">12</span>:<span class="hljs-number">43</span> INFO main - grpc server start successfully.<br><span class="hljs-attribute">2024</span>-<span class="hljs-number">09</span>-<span class="hljs-number">17</span> <span class="hljs-number">20</span>:<span class="hljs-number">12</span>:<span class="hljs-number">43</span> INFO main - Tue Sep <span class="hljs-number">17</span> <span class="hljs-number">12</span>:<span class="hljs-number">12</span>:<span class="hljs-number">43</span> UTC <span class="hljs-number">2024</span> rocketmq-proxy startup successfully<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;于此，rocketmq就部署完成了。<br></p><h4 id="RocketMQ的使用"><a href="#RocketMQ的使用" class="headerlink" title="RocketMQ的使用"></a>RocketMQ的使用</h4><p>&emsp;&emsp;以java为例，于此提供一个基于rocketmq消息中间件进行收发的示例：<br><br>&emsp;&emsp;具体内容可参见：<a href="https://github.com/gagaducko/learning_demos/tree/main/rocketmq-demo">https://github.com/gagaducko/learning_demos/tree/main/rocketmq-demo</a><br><br>&emsp;&emsp;首先，要引入rocketmq的依赖：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.rocketmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;而后在properties中设置rocketmq的相关设置：<br></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">rocketmq.consumer.pull-batch-size</span>=<span class="hljs-number">10</span><br><span class="hljs-attr">rocketmq.name-server</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">186.1</span>:<span class="hljs-number">9876</span><br><span class="hljs-attr">rocketmq.producer.group</span>=rocketmq-msp_producer_group<br><span class="hljs-attr">rocketmq.producer.sendMessageTimeout</span>=<span class="hljs-number">10000</span><br><span class="hljs-attr">rocketmq.producer.retryTimesWhenSendFailed</span>=<span class="hljs-number">2</span><br><span class="hljs-attr">rocketmq.producer.retryTimesWhenSendAsyncFailed</span>=<span class="hljs-number">2</span><br><span class="hljs-attr">rocketmq.producer.maxMessageSize</span>=<span class="hljs-number">4096</span><br><span class="hljs-attr">rocketmq.producer.compressMessageBodyThreshold</span>=<span class="hljs-number">4096</span><br><span class="hljs-attr">rocketmq.producer.retryNextServer</span>=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;需要注意的是，在spring boot 3+，当使用RocketMQTemplate时，需要配置RocketMQTemplate bean，不配置会出现问题。<br></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RocketMqConfig</span> &#123;<br><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;rocketmq.producer.group&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String producerGroup;<br><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;rocketmq.name-server&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String nameServer;<br><br>    <span class="hljs-meta">@Bean(<span class="hljs-string">&quot;RocketMqTemplate&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> RocketMQTemplate rocketMqTemplate()&#123;<br>        RocketMQTemplate rocketMqTemplate = new RocketMQTemplate();<br>        DefaultMQProducer defaultMqProducer = new DefaultMQProducer();<br>        defaultMqProducer.setProducerGroup(producerGroup);<br>        defaultMqProducer.setNamesrvAddr(nameServer);<br>        rocketMqTemplate.setProducer(defaultMqProducer);<br>        <span class="hljs-keyword">return</span> rocketMqTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在此基础上，现在实现一个生产者。<br></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RocketmqProducer</span> &#123;<br><br>    <span class="hljs-comment">// 生产者的组名</span><br>    <span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;$&#123;rocketmq.producer.group&#125;&quot;</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> producerGroup;<br><br>    <span class="hljs-comment">// name server ip host</span><br>    <span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;$&#123;rocketmq.name-server&#125;&quot;</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> nameServer;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">DefaultMQProducer</span> producer;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">defaultMQProducer</span>(<span class="hljs-params"></span>) &#123;<br><br>        <span class="hljs-comment">//生产者的组名</span><br>        producer= <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(producerGroup);<br>        <span class="hljs-comment">//指定NameServer地址，多个地址以 ; 隔开</span><br>        producer.<span class="hljs-title function_">setNamesrvAddr</span>(nameServer);<br>        producer.<span class="hljs-title function_">setVipChannelEnabled</span>(<span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            producer.<span class="hljs-title function_">start</span>();<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">MQClientException</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">send</span>(<span class="hljs-title class_">String</span> topic, <span class="hljs-title class_">String</span> tags, <span class="hljs-title class_">String</span> body) throws <span class="hljs-title class_">InterruptedException</span>, <span class="hljs-title class_">RemotingException</span>, <span class="hljs-title class_">MQClientException</span>, <span class="hljs-title class_">MQBrokerException</span>, <span class="hljs-title class_">UnsupportedEncodingException</span> &#123;<br>        <span class="hljs-title class_">Message</span> message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(topic, tags, body.<span class="hljs-title function_">getBytes</span>(<span class="hljs-title class_">RemotingHelper</span>.<span class="hljs-property">DEFAULT_CHARSET</span>));<br>        <span class="hljs-title class_">StopWatch</span> stop = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<br>        stop.<span class="hljs-title function_">start</span>();<br>        <span class="hljs-title class_">SendResult</span> result = producer.<span class="hljs-title function_">send</span>(message);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;发送响应：MsgId:&quot;</span> + result.<span class="hljs-title function_">getMsgId</span>() + <span class="hljs-string">&quot;，发送状态:&quot;</span> + result.<span class="hljs-title function_">getSendStatus</span>());<br>        stop.<span class="hljs-title function_">stop</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;\&quot;MsgId\&quot;:\&quot;&quot;</span>+result.<span class="hljs-title function_">getMsgId</span>()+<span class="hljs-string">&quot;\&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;而后实现一个消费者：<br></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RocketmqConsumer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br><br>    <span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;$&#123;rocketmq.name-server&#125;&quot;</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> nameServer;<br><br>    <span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;$&#123;rocketmq.producer.group&#125;&quot;</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> defaultProducerGroup;<br><br>    <span class="hljs-comment">// 初始化监听信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">messageListener</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">// default consumer group</span><br>        <span class="hljs-title class_">DefaultMQPushConsumer</span> consumer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(defaultProducerGroup);<br>        <span class="hljs-comment">// set name server</span><br>        consumer.<span class="hljs-title function_">setNamesrvAddr</span>(nameServer);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 订阅PushTopic下Tag为push的消息,都订阅消息</span><br>            consumer.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&quot;PushTopic&quot;</span>, <span class="hljs-string">&quot;push&quot;</span>);<br>            consumer.<span class="hljs-title function_">setConsumeFromWhere</span>(<span class="hljs-title class_">ConsumeFromWhere</span>.<span class="hljs-property">CONSUME_FROM_FIRST_OFFSET</span>);<br>            consumer.<span class="hljs-title function_">setConsumeMessageBatchMaxSize</span>(<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// 监听</span><br>            consumer.<span class="hljs-title function_">registerMessageListener</span>((<span class="hljs-title class_">MessageListenerConcurrently</span>) (msgs, context) -&gt; &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-title class_">Message</span> <span class="hljs-attr">msg</span>:msgs)&#123;<br>                    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;消费者接收到了消息：&quot;</span>+ <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(msg.<span class="hljs-title function_">getBody</span>()));<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title class_">ConsumeConcurrentlyStatus</span>.<span class="hljs-property">CONSUME_SUCCESS</span>;<br>            &#125;);<br>            consumer.<span class="hljs-title function_">start</span>();<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-title class_">String</span>... args) throws <span class="hljs-title class_">Exception</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">messageListener</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;于此，以PushTopic为topic，push为tag作为一个例子的消息，做一个用于测试的接口：<br></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@PostMapping</span> (<span class="hljs-string">&quot;/push&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">pushMsg</span>(<span class="hljs-params"><span class="hljs-meta">@RequestParam</span>(<span class="hljs-string">&quot;topic&quot;</span>) <span class="hljs-title class_">String</span> topic,</span><br><span class="hljs-params">                      <span class="hljs-meta">@RequestParam</span>(<span class="hljs-string">&quot;tag&quot;</span>) <span class="hljs-title class_">String</span> tag,</span><br><span class="hljs-params">                      <span class="hljs-meta">@RequestParam</span>(<span class="hljs-string">&quot;message&quot;</span>) <span class="hljs-title class_">String</span> message</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> rocketmqProducer.<span class="hljs-title function_">send</span>(topic, tag, message);<br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">InterruptedException</span> | <span class="hljs-title class_">RemotingException</span> | <span class="hljs-title class_">MQClientException</span> | <span class="hljs-title class_">MQBrokerException</span> | <span class="hljs-title class_">UnsupportedEncodingException</span> e) &#123;<br>        e.<span class="hljs-title function_">printStackTrace</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ERROR&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;项目启动后，调用接口localhost:8080&#x2F;push?topic&#x3D;PushTopic&amp;tag&#x3D;push&amp;message&#x3D;”test message6”<br><br>&emsp;&emsp;生产者产生消息并被消息者消费如下。<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%BE%AE%E6%9C%8D%E5%8A%A1_%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq%E6%94%B6%E5%8F%91%E6%B6%88%E6%81%AF.png" alt="RocketMQ的生产与消费" title="RocketMQ的生产与消费"><br>&emsp;&emsp;如此，便是一个简单的基于rocketmq的示例。<br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 微服务学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> 消息中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—微服务—技术栈实践(9)—日志管理</title>
      <link href="/2024/09/16/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-9-%E2%80%94%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/"/>
      <url>/2024/09/16/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-9-%E2%80%94%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><p>&emsp;&emsp;微服务一般处于分布式环境下，在该架构中，每个服务都是独立的，分布在不同的节点或容器中，通过日志管理，可以帮助开发者和运维人员收集分散在不同微服务中的日志数据，通过集中化的工具进行汇总和分析，由此提高整个系统的可观测性。<br><br>&emsp;&emsp;常用的日志管理方案有ELK Stack，或可通过influxDB类时序数据库对日志进行管理。<br></p><h2 id="ELK解决方案"><a href="#ELK解决方案" class="headerlink" title="ELK解决方案"></a>ELK解决方案</h2><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><p>&emsp;&emsp;Elasticsearch是一个分布式搜索和分析引擎，可以用于存储、搜索、分析日志数据。它具有高可用性、可扩展性和易用性等特点，可以轻松地与各种日志收集工具集成，如Logstash、Fluentd等。<br></p><h3 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h3><p>&emsp;&emsp;Logstash是一个开源的数据收集引擎，可以用于收集、处理和转发日志数据。它可以与各种数据源集成，如文件、网络、数据库等，并将数据发送到Elasticsearch或其他存储系统。<br></p><h3 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h3><p>&emsp;&emsp;Kibana是一个开源的数据可视化工具，可以用于分析和可视化Elasticsearch中的日志数据。它提供了丰富的图表、仪表板和搜索功能，可以帮助开发者和运维人员更好地理解日志数据。<br></p><h3 id="ELK-Stack的部署"><a href="#ELK-Stack的部署" class="headerlink" title="ELK Stack的部署"></a>ELK Stack的部署</h3><p>&emsp;&emsp;ELK Stack的部署可以通过Docker容器化部署，也可以通过Kubernetes进行部署。具体部署方式可以参考官方文档或相关教程。<br><br>&emsp;&emsp;此处以容器化部署ELK 7.14.0版本为例。<br><br>&emsp;&emsp;首先，需要下载对应版本的容器镜像：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull elastic/elasticsearch:<span class="hljs-number">7</span>.<span class="hljs-number">14</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull elastic/kibana:<span class="hljs-number">7</span>.<span class="hljs-number">14</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull elastic/logstash:<span class="hljs-number">7</span>.<span class="hljs-number">14</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;对于es来说，首先,创建挂载目录并赋予权限：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /data/elk/es/&#123;config,data,logs,plugins&#125;<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R 1000:1000 /data/elk/es<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在此基础上，创建配置文件：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /data/elk/es/config<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">touch</span> elasticsearch.yml<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;配置内容为：<br></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cluster<span class="hljs-selector-class">.name</span>: <span class="hljs-string">&quot;my-es&quot;</span><br>network<span class="hljs-selector-class">.host</span>: <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br>http<span class="hljs-selector-class">.port</span>: <span class="hljs-number">9200</span><br>http<span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.enabled</span>: true<br>http<span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.allow-origin</span>: <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;随后运行：<br></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -it  -d \<br>-p <span class="hljs-number">9200</span>:<span class="hljs-number">9200</span> \<br>-p <span class="hljs-number">9300</span>:<span class="hljs-number">9300</span> \<br>--name es01 \<br>-e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms4g -Xmx4g&quot;</span> \<br>-e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> \<br>--restart=always \<br>-v <span class="hljs-regexp">/data/</span>elk<span class="hljs-regexp">/es/</span>config<span class="hljs-regexp">/elasticsearch.yml:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch<span class="hljs-regexp">/config/</span>elasticsearch.yml \<br>-v <span class="hljs-regexp">/data/</span>elk<span class="hljs-regexp">/es/</span>data:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>data \<br>-v <span class="hljs-regexp">/data/</span>elk<span class="hljs-regexp">/es/</span>logs:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>logs \<br>-v <span class="hljs-regexp">/data/</span>elk<span class="hljs-regexp">/es/</span>plugins:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>plugins \<br>elasticsearch:<span class="hljs-number">7.14</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;对于kibana来说，同理，首先创建目录及配置文件用于挂在：<br></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/data/</span>elk<span class="hljs-regexp">/kibana/</span><br>vim <span class="hljs-regexp">/data/</span>elk<span class="hljs-regexp">/kibana/</span>kibana.yml<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;配置文件配置如下：<br></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#Default</span> Kibana configuration <span class="hljs-keyword">for</span> docker target<br>server<span class="hljs-selector-class">.name</span>: kibana<br>server<span class="hljs-selector-class">.host</span>: <span class="hljs-string">&quot;0&quot;</span><br>elasticsearch<span class="hljs-selector-class">.hosts</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;http://172.17.0.2:9200&quot;</span>]</span><br>xpack<span class="hljs-selector-class">.monitoring</span><span class="hljs-selector-class">.ui</span><span class="hljs-selector-class">.container</span><span class="hljs-selector-class">.elasticsearch</span><span class="hljs-selector-class">.enabled</span>: true<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;随后运行：<br></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript">docker run -<span class="hljs-literal">it</span> -d <span class="hljs-string">\</span><br>-p <span class="hljs-number">5601</span>:<span class="hljs-number">5601</span> <span class="hljs-string">\</span><br>--name kibana <span class="hljs-string">\</span><br>--restart=always <span class="hljs-string">\</span><br>-v /data/elk/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml <span class="hljs-string">\</span><br>kibana:<span class="hljs-number">7.14</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;至此，elasticsearch和kibana的docker容器已经启动，可以通过浏览器访问：<br></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//localhost:5601</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在此基础下，进一步安装logstash用于收集日志：<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -d <span class="hljs-attribute">--name</span>=logstash logstash:7.14.0<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;先运行一个logstash的容器。<br><br>&emsp;&emsp;把配置文件从容器拷贝出来：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> docker <span class="hljs-built_in">cp</span> logstash:/usr/share/logstash /data/elk<br><br><span class="hljs-built_in">cd</span> /data/elk/<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> 777 logstash -R<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;接着配置logstash的配置文件：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /data/elk/logstash/conf.d<br><span class="hljs-built_in">cd</span> /data/elk/logstash/conf.d<br><span class="hljs-built_in">sudo</span> vim logstash.conf<br><br><span class="hljs-built_in">cd</span> /data/elk/logstash/config<br><span class="hljs-built_in">sudo</span> vim logstash.yml<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;logstash.conf文件配置如下：<br></p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">input</span> &#123;<br>  tcp &#123;<br>    <span class="hljs-attr">mode</span> =&gt; <span class="hljs-string">&quot;server&quot;</span><br>    <span class="hljs-attr">host</span> =&gt; <span class="hljs-string">&quot;0.0.0.0&quot;</span><br>    <span class="hljs-attr">port</span> =&gt; <span class="hljs-number">5044</span><br>    <span class="hljs-attr">codec</span> =&gt; json_lines<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">filter</span> &#123;<br><br><br><br>  grok &#123;<br>      <span class="hljs-attr">match</span> =&gt; [ <span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;(?&lt;logTime&gt;\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;\s\d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;.\d&#123;3&#125;)\s+\[(?&lt;thread&gt;.*)\]\s+(?&lt;level&gt;\w*)\s&#123;1,2&#125;+(?&lt;class&gt;\S*)\s+-\s+(?&lt;content&gt;.*)\s*&quot;</span>]<br>      <span class="hljs-attr">match</span> =&gt; [ <span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;(?&lt;logTime&gt;\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;\s\d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;.\d&#123;3&#125;)\s&#123;1,2&#125;+(?&lt;level&gt;\w*)\s&#123;1,2&#125;+.\s---+\s\[(?&lt;thread&gt;.*)\]+\s(?&lt;class&gt;\S*)\s*:+\s(?&lt;content&gt;.*)\s*&quot;</span>]<br>      <span class="hljs-attr">match</span> =&gt; [<br>           <span class="hljs-string">&quot;source&quot;</span>, <span class="hljs-string">&quot;/home/passjava/logs/(?&lt;logName&gt;\w+)/.*.log&quot;</span><br>       ]<br>      <span class="hljs-attr">overwrite</span> =&gt; [ <span class="hljs-string">&quot;source&quot;</span>]<br>      <span class="hljs-attr">break_on_match</span> =&gt; <span class="hljs-keyword">false</span><br>  &#125;<br>    <span class="hljs-keyword">mutate</span> &#123;<br>    <span class="hljs-attr">convert</span> =&gt; &#123;<br>      <span class="hljs-string">&quot;bytes&quot;</span> =&gt; <span class="hljs-string">&quot;integer&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">remove_field</span> =&gt; [<span class="hljs-string">&quot;agent&quot;</span>,<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;@version&quot;</span>, <span class="hljs-string">&quot;tags&quot;</span>, <span class="hljs-string">&quot;ecs&quot;</span>, <span class="hljs-string">&quot;_score&quot;</span>, <span class="hljs-string">&quot;input&quot;</span>, <span class="hljs-string">&quot;[log][offset]&quot;</span>]<br>  &#125;<br><br>  <span class="hljs-keyword">useragent</span> &#123;<br>    <span class="hljs-attr">source</span> =&gt; <span class="hljs-string">&quot;user_agent&quot;</span><br>    <span class="hljs-attr">target</span> =&gt; <span class="hljs-string">&quot;useragent&quot;</span><br>  &#125;<br><br>  <span class="hljs-keyword">date</span> &#123;<br>    <span class="hljs-attr">match</span> =&gt; [<span class="hljs-string">&quot;logTime&quot;</span>, <span class="hljs-string">&quot;MMM d HH:mm:ss&quot;</span>, <span class="hljs-string">&quot;MMM dd HH:mm:ss&quot;</span>, <span class="hljs-string">&quot;ISO8601&quot;</span>]<br>    <span class="hljs-attr">timezone</span> =&gt; <span class="hljs-string">&quot;Asia/Shanghai&quot;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">output</span> &#123;<br>  stdout &#123; &#125;<br><br>  <span class="hljs-keyword">elasticsearch</span> &#123;<br>    <span class="hljs-attr">hosts</span> =&gt; [<span class="hljs-string">&quot;192.168.186.1:9200&quot;</span>]<br>    <span class="hljs-attr">index</span> =&gt; <span class="hljs-string">&quot;gagaduck_log&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;logstash.yml文件配置如下：<br></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 指定管道配置的目录，在此目录下的所有管道配置文件都将被 logstash 读取，除管道配置外，不要放任何文件</span><br>path.config: <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/logstash/</span>conf.d/*.conf<br><span class="hljs-comment"># logstash 日志目录位置，默认为 logstash 路径下的 logs</span><br>path.logs: <span class="hljs-regexp">/var/</span>log/logstash<br>http.host: <span class="hljs-string">&quot;0.0.0.0&quot;</span><br>xpack.monitoring.elasticsearch.hosts: [ <span class="hljs-string">&quot;http://192.168.186.1:9200&quot;</span> ]<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;删除logstash容器并重启启动如下：<br></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">docker rm -f logstash<br><span class="hljs-comment"># 启动 logstash 容器</span><br>docker run -<span class="hljs-literal">it</span> -d <span class="hljs-string">\</span><br>-p <span class="hljs-number">5044</span>:<span class="hljs-number">5044</span> <span class="hljs-string">\</span><br>--name logstash <span class="hljs-string">\</span><br>--restart=always <span class="hljs-string">\</span><br>-v /data/elk/logstash:/usr/share/logstash <span class="hljs-string">\</span><br>logstash:<span class="hljs-number">7.14</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;由此，一个简单的ELK组件便部署完成了。<br></p><h3 id="ELK-Stack的使用"><a href="#ELK-Stack的使用" class="headerlink" title="ELK Stack的使用"></a>ELK Stack的使用</h3><p>&emsp;&emsp;在部署完成后，便可以使用ELK Stack进行日志管理了，在应用中，只需要将日志输出到标准输出即可，logstash会自动将日志收集到Elasticsearch中，并使用Kibana进行可视化展示。<br><br>&emsp;&emsp;在应用中，只需要将日志输出到标准输出即可，logstash会自动将日志收集到Elasticsearch中，并使用Kibana进行可视化展示。<br><br>&emsp;&emsp;以一个spring boot的应用为例子：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.logstash.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;首先，加入logstash的依赖，并在resource目录下配置合适的logback.xml:<br></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/springframework/boot/logging/logback/base.xml&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;springAppName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;system-service&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOGSTASH&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">destination</span>&gt;</span>192.168.186.1:5044<span class="hljs-tag">&lt;/<span class="hljs-name">destination</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                 <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">providers</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">timestamp</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">timeZone</span>&gt;</span>UTC<span class="hljs-tag">&lt;/<span class="hljs-name">timeZone</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">timestamp</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span></span><br><span class="language-xml">                        </span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">                        &quot;logLevel&quot;: &quot;%level&quot;,</span><br><span class="hljs-template-variable">                        &quot;serviceName&quot;: &quot;$&#123;springAppName:-&#125;</span><span class="language-xml">&quot;,</span><br><span class="language-xml">                        &quot;pid&quot;: &quot;$</span><span class="hljs-template-variable">&#123;PID:-&#125;</span><span class="language-xml">&quot;,</span><br><span class="language-xml">                        &quot;thread&quot;: &quot;%thread&quot;,</span><br><span class="language-xml">                        &quot;class&quot;: &quot;%logger</span><span class="hljs-template-variable">&#123;40&#125;</span><span class="language-xml">&quot;,</span><br><span class="language-xml">                        &quot;rest&quot;: &quot;%message&quot;</span><br><span class="language-xml">                        &#125;</span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">providers</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;LOGSTASH&quot;</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在ELK的基础上，实际还可以增加filebeat，<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker pull elastic/filebeat:7.14.0<br>docker <span class="hljs-built_in">run</span> -d <span class="hljs-attribute">--name</span>=filebeat elastic/filebeat:7.14.0<br>……<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;通过filebeat实现对于日志文件收集的需要。<br><br>&emsp;&emsp;当logstash把日志收集同步到es之后，就会自动在es中创建这样的一个搜索，那么，到kibana可视化控制台中创建一个对应的索引来创建并查看日志即可。<br><br>&emsp;&emsp;首先进入kibana控制台（Management），找到index patterns这个设置，创建索引。<br><br>&emsp;&emsp;填写名字，其实该索引会自动出来，若未出来，那么需要回去看看logstash的日志等内容排查一下故障情况。<br><br>&emsp;&emsp;随后便可以在kibana的discard处对日志进行查看分析等处理操作。参见<a href="https://github.com/gagaducko/learning_demos/tree/main/system-service">https://github.com/gagaducko/learning_demos/tree/main/system-service</a><br></p><h2 id="基于时序数据库实现的日志管理"><a href="#基于时序数据库实现的日志管理" class="headerlink" title="基于时序数据库实现的日志管理"></a>基于时序数据库实现的日志管理</h2><h3 id="influxdb"><a href="#influxdb" class="headerlink" title="influxdb"></a>influxdb</h3><p>&emsp;&emsp;InfluxDB是一个开源的时序数据库，使用Go语言编写，由InfluxData公司开发和维护。它被设计用来处理高写入和查询负载，并且可以很好地扩展到多个节点。InfluxDB非常适合用于存储和查询时间序列数据，如服务器指标、应用程序性能监控数据、物联网设备数据等。<br><br>&emsp;&emsp;通过docker可以对influxdb做简单的安装：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull influxdb<br><span class="hljs-attribute">docker</span> run -d -p <span class="hljs-number">8086</span>:<span class="hljs-number">8086</span> --name my_influxdb influxdb<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;配置好后记录下API Token如图：<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%BE%AE%E6%9C%8D%E5%8A%A1_%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/influxdb.png" alt="influx初始化" title="influx初始化"><br>&emsp;&emsp;随后便可进行编码，参见<a href="https://github.com/gagaducko/learning_demos/tree/main/influxdb-demo">https://github.com/gagaducko/learning_demos/tree/main/influxdb-demo</a><br><br>&emsp;&emsp;首先，要添加influxdb依赖：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.influxdb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>influxdb-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;随后在配置文件中，对influxdb的连接进行配置如下：<br></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">spring.application.name</span>=influxdb-demo<br><span class="hljs-attr">influxdb.url</span>=http://localhost:<span class="hljs-number">8086</span><br><span class="hljs-attr">influxdb.username</span>=gagaduck<br><span class="hljs-attr">influxdb.password</span>=gagaduck<br><span class="hljs-attr">influxdb.database</span>=log_database<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;创建一个配置类InfluxDBConfig：<br></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InfluxDBConfig</span> &#123;<br><br><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;influxdb.url&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String influxDbUrl;<br><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;influxdb.username&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;influxdb.password&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;influxdb.database&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String databaseName;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> InfluxDB influxDB() &#123;<br><br>        <span class="hljs-keyword">return</span> InfluxDBFactory.connect(influxDbUrl, username, password);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> void createDatabase() &#123;<br><br>        InfluxDB influxDB = influxDB();<br>        influxDB.query(new Query(<span class="hljs-string">&quot;CREATE DATABASE &quot;</span> + databaseName));<br>        influxDB.setDatabase(databaseName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;需要注意的是，上面的是influxdb1.X的配置，下面是influxdb2.X的配置：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.influxdb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>influxdb-client-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">influxdb.url</span>=http://localhost:<span class="hljs-number">8086</span><br><span class="hljs-attr">influxdb.token</span>=yourAPIToken<br><span class="hljs-attr">influxdb.organization</span>=yourOrganization<br><span class="hljs-attr">influxdb.bucket</span>=yourBucket<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在此基础上，进行进一步的开发：<br></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// 增加日志记录<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> addLog(String logMessage, String <span class="hljs-keyword">level</span>) &#123;<br>    WriteApiBlocking writeApi = influxDBClient.getWriteApiBlocking();<br>    <span class="hljs-type">Point</span> <span class="hljs-type">point</span> = <span class="hljs-type">Point</span><br>            .measurement(&quot;logs&quot;)<br>            .addTag(&quot;level&quot;, <span class="hljs-keyword">level</span>)<br>            .addField(&quot;logMessage&quot;, logMessage)<br>            .time(Instant.now(), WritePrecision.NS);<br>    writeApi.writePoint(bucket, org, <span class="hljs-type">point</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;例如新增数据。<br></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> addLog(String logMessage, String <span class="hljs-keyword">level</span>) &#123;<br>    WriteApiBlocking writeApi = influxDBClient.getWriteApiBlocking();<br>    <span class="hljs-type">Point</span> <span class="hljs-type">point</span> = <span class="hljs-type">Point</span><br>            .measurement(&quot;logs&quot;)<br>            .addTag(&quot;level&quot;, <span class="hljs-keyword">level</span>)<br>            .addField(&quot;logMessage&quot;, logMessage)<br>            .time(Instant.now(), WritePrecision.NS);<br>    writeApi.writePoint(bucket, org, <span class="hljs-type">point</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%BE%AE%E6%9C%8D%E5%8A%A1_%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/influxdb_add.png" alt="influx添加数据后" title="influx添加数据后"><br>&emsp;&emsp;再比如查找数据：<br></p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-comment">// 查询所有日志</span><br><span class="hljs-variable">public</span> <span class="hljs-title class_">List</span><span class="hljs-operator">&lt;</span><span class="hljs-title class_">LogEntry</span><span class="hljs-operator">&gt;</span> <span class="hljs-title function_">getAllLogs</span>() &#123;<br>    <span class="hljs-title class_">List</span><span class="hljs-operator">&lt;</span><span class="hljs-title class_">LogEntry</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">logEntries</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-title class_">ArrayList</span><span class="hljs-operator">&lt;</span><span class="hljs-operator">&gt;</span>();<br>    <span class="hljs-comment">// InfluxDB 查询语句，查询1h内的日志数据</span><br>    <span class="hljs-comment">// 构建 Flux 查询，加入对 _measurement 和 _field 的过滤</span><br>    <span class="hljs-title class_">String</span> <span class="hljs-variable">fluxQuery</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;from(bucket: <span class="hljs-char escape_">\&quot;</span>&quot;</span> <span class="hljs-operator">+</span> <span class="hljs-variable">bucket</span> <span class="hljs-operator">+</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\&quot;</span>)&quot;</span> <span class="hljs-operator">+</span><br>            <span class="hljs-string">&quot; |&gt; range(start: -1h)&quot;</span> <span class="hljs-operator">+</span>  <span class="hljs-comment">// 查询过去 1 小时的数据</span><br>            <span class="hljs-string">&quot; |&gt; filter(fn: (r) =&gt; r[<span class="hljs-char escape_">\&quot;</span>_measurement<span class="hljs-char escape_">\&quot;</span>] == <span class="hljs-char escape_">\&quot;</span>logs<span class="hljs-char escape_">\&quot;</span>)&quot;</span> <span class="hljs-operator">+</span>  <span class="hljs-comment">// 过滤 measurement 为 logs</span><br>            <span class="hljs-string">&quot; |&gt; filter(fn: (r) =&gt; r[<span class="hljs-char escape_">\&quot;</span>_field<span class="hljs-char escape_">\&quot;</span>] == <span class="hljs-char escape_">\&quot;</span>logMessage<span class="hljs-char escape_">\&quot;</span>)&quot;</span>;  <span class="hljs-comment">// 过滤 field 为 logMessage// 查询过去1小时的日志，可根据需求调整</span><br>    <span class="hljs-title class_">QueryApi</span> <span class="hljs-variable">queryApi</span> <span class="hljs-operator">=</span> influxDBClient.<span class="hljs-property">getQueryApi</span>();<br>    <span class="hljs-title class_">List</span><span class="hljs-operator">&lt;</span><span class="hljs-title class_">FluxTable</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">tables</span> <span class="hljs-operator">=</span> <span class="hljs-variable">queryApi</span>.<span class="hljs-property">query</span>(<span class="hljs-variable">fluxQuery</span>, <span class="hljs-variable">org</span>);<br>    <span class="hljs-comment">// 处理查询返回的数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-title class_">FluxTable</span> <span class="hljs-variable">table</span> : <span class="hljs-variable">tables</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-title class_">FluxRecord</span> <span class="hljs-variable">record</span> : <span class="hljs-variable">table</span>.<span class="hljs-property">getRecords</span>()) &#123;<br>            <span class="hljs-title class_">LogEntry</span> <span class="hljs-variable">logEntry</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-title class_">LogEntry</span>();<br>            <span class="hljs-title class_">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (<span class="hljs-title class_">String</span>) <span class="hljs-variable">record</span>.<span class="hljs-property">getValueByKey</span>(<span class="hljs-string">&quot;_value&quot;</span>);  <span class="hljs-comment">// 从InfluxDB获取日志消息</span><br>            <span class="hljs-title class_">String</span> <span class="hljs-variable">level</span> <span class="hljs-operator">=</span> (<span class="hljs-title class_">String</span>) <span class="hljs-variable">record</span>.<span class="hljs-property">getValueByKey</span>(<span class="hljs-string">&quot;level&quot;</span>);         <span class="hljs-comment">// 获取日志级别</span><br>            <span class="hljs-title class_">String</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> <span class="hljs-variable">record</span>.<span class="hljs-property">getTime</span>() <span class="hljs-operator">!=</span> <span class="hljs-literal">null</span> ? <span class="hljs-variable">record</span>.<span class="hljs-property">getTime</span>().<span class="hljs-property">toString</span>() : <span class="hljs-literal">null</span>; <span class="hljs-comment">// 获取时间戳</span><br>            <span class="hljs-comment">// 如果message和level不为空，则将其添加到logEntry</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">message</span> <span class="hljs-operator">!=</span> <span class="hljs-literal">null</span> <span class="hljs-operator">&amp;&amp;</span> <span class="hljs-variable">level</span> <span class="hljs-operator">!=</span> <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-variable">logEntry</span>.<span class="hljs-property">setMessage</span>(<span class="hljs-variable">message</span>);<br>                <span class="hljs-variable">logEntry</span>.<span class="hljs-property">setLevel</span>(<span class="hljs-variable">level</span>);<br>                <span class="hljs-variable">logEntry</span>.<span class="hljs-property">setTimestamp</span>(<span class="hljs-variable">timestamp</span>);<br>                <span class="hljs-variable">logEntries</span>.<span class="hljs-property">add</span>(<span class="hljs-variable">logEntry</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">logEntries</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%BE%AE%E6%9C%8D%E5%8A%A1_%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/influxdb_get.png" alt="influx查找" title="influx查找"><br>&emsp;&emsp;凡此种种，暂按不表。<br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 微服务学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> 日志管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—容器化技术(1)—docker的使用</title>
      <link href="/2024/09/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF-1-%E2%80%94docker%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/09/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF-1-%E2%80%94docker%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><p>&emsp;&emsp;以nginx为例：<br><br>&emsp;&emsp;搜索镜像：<br></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker search nginx</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;拉取镜像：<br></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker pull nginx</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;查看所有镜像：<br></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;导出镜像：<br></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">docker <span class="hljs-keyword">save</span> -o nginx.tar nginx:latest<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;导入镜像：<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker load -<span class="hljs-selector-tag">i</span> nginx<span class="hljs-selector-class">.tar</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;删除镜像：<br></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> rmi nginx:latest<br></code></pre></td></tr></table></figure><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><p>&emsp;&emsp;同样以nginx为例，需要注意的是，docker容器有三个状态，分别是运行、暂停和停止。<br><br>&emsp;&emsp;容器运行：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d --name nginx01 -p <span class="hljs-number">8080</span>:<span class="hljs-number">80</span> nginx:latest<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;容器暂停：<br></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">docker <span class="hljs-keyword">pause</span> nginx01<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;容器从暂停到恢复运行：<br></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> unpause nginx01<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;停止一个容器：<br></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">docker stop nginx01<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;启动一个容器：<br></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker <span class="hljs-literal">start</span> nginx01<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;重启一个容器：<br></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">docker restart <span class="hljs-symbol">nginx01</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;删除一个容器：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">rm</span> nginx01<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;进入一个容器：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it nginx01 /bin/bash<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;查看容器日志：<br></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">docker logs <span class="hljs-symbol">nginx01</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;查看容器日志tail1000行：<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker logs nginx01 <span class="hljs-attribute">--tail</span>=1000<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;查看容器内进程：<br></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">docker <span class="hljs-built_in">top</span> nginx01<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;查看容器详细信息：<br></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">docker <span class="hljs-keyword">inspect</span> nginx01<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;查看容器内文件：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">cp</span> nginx01:/etc/nginx/nginx.conf /home/nginx.conf<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;查看容器内端口映射：<br></p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">docker</span> <span class="hljs-keyword">port</span> nginx01<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;查看容器内网络：<br></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker network inspect bridge</span><br></code></pre></td></tr></table></figure><h2 id="数据卷操作"><a href="#数据卷操作" class="headerlink" title="数据卷操作"></a>数据卷操作</h2><p>&emsp;&emsp;数据和容器最好是解耦的，这就需要用到数据卷了。<br><br>&emsp;&emsp;数据卷（volume） 是一个虚拟目录，指向宿主机文件系统中的某个目录。一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。<br><br>&emsp;&emsp;数据卷的基本操作中，创建一个数据卷：<br></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">docker <span class="hljs-built_in">volume</span> <span class="hljs-keyword">create</span> nginx_volume<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;显示所有数据卷：<br></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">volume</span><span class="language-bash"> <span class="hljs-built_in">ls</span></span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;删除未使用的数据卷：<br></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">volume</span><span class="language-bash"> prune</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;删除指定数据卷：<br></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">volume</span><span class="language-bash"> <span class="hljs-built_in">rm</span> nginx_volume</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;查看数据卷详细信息：<br></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">volume</span><span class="language-bash"> inspect nginx_volume</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;挂载数据卷到容器：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> --name nginx02 -v nginx_volume:/etc/nginx nginx<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;查看数据卷挂载信息：<br></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">docker <span class="hljs-keyword">inspect</span> nginx02<br></code></pre></td></tr></table></figure><h2 id="Dockerfile自定义镜像"><a href="#Dockerfile自定义镜像" class="headerlink" title="Dockerfile自定义镜像"></a>Dockerfile自定义镜像</h2><p>&emsp;&emsp;常见的镜像在DockerHub就能找到，但是对于自己写的项目，需要通过dockerfile来打包镜像。<br><br>&emsp;&emsp;首先，要打包镜像，需要知道镜像的结构。<br><br>&emsp;&emsp;镜像包括应用程序、系统函数库、环境、配置和对应的依赖。在此不详述。<br><br>&emsp;&emsp;构建自定义的镜像时，并不需要一个个文件去拷贝，打包。只需要通过一个file告诉docker，需要哪些基础镜像，拷贝哪些文件，安装什么依赖，启动脚本怎么样，就可以构建镜像，这个file就是dockerfile。<br></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">// <span class="hljs-keyword">From</span>是指定基础镜像<br><span class="hljs-keyword">FROM</span> nginx:<span class="hljs-number">1.14</span>-alpine<br>// <span class="hljs-keyword">ENV</span>是设置环境变量，这个变量可以在后续指令中使用<br><span class="hljs-keyword">ENV</span> PATH /app/node-v10.<span class="hljs-number">16.3</span>-linux-x64/bin:$PATH<br>// <span class="hljs-keyword">COPY</span><span class="language-bash">是拷贝文件，把宿主机的文件拷贝到镜像中</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./app /app</span><br>// <span class="hljs-keyword">EXPOSE</span>是暴露端口，这个端口是容器运行时监听的端口<br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br>// <span class="hljs-keyword">RUN</span><span class="language-bash">是执行命令，安装依赖</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install</span><br>// <span class="hljs-keyword">CMD</span><span class="language-bash">是启动命令，容器启动时执行的命令，此外，也可以用ENTRYPOINT</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;npm start&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;构建镜像：<br></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">docker build -t my_nginx .<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;运行镜像：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> --name my_nginx my_nginx<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;总结一下，dockerfile其实就是一个有描述镜像构建过程的指令文件，第一行必须是FROM，由一个基础镜像来构建。<br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 容器化技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—微服务—技术栈实践(8)—链路追踪</title>
      <link href="/2024/09/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-8-%E2%80%94%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
      <url>/2024/09/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-8-%E2%80%94%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么需要链路追踪"><a href="#为什么需要链路追踪" class="headerlink" title="为什么需要链路追踪"></a>为什么需要链路追踪</h2><p>&emsp;&emsp;前文中有提到，微服务会把项目拆分，导致系统服务间的调用链路变得相当复杂，那么一个前端请求可能最终需要调用多个后端服务才能实现，当前端发起一个请求后，调用链路可能会非常复杂，比如A-&gt;B-&gt;C-&gt;D-&gt;B-&gt;C-&gt;O这样一条长长的链路才能获得所需要的调用，当整个请求出现不可用的时候，怎么知道是在哪一个服务端引发的问题呢？<br><br>&emsp;&emsp;很难确定，因此，跟进一个请求到底有哪些服务参与，参与的顺序怎么样，是非常关键的。<br><br>&emsp;&emsp;这也是为什么需要分布式链路追踪系统的原因。<br></p><h2 id="链路追踪技术选型"><a href="#链路追踪技术选型" class="headerlink" title="链路追踪技术选型"></a>链路追踪技术选型</h2><p>&emsp;&emsp;链路追踪其实已经不算是新兴的概念和技术了，可以使用的组件非常多，比如sleuth、sky walking、zipkin、阿里鹰眼等等。<br><br>&emsp;&amp;emsp这些组件有一个共同的名字就是APM工具，Application Performance Management，换言之就是应用性能监控工具。<br><br>&emsp;&emsp;于此，介绍两种解决方案，分别为zipkin+sleuth和skywalking。<br></p><h2 id="zipkin-sleuth"><a href="#zipkin-sleuth" class="headerlink" title="zipkin+sleuth"></a>zipkin+sleuth</h2><h3 id="什么是Zipkin和Sleuth"><a href="#什么是Zipkin和Sleuth" class="headerlink" title="什么是Zipkin和Sleuth"></a>什么是Zipkin和Sleuth</h3><p>&emsp;&emsp;Zipkin 和 Sleuth 是分布式追踪（Distributed Tracing）技术栈中的两个关键组件，通常用于监控微服务系统中跨服务的请求调用链。它们能够帮助开发者追踪请求在多个微服务中的流转路径，进而分析性能瓶颈和故障。它们的组合在 Spring Cloud 微服务架构中使用广泛。<br><br>&emsp;&emsp;Zipkin 是一个开源的分布式追踪系统，最初由 Twitter 开发。它负责收集、存储、分析和展示分布式系统中的调用链信息。通过收集来自不同微服务的追踪数据，Zipkin 可以帮助你了解一个请求的完整生命周期，精确地找到延迟较高的服务。<br><br>&emsp;&emsp;Sleuth 是 Spring Cloud 提供的一个分布式追踪解决方案，它为 Spring 应用提供了透明的追踪支持。Sleuth 与 Zipkin 搭配使用时，能够自动为请求生成追踪信息，并将这些追踪数据发送到 Zipkin。<br><br>&emsp;&emsp;换言之，zipkin负责收集和储存追踪信息（traces），并且提供web UI，提供REST API允许其他用户访问追踪数据，sleuth则是生成traceId等内容，并传播。<br><br>&emsp;&emsp;Sleuth 自动收集追踪数据，并将这些数据格式化为 Zipkin 所识别的格式。<br><br>&emsp;&emsp;Sleuth 将采集到的数据通过 HTTP 或者消息队列（如 Kafka）发送到 Zipkin 服务端。<br><br>&emsp;&emsp;Zipkin 收集到 Sleuth 发送的追踪数据后，存储并对其进行分析和可视化展示。<br></p><h3 id="Sleuth-Zipkin的使用"><a href="#Sleuth-Zipkin的使用" class="headerlink" title="Sleuth+Zipkin的使用"></a>Sleuth+Zipkin的使用</h3><p>&emsp;&emsp;首先，需要有Zipkin，以docker为例:<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d -p <span class="hljs-number">9411</span>:<span class="hljs-number">9411</span> openzipkin/zipkin<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;其次，需要在pom中加入spring cloud sleuth和zipkin的依赖：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring Cloud Sleuth --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Sleuth + Zipkin --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-sleuth-zipkin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在application中配置sleuth将追踪数据发送到zipkin服务器上：<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">zipkin:</span><br>    <span class="hljs-attr">base-url:</span> <span class="hljs-string">http://localhost:9411</span>  <span class="hljs-comment"># Zipkin 服务器的地址</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">sleuth:</span><br>    <span class="hljs-attr">sampler:</span><br>      <span class="hljs-attr">probability:</span> <span class="hljs-number">1.0</span>  <span class="hljs-comment"># 采样率，1.0 表示采集所有请求的追踪数据</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;启动 Spring Boot 应用后，Sleuth 会自动为每个请求生成追踪信息，并发送到 Zipkin 服务器。你可以在 Zipkin 的 Web UI 中查看到服务间的调用链。<br><br>&emsp;&emsp;需要注意的是，在较新的版本中，Spring Cloud Sleuth 项目被彻底移除了，被迁移到了 Micrometer 这些相关项目，此外，对代码也有一定的侵入性，好在比较轻量级。<br></p><h2 id="Skywalking"><a href="#Skywalking" class="headerlink" title="Skywalking"></a>Skywalking</h2><h3 id="什么是Skywalking"><a href="#什么是Skywalking" class="headerlink" title="什么是Skywalking"></a>什么是Skywalking</h3><p>&emsp;&emsp;Skywalking是属于Apache旗下的一个开源项目，提供分布式追踪、服务网格遥测分析、度量聚合和可视化一体化解决方案。<br><br>&emsp;&emsp;比起前面的zipkin等，这个东西较为新兴一点，有多种监控手段多语言自动探针，社区活跃支持告警，同时对代码的侵入性也非常小，只需要植入探针即可。<br></p><h3 id="Skywalking的组成"><a href="#Skywalking的组成" class="headerlink" title="Skywalking的组成"></a>Skywalking的组成</h3><p>&emsp;&emsp;skywalking可以看作有以下几个部分组成：<br></p><h4 id="探针（Agent）"><a href="#探针（Agent）" class="headerlink" title="探针（Agent）"></a>探针（Agent）</h4><p>&emsp;&emsp;探针是部署在应用程序中的轻量级组件，用于收集应用程序的运行数据。SkyWalking 提供多种语言的探针（如 Java、C++、Node.js 等），这些探针能够自动监控应用程序的性能，收集跟踪信息、指标数据等，并发送到后端的接收器。<br></p><h4 id="OAP服务"><a href="#OAP服务" class="headerlink" title="OAP服务"></a>OAP服务</h4><p>&emsp;&emsp;OAP 是 SkyWalking 的核心组件，负责接收来自探针的数据，进行分析和处理。这是整个系统的数据处理和存储中心。在数据处理上，接收探针发送的跟踪数据、日志数据和指标数据，进行存储、聚合和分析。<br><br>&emsp;&emsp;在可拓展性上，支持插件机制，用户可以根据需求扩展 SkyWalking 的功能，比如添加新的存储后端或自定义分析逻辑。<br><br>&emsp;&emsp;在储存系统上，支持多种存储后端，包括 Elasticsearch、H2、MySQL、TiDB 等，用于持久化监控数据。<br></p><h4 id="存储层"><a href="#存储层" class="headerlink" title="存储层"></a>存储层</h4><p>&emsp;&emsp;存储层是 SkyWalking 的数据持久化组件，负责存储 OAP 服务处理后的数据。SkyWalking 支持多种存储后端，包括 Elasticsearch、H2、MySQL、TiDB 等，用户可以根据需求选择合适的存储后端。<br></p><h4 id="UI界面"><a href="#UI界面" class="headerlink" title="UI界面"></a>UI界面</h4><p>&emsp;&emsp;UI界面是 SkyWalking 的用户界面，用于展示监控数据和指标。它提供了一个直观的界面，让用户可以查看和分析应用程序的性能，包括跟踪数据、服务拓扑、性能指标等。<br></p><h3 id="Skywalking的安装"><a href="#Skywalking的安装" class="headerlink" title="Skywalking的安装"></a>Skywalking的安装</h3><p>&emsp;&emsp;此处采用Docker的方式对Skywalking进行安装。<br><br>&emsp;&emsp;以S可以walking9.2.0的一个简单的安装启动方法为例，首先要拉去oap和ui：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull apache/skywalking-oap-server:<span class="hljs-number">9</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull apache/skywalking-ui:<span class="hljs-number">9</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在此基础上启动：<br></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 启动oap</span><br>docker run <span class="hljs-attr">--name</span> skywalking-oap -e TZ=Asia/Shanghai -<span class="hljs-selector-tag">p</span> <span class="hljs-number">12800</span>:<span class="hljs-number">12800</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">11800</span>:<span class="hljs-number">11800</span> <span class="hljs-attr">--restart</span> always -d apache/skywalking-oap-server:<span class="hljs-number">9.2</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 启动ui</span><br>docker run -d <span class="hljs-attr">--name</span> skywalking-ui \<br> <span class="hljs-attr">--restart</span>=always \<br> -e TZ=Asia/Shanghai \<br> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">8088</span>:<span class="hljs-number">8080</span> \<br> <span class="hljs-attr">--link</span> skywalking-oap:oap \<br> -e SW_OAP_ADDRESS=http:<span class="hljs-comment">//192.168.1.13:12800 \</span><br> apache/skywalking-ui:<span class="hljs-number">9.2</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;当然，也可以采用elasticsearch等来作为skywalking的储存工具，将默认的H2储存库进行修改。<br></p><h3 id="Skywalking的使用"><a href="#Skywalking的使用" class="headerlink" title="Skywalking的使用"></a>Skywalking的使用</h3><h4 id="Java中的使用"><a href="#Java中的使用" class="headerlink" title="Java中的使用"></a>Java中的使用</h4><p>&emsp;&emsp;在Java上的使用是很容易的。<br><br>&emsp;&emsp;首先，对于Jar包来说，首先，进入skywalking的官方发布界面下载完整的agent包，<a href="https://skywalking.apache.org/downloads/">https://skywalking.apache.org/downloads/</a><br><br>&emsp;&emsp;通常目录结构是这样的：<br></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">agent/<br>    ├── skywalking-agent.jar<br>    └── config/<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在启动 Java 应用时，使用 -javaagent 参数将 SkyWalking Agent 附加到应用中。假设你已经下载并解压了 SkyWalking Agent:<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">java -javaagent:/path/<span class="hljs-keyword">to</span>/skywalking-agent.jar -Dskywalking.agent.<span class="hljs-attribute">service_name</span>=your-service-name -Dskywalking.collector.<span class="hljs-attribute">backend_service</span>=skywalking-backend-ip:port -jar your-application.jar<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;-javaagent：指定 SkyWalking Agent JAR 的路径。<br><br>&emsp;&emsp;-Dskywalking.agent.service_name：设置服务名称，在 SkyWalking UI 中展示此服务的监控数据。<br><br>&emsp;&emsp;-Dskywalking.collector.backend_service：指定 SkyWalking OAP 服务的地址，通常是 skywalking-backend-ip:port。<br><br>&emsp;&emsp;此外，在config文件中，也可以根据一些设置修改默认的一些配置，比如日志级别，默认是INFO的。<br></p><h4 id="Python中的使用"><a href="#Python中的使用" class="headerlink" title="Python中的使用"></a>Python中的使用</h4><p>&emsp;&emsp;在python上的使用也是非常容易的。<br><br>&emsp;&emsp;首先，skywalking提供的有python的探针包：<br></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> apache-skywalking<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;随后，可以初始化探针在程序入口：<br></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">from</span> skywalking <span class="hljs-keyword">import</span> agent, config<br><br># 配置 SkyWalking<br>config.service_name = <span class="hljs-string">&#x27;your-python-service&#x27;</span><br>config.collector_address = <span class="hljs-string">&#x27;skywalking-backend-ip:port&#x27;</span><br><br># 启动 SkyWalking Agent<br>agent.start()<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;而后便可集成，两者均需要正确的OAP后端的IP和端口，来确保数据可以被正确的收集和展示。<br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 微服务学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> 链路追踪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—微服务—技术栈实践(7)——微服务的权限方案</title>
      <link href="/2024/09/14/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-7-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9D%83%E9%99%90%E6%96%B9%E6%A1%88/"/>
      <url>/2024/09/14/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-7-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9D%83%E9%99%90%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="微服务的权限方案"><a href="#微服务的权限方案" class="headerlink" title="微服务的权限方案"></a>微服务的权限方案</h2><p>&emsp;&emsp;应用拆分为微服务后，一个不可避免地问题就是权限问题，拆分后地各个微服务如何权限才能保证业务地正常进行，才能保证架构地简单、可维护，都是很重要地问题。<br><br>&emsp;&emsp;对于权限来说，有三个重要的词，一个是认证、一个是鉴权、一个是授权。<br><br>&emsp;&emsp;认证，就是说，当进入一个系统，比如输入账户密码后，后端登陆所做的事情，校验你的用户名、密码是否正确，是否能够登陆系统，这就是认证。<br><br>&emsp;&emsp;鉴权，则是不同的人登陆之后，所拥有的权限应该是不一样的，在进行操作，也就是前端URI发过来后，检验这个用户是否有操作这样一个资源的权限，就是鉴权。<br><br>&emsp;&emsp;授权就是授予用户或角色资源操作的权限，也包括第三方系统的授权，于此暂按不表。<br><br>&emsp;&emsp;对于一个微服务架构的应用来说，有着一个统一的入口网关，在实现认证授权上，和单机架构其实在具体的方式上没有区别，在鉴权上有一定区别。<br><br>&emsp;&emsp;鉴权在微服务中已经不集中在单体应用中了，被分散在了各个微服务中，因此，需要由网关来实现。<br><br>&emsp;&emsp;于此，介绍一种包含Spring Security, OAuth2.0, JWT, Gateway, JPA, Redis实现的微服务权限方案。<br></p><h2 id="微服务权限方案的实现"><a href="#微服务权限方案的实现" class="headerlink" title="微服务权限方案的实现"></a>微服务权限方案的实现</h2><h3 id="权限相关微服务的设计"><a href="#权限相关微服务的设计" class="headerlink" title="权限相关微服务的设计"></a>权限相关微服务的设计</h3><p>&emsp;&emsp;权限相关微服务包括三个微服务，即网关服务(gateway-service)、用户鉴权服务(user-auth-service)和用户管理服务(user-management-service)<br><br>&emsp;&emsp;网关服务(gateway-service)负责接收前端请求，进行认证和鉴权，将请求转发到具体的微服务中。<br><br>&emsp;&emsp;用户鉴权服务(user-auth-service)负责处理用户的认证请求，包括用户名密码登录、以及可以进一步实现的如短信验证码登录、第三方登录等。<br><br>&emsp;&emsp;用户管理服务(user-management-service)负责处理用户的注册、修改、删除等操作，以及用户的角色和权限管理。<br></p><h3 id="RBAC数据库设计"><a href="#RBAC数据库设计" class="headerlink" title="RBAC数据库设计"></a>RBAC数据库设计</h3><p>&emsp;&emsp;RBAC(Role-Based Access Control)基于角色的访问控制，是一种基于用户在系统中的角色来控制对系统资源和数据访问权限的方法。<br><br>&emsp;&emsp;RBAC模型中，用户、角色、权限、资源之间的关系如下：<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%BE%AE%E6%9C%8D%E5%8A%A1_%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/RBAC.png" alt="RBAC数据库模型" title="RBAC数据库模型"><br>&emsp;&emsp;通过为不同的用户分配不同的角色和权限，可以限制不同等级用户对微服务系统内资源的访问和操作，防止未授权的访问和操作，保护整个系统的安全性和可靠性。同时，基于 RBAC 模型设计的用户权限数据库也提供了灵活的权限管理机制，可以根据需要对用户的角色和权限进行调整和扩展，满足不同用户的需求。<br></p><h3 id="鉴权认证流程"><a href="#鉴权认证流程" class="headerlink" title="鉴权认证流程"></a>鉴权认证流程</h3><p><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%BE%AE%E6%9C%8D%E5%8A%A1_%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84.png" alt="鉴权认证流程" title="鉴权认证流程"><br>&emsp;&emsp;在这样一个方案中，设计并实现了gateway模块、user-auth模块及user-management模块来实现鉴权认证机制，具体实现如下：<br><br>&emsp;&emsp;用户在表现层应用程序携带用户名密码请求认证后，从系统的唯一入口gateway模块进入，该模块利用Spring Security框架来处理安全约束，并决定是否允许请求继续。如果请求被允许，gateway模块会将请求路由到user-auth模块。user-auth模块整合了OAuth2认证服务器并可以获取用户信息。<br><br>&emsp;&emsp;通过OAuth2所提供的认证服务器认证返回两个token，并在配置文件中，创建JwtAccessTokenConverter将OAuth2生成的acess-token与refresh-token转化为JWT并向acess-token中加入自定义的用户信息，user-auth模块会返回并让用户获取到OAuth2对应的JWT令牌，而这个 JWT 令牌包含了用户基本信息，用户在操作前端显示层时候，只需要携带JWT访问Gateway模块中实现的资源服务器，资源服务器就会通过事先约定好的算法将JWT中的信息进行解析，便可直接对 JWT 令牌进行校验，不需要每次都远程请求认证服务器来完成授权。<br><br>&emsp;&emsp;JWT会和由user-management-service所缓存在redis中的权限进行校验，来确认鉴权的需求。<br><br>&emsp;&emsp;为了保证安全性，JWT这种获取token的方式是要加密的，使用了非对称加密方式对JWT做加密操作，因为非对称加密几乎不可能被破解。将私钥存在认证中心的资源目录下，也就是user-auth模块，公钥存在各资源服务器上（于此由接口直接从user-auth模块获得公钥）。在JWT的生成构建上，通过JDK自带的keytool工具生成了RSA非对称密钥文件，并从中提取公钥。<br><br>&emsp;&emsp;OAuth2用于实现表现层应用程序的安全授权，确保只有经过授权并确定该用户所处角色拥有该权限的应用程序才能访问对应的资源。网关除了网关本身的作用外，还被标记为资源服务器，由于网关使用的是webflux异步非阻塞原理实现，底层服务器基于netty不向下兼容，不兼容普通web相关，因此网关单独实现了一套资源服务认证，对token进行校验。<br><br>&emsp;&emsp;在使用时，通过携带acess_token访问gateway模块，gateway模块中实现的网关过滤器与实现的资源服务器配置就会对JWT进行转换，完成权限验证，若acess_token过期，还可通过refresh_token更新token。<br></p><h3 id="user-management-service的具体设计实现"><a href="#user-management-service的具体设计实现" class="headerlink" title="user-management-service的具体设计实现"></a>user-management-service的具体设计实现</h3><p>&emsp;&emsp;user-management-service作为一个用户管理的服务，比较简单，需要考虑的是对于权限的一个缓存。<br><br>&emsp;&emsp;对于不同的业务场景，其实权限的缓存时机是比较弹性的，比如对于一个七八百年不用改权限角色的一个业务场景下，用一个比较简单的定时任务来更新redis上的角色与权限倒也就足以了。比如：<br></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp">@Scheduled(fixedDelay = <span class="hljs-number">600000</span>) <span class="hljs-comment">// 上一次任务执行完后每10分钟执行一次</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">performTask</span>()</span> &#123;<br>    <span class="hljs-comment">// 这里写你需要定时执行的任务</span><br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;执行redis的定时任务&quot;</span>);<br>    redisUpdateService.loadRolePermissionToRedis();<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;更新成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadRolePermissionToRedis</span>()</span> &#123;<br>    redisTemplate.delete(RedisConstant.RESOURCE_ROLES_MAP);<br>    resourceRolesMap = <span class="hljs-keyword">new</span> TreeMap&lt;&gt;();<br>    List&lt;SysRoleEntity&gt; sysRoleEntities = sysRoleRepo.findAll();<br>    <span class="hljs-keyword">for</span>(SysRoleEntity sr: sysRoleEntities) &#123;<br>        <span class="hljs-comment">//权限标识</span><br>        List&lt;SysRolePermissionEntity&gt; sysRolePermissionEntities = sysRolePermissionRepo.findByRoleId(sr.getId());<br>        <span class="hljs-keyword">for</span>(SysRolePermissionEntity srp: sysRolePermissionEntities) &#123;<br>            SysPermissionEntity sysPermissionEntity = sysPermissionRepo.findById(srp.getPermissionId()).<span class="hljs-keyword">get</span>();<br>            String url = sysPermissionEntity.getUrl();<br>            <span class="hljs-comment">// 如果resourceRolesMap中已经包含此url，则将新的角色名添加到列表中</span><br>            <span class="hljs-keyword">if</span>(resourceRolesMap.containsKey(url)) &#123;<br>                resourceRolesMap.<span class="hljs-keyword">get</span>(url).<span class="hljs-keyword">add</span>(sr.getName());<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 否则创建一个新的列表</span><br>                resourceRolesMap.put(url, <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(Collections.singletonList(sr.getName())));<br>            &#125;<br>        &#125;<br>    &#125;<br>    redisTemplate.opsForHash().putAll(RedisConstant.RESOURCE_ROLES_MAP, resourceRolesMap);<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;但是对于一些比较频繁的场景来说，便可以在用户的每次登陆时，进行一次权限的缓存，并考虑做无感的缓存刷新，以及一些更好的办法，于此暂按不表。<br><br>&emsp;&emsp;对于现在的权限来说，构建一个resourceRolesMap，将权限与对应的角色缓存进redis中。<br></p><h3 id="user-auth-service的具体设计实现"><a href="#user-auth-service的具体设计实现" class="headerlink" title="user-auth-service的具体设计实现"></a>user-auth-service的具体设计实现</h3><p>&emsp;&emsp;user-auth-service是鉴权认证的一个关键微服务。采用oauth2.0。<br><br>&emsp;&emsp;OAuth2.0是一个可以集成入Spring Security的开放标准，前端表现层通过得到用户的授权，获得令牌，并通过提供一个令牌而不是用户名和密码来访问存储在特定服务提供者的数据。<br><br>&emsp;&emsp;在实现上，首先需先实现一个抽象类：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractUserDetailsService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> SysPermissionService sysPermissionService;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String,Object&gt; redisTemplate;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String, List&lt;String&gt;&gt; resourceRolesMap;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        <span class="hljs-comment">// 直接提供给User permission</span><br>        <span class="hljs-type">SysUserEntity</span> <span class="hljs-variable">sysUserEntity</span> <span class="hljs-operator">=</span> findSysUser(username);<br>        <span class="hljs-comment">// 一种是直接提供给User permission</span><br><span class="hljs-comment">//        findSysPermission(sysUserEntity);</span><br>        <span class="hljs-comment">// 但这里选择提供roles并将permissions store进redis中</span><br>        findSysRoles(sysUserEntity);<br>        <span class="hljs-keyword">return</span> sysUserEntity;<br>    &#125;<br><br>    <span class="hljs-keyword">abstract</span> SysUserEntity <span class="hljs-title function_">findSysUser</span><span class="hljs-params">(String username)</span>;<br><br>    <span class="hljs-comment">// 在RBAC模型下直接用权限信息作为权限列表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findSysPermission</span><span class="hljs-params">(SysUserEntity sysUserEntity)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        <span class="hljs-keyword">if</span>(sysUserEntity == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;抱歉,未查询到有效用户信息&quot;</span>);<br>        &#125;<br>        List&lt;SysPermissionEntity&gt; sysPermissions = sysPermissionService.findByUserId(sysUserEntity.getId());<br>        <span class="hljs-comment">// 用户没有权限</span><br>        <span class="hljs-keyword">if</span>(CollectionUtils.isEmpty(sysPermissions)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 给用户存入权限,认证通过后用于渲染左侧菜单</span><br>        sysUserEntity.setPermissions(sysPermissions);<br>        <span class="hljs-comment">// 封装用户信息和权限信息</span><br>        List&lt;GrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(SysPermissionEntity sp: sysPermissions) &#123;<br>            <span class="hljs-comment">//权限标识</span><br>            authorities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleGrantedAuthority</span>(sp.getCode()));<br>        &#125;<br>        sysUserEntity.setAuthorities(authorities);<br>    &#125;<br><br>    <span class="hljs-comment">// 以用户的角色信息作为authorities放入JWT，并将权限信息store进redis中方便查询</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findSysRoles</span><span class="hljs-params">(SysUserEntity sysUserEntity)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        <span class="hljs-keyword">if</span>(sysUserEntity == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;抱歉,未查询到有效用户信息&quot;</span>);<br>        &#125;<br>        List&lt;SysRoleEntity&gt; sysRoleEntities = sysUserEntity.getRoleList();<br>        <span class="hljs-comment">// 用户没有角色</span><br>        <span class="hljs-keyword">if</span>(CollectionUtils.isEmpty(sysRoleEntities)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 封装用户信息和权限信息</span><br>        List&lt;GrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        resourceRolesMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(SysRoleEntity sr: sysRoleEntities) &#123;<br>            <span class="hljs-comment">//权限标识</span><br>            authorities.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleGrantedAuthority</span>(sr.getName()));<br>            List&lt;SysPermissionEntity&gt; sysPermissions = sysPermissionService.findByRoleId(sr.getId());<br>            <span class="hljs-keyword">for</span> (SysPermissionEntity sysPermissionEntity: sysPermissions) &#123;<br>                resourceRolesMap.put(sysPermissionEntity.getUrl(), CollUtil.toList(sr.getName()));<br>            &#125;<br>        &#125;<br>        redisTemplate.opsForHash().putAll(RedisConstant.RESOURCE_ROLES_MAP, resourceRolesMap);<br>        sysUserEntity.setAuthorities(authorities);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在这样的一个类中，用于加载用户详细信息和权限数据，具体来说，这个类实现了一个Spring Security的一个核心接口UserDetailsService。在用户登陆时，根据用户名加载用户的详细信息并将用户的权限信息处理好。<br><br>&emsp;&emsp;接着配置好OAuth2.0的认证服务器：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableAuthorizationServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorizationServerConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizationServerConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PasswordEncoder passwordEncoder;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> AuthenticationManager authenticationManager;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> CustomUserDetailsService userService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;jwtTokenStore&quot;)</span><br>    <span class="hljs-keyword">private</span> TokenStore tokenStore;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> JwtAccessTokenConverter jwtAccessTokenConverter;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> JwtTokenEnhancer jwtTokenEnhancer;<br><br><br>    <span class="hljs-comment">// 配置使用密码模式</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthorizationServerEndpointsConfigurer endpoints)</span> &#123;<br>        <span class="hljs-type">TokenEnhancerChain</span> <span class="hljs-variable">enhancerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TokenEnhancerChain</span>();<br>        List&lt;TokenEnhancer&gt; delegates = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//配置JWT的内容增强器</span><br>        delegates.add(jwtTokenEnhancer);<br>        delegates.add(jwtAccessTokenConverter);<br>        enhancerChain.setTokenEnhancers(delegates);<br>        endpoints.authenticationManager(authenticationManager)<br>                .userDetailsService(userService)<br>                <span class="hljs-comment">//配置令牌存储策略</span><br>                .tokenStore(tokenStore)<br>                .accessTokenConverter(jwtAccessTokenConverter)<br>                .tokenEnhancer(enhancerChain);<br>    &#125;<br><br>    <span class="hljs-comment">// oauth2就不用数据库了，采用memory模式</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(ClientDetailsServiceConfigurer clients)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        clients.inMemory()<br>                .withClient(<span class="hljs-string">&quot;client_id&quot;</span>)<br>                .secret(passwordEncoder.encode(<span class="hljs-string">&quot;client_password&quot;</span>))<br>                .accessTokenValiditySeconds(<span class="hljs-number">3600</span>)<br>                .refreshTokenValiditySeconds(<span class="hljs-number">864000</span>)<br>                .autoApprove(<span class="hljs-literal">true</span>) <span class="hljs-comment">//自动授权配置</span><br>                .scopes(<span class="hljs-string">&quot;all&quot;</span>)<br>                .authorizedGrantTypes(<span class="hljs-string">&quot;authorization_code&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;refresh_token&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 获取密钥需要进行身份认证</span><br>    <span class="hljs-comment">// 在使用单点登录时必须配置</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthorizationServerSecurityConfigurer security)</span> &#123;<br>        security.allowFormAuthenticationForClients();<br>        security.checkTokenAccess(<span class="hljs-string">&quot;permitAll()&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;@EnableAuthorizationServer启用Spring Security OAuth2的授权服务器支持，此处采用密码模式并通过PasswordEncoder对密码进行加密。<br><br>&emsp;&emsp;此外，在configure(AuthorizationServerEndpointsConfigurer endpoints)中还配置了授权服务器的端点，包括令牌存储、用户服务、认证管理器以及令牌增强链条：<br></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> JwtTokenEnhancer implements TokenEnhancer&#123;<br>    @Override<br>    <span class="hljs-built_in">public</span> OAuth2AccessToken enhance(OAuth2AccessToken accessToken, OAuth2Authentication authentication) &#123;<br>        // 给JWT添加额外信息<br>        // 比如以下为添加用户信息的内容<br>        Map&lt;String, <span class="hljs-keyword">Object</span>&gt; <span class="hljs-keyword">info</span> = <span class="hljs-built_in">new</span> HashMap&lt;&gt;();<br>        SysUserEntity <span class="hljs-keyword">user</span> = (SysUserEntity) authentication.getPrincipal();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;user:&quot; + <span class="hljs-keyword">user</span>);<br>        <span class="hljs-keyword">info</span>.put(&quot;user_id&quot;, <span class="hljs-keyword">user</span>.getId());<br>        <span class="hljs-keyword">info</span>.put(&quot;userName&quot;, <span class="hljs-keyword">user</span>.getNickName());<br>        <span class="hljs-keyword">return</span> accessToken;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;(注：对于令牌增强链来说，可以添加一些生成的JWT的额外的一些信息。)<br><br>&emsp;&emsp;由此，当用户调用&#x2F;oauth&#x2F;token接口的情况下，便可以获取到一个由用户基本信息和用户所拥有的角色列表组成的一个JWT用于后续的权限校验。<br></p><h3 id="gateway-service的具体设计实现"><a href="#gateway-service的具体设计实现" class="headerlink" title="gateway-service的具体设计实现"></a>gateway-service的具体设计实现</h3><p>&emsp;&emsp;对于gateway-service来说，主要要靠过滤器来对内容进行实现。首先，先要实现一个鉴权管理器，用于判断是否有访问资源的权限：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorizationManager</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ReactiveAuthorizationManager</span>&lt;AuthorizationContext&gt; &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String,Object&gt; redisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;AuthorizationDecision&gt; <span class="hljs-title function_">check</span><span class="hljs-params">(Mono&lt;Authentication&gt; mono, AuthorizationContext authorizationContext)</span> &#123;<br>        <span class="hljs-comment">// 首先先获得请求路径对应的path</span><br>        <span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> authorizationContext.getExchange().getRequest();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getURI().getPath();<br>        <span class="hljs-type">PathMatcher</span> <span class="hljs-variable">pathMatcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathMatcher</span>();<br>        <span class="hljs-comment">// 对应跨域的预检请求直接放行</span><br>        <span class="hljs-keyword">if</span> (request.getMethod() == HttpMethod.OPTIONS) &#123;<br>            <span class="hljs-keyword">return</span> Mono.just(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationDecision</span>(<span class="hljs-literal">true</span>));<br>        &#125;<br>        <span class="hljs-comment">// 当请求的token为空拒绝访问</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeaders().getFirst(<span class="hljs-string">&quot;Authorization&quot;</span>);<br>        <span class="hljs-keyword">if</span> (StrUtil.isBlank(token)) &#123;<br>            <span class="hljs-keyword">return</span> Mono.just(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationDecision</span>(<span class="hljs-literal">false</span>));<br>        &#125;<br>        <span class="hljs-comment">// 随后从缓存获取user-auth-service中所缓存的资源权限角色关系列表</span><br>        Map&lt;Object, Object&gt; resourceRolesMap = redisTemplate.opsForHash().entries(RedisConstant.RESOURCE_ROLES_MAP);<br>        Iterator&lt;Object&gt; iterator = resourceRolesMap.keySet().iterator();<br>        <span class="hljs-comment">// 请求路径匹配到的资源需要的角色权限集合authorities</span><br>        List&lt;String&gt; authorities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> (String) iterator.next();<br>            <span class="hljs-keyword">if</span> (pathMatcher.match(pattern, path)) &#123;<br>                authorities.addAll(Convert.toList(String.class, resourceRolesMap.get(pattern)));<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 此处暂不采用mono了，直接解析</span><br>        <span class="hljs-comment">// 给一个正确的返回和一个错误的返回</span><br>        Mono&lt;AuthorizationDecision&gt; authorizationDecisionMonoTrue = Mono.just(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationDecision</span>(<span class="hljs-literal">true</span>));<br>        Mono&lt;AuthorizationDecision&gt; authorizationDecisionMonoFalse = Mono.just(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationDecision</span>(<span class="hljs-literal">false</span>));<br>        <span class="hljs-comment">// 从token中解析用户信息并设置到Header中去</span><br>        <span class="hljs-comment">// 将所携带的token头GaGaDuck先去掉</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">realToken</span> <span class="hljs-operator">=</span> token.replace(<span class="hljs-string">&quot;GaGaDuck: &quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 解析token</span><br>            <span class="hljs-type">JWSObject</span> <span class="hljs-variable">jwsObject</span> <span class="hljs-operator">=</span> JWSObject.parse(realToken);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">payLoadStr</span> <span class="hljs-operator">=</span> jwsObject.getPayload().toString();<br>            <span class="hljs-comment">// 使用 Jackson 解析 JSON</span><br>            <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>            <span class="hljs-type">JsonNode</span> <span class="hljs-variable">userJson</span> <span class="hljs-operator">=</span> objectMapper.readTree(payLoadStr);<br>            <span class="hljs-comment">// 提取 authorities的列表</span><br>            List&lt;String&gt; authoritiesJwt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-type">JsonNode</span> <span class="hljs-variable">authoritiesNode</span> <span class="hljs-operator">=</span> userJson.get(<span class="hljs-string">&quot;authorities&quot;</span>);<br>            <span class="hljs-keyword">if</span> (authoritiesNode != <span class="hljs-literal">null</span> &amp;&amp; authoritiesNode.isArray()) &#123;<br>                <span class="hljs-keyword">for</span> (JsonNode authorityNode : authoritiesNode) &#123;<br>                    <span class="hljs-comment">// 从JWT中解析出来有哪些角色</span><br>                    <span class="hljs-comment">// 将角色加入到authoritiesJwt</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">authority</span> <span class="hljs-operator">=</span> authorityNode.asText();<br>                    authoritiesJwt.add(authority);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 将该角色列表的每个角色与该路由所拥有权限的角色相对比</span><br>            <span class="hljs-keyword">for</span>(String authority : authoritiesJwt) &#123;<br>                <span class="hljs-keyword">if</span>(authorities.contains(authority)) &#123;<br>                    <span class="hljs-comment">// 如果有的话，权限校验通过，可以访问该路径</span><br>                    <span class="hljs-keyword">return</span> authorizationDecisionMonoTrue;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 没有的话就不能访问该路径</span><br>            <span class="hljs-keyword">return</span> authorizationDecisionMonoFalse;<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException | JsonProcessingException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;对于该鉴权管理器来说，首先是要获得请求路径对应的path，在此基础上，对应跨域的预检请求直接放行（这是为了直接在网关做菜单权限的校验）。<br><br>&emsp;&emsp;当请求携带的token是空的时候要拒绝访问，随后从缓存中拉取user-management-service所缓存的资源权限角色关系列表。将token进行解析，并且与缓存得到的权限进行对比，对于JWT解析出来的角色，将该角色与拥有该权限的角色进行对比，来判断是否有该权限。<br><br>&emsp;&emsp;简单来说，JWT中有用户的角色信息，从缓存中获得了该角色的权限信息，当一个URI来了，如果这个URI和这个角色所应该拥有的权限不一样，那么就不能访问这个路径，如果一样，则可以访问这样一个路径。<br><br>&emsp;&emsp;对于菜单权限的过滤也是同理，于此不再赘述。<br><br>&emsp;&emsp;等过滤器设置好后，可对资源服务器类进行配置。通过鉴权管理器配置的放行权限名单进行放行。<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Bean</span><br>public SecurityWebFilterChain <span class="hljs-built_in">springSecurityFilterChain</span>(ServerHttpSecurity http) &#123;<br>    <span class="hljs-selector-tag">http</span><span class="hljs-selector-class">.oauth2ResourceServer</span>(oauth2 -&gt; oauth2<br>                    .<span class="hljs-built_in">jwt</span>(jwt -&gt; jwt<br>                            .<span class="hljs-built_in">jwtAuthenticationConverter</span>(<span class="hljs-built_in">jwtAuthenticationConverter</span>())<br>                    )<br>                    .<span class="hljs-built_in">authenticationEntryPoint</span>(restAuthenticationEntryPoint)<br>            );<br>    <span class="hljs-comment">// 增加过滤器过滤忽略的白名单Url</span><br>    <span class="hljs-selector-tag">http</span><span class="hljs-selector-class">.addFilterBefore</span>(ignoreUrlsRemoveJwtFilter, SecurityWebFiltersOrder.AUTHENTICATION)<br>            <span class="hljs-comment">// 增加过滤器过滤菜单校验的请求</span><br>            <span class="hljs-selector-class">.addFilterBefore</span>(menuFilter, SecurityWebFiltersOrder.AUTHORIZATION)<br>            <span class="hljs-selector-class">.authorizeExchange</span>(exchange -&gt; exchange<br>                    <span class="hljs-comment">// 直接在properties中配置的白名单</span><br>                    .<span class="hljs-built_in">pathMatchers</span>(ArrayUtil.<span class="hljs-built_in">toArray</span>(ignoreUrlsConfig.<span class="hljs-built_in">getUrls</span>(),String.class)).<span class="hljs-built_in">permitAll</span>()<br>                    <span class="hljs-comment">// 通过鉴权管理器配置的放行权限名单</span><br>                    .<span class="hljs-built_in">anyExchange</span>().<span class="hljs-built_in">access</span>(authorizationManager))<br>            <span class="hljs-selector-class">.exceptionHandling</span>(exceptionHandling -&gt; exceptionHandling<br>                    <span class="hljs-comment">// 返回未授权处理的信息</span><br>                    .<span class="hljs-built_in">accessDeniedHandler</span>(restfulAccessDeniedHandler)<br>                    <span class="hljs-comment">// 返回未未认证处理</span><br>                    .<span class="hljs-built_in">authenticationEntryPoint</span>(restAuthenticationEntryPoint))<br>            <span class="hljs-comment">// 禁用 CSRF</span><br>            <span class="hljs-selector-class">.csrf</span>(ServerHttpSecurity.<span class="hljs-attribute">CsrfSpec</span>::disable);<br>    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">http</span><span class="hljs-selector-class">.build</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;此外，还需要将用户的认证接口放入白名单中直接通行，避免因为没有token而使得无法认证。<br><br>&emsp;&emsp;由此，完成鉴权认证，具体的实现参见<a href="https://github.com/gagaducko/springcloud-microservice-security">https://github.com/gagaducko/springcloud-microservice-security</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 微服务学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—微服务—技术栈实践(6)—网关过滤器+Nacos的IP黑白名单限制</title>
      <link href="/2024/09/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-6-%E2%80%94%E7%BD%91%E5%85%B3-Nacos%E7%9A%84IP%E9%BB%91%E7%99%BD%E5%90%8D%E5%8D%95%E9%99%90%E5%88%B6/"/>
      <url>/2024/09/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-6-%E2%80%94%E7%BD%91%E5%85%B3-Nacos%E7%9A%84IP%E9%BB%91%E7%99%BD%E5%90%8D%E5%8D%95%E9%99%90%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="网关过滤器"><a href="#网关过滤器" class="headerlink" title="网关过滤器"></a>网关过滤器</h2><p>&emsp;&emsp;前面有提到，如果用较为简洁的语言来阐述网关，几乎就等同于路由转发+过滤器。路由得转发、容错这一块的内容已经有所提及，该节记录一下网关的过滤器，以及如何使用网关+Nacos 实现一个 IP 黑白名单的访问限制。<br><br>&emsp;&emsp;Spring Cloud Gateway 的过滤器根据作用范围可以分为 GatewayFilter 和 GlobalFilter 两种。<br><br>&emsp;&emsp;GatewayFilter 是网关过滤器，是需要通过 spring.cloud.routes.filters 配置在具体路由下，只作用在当前路由上或通过 spring.cloud.default-filters 配置在全局，作用在所有路由上的。<br><br>&emsp;&emsp;GlobalFilter 则是全局过滤器，不需要在配置文件中配置，作用在所有的路由上，最终通过 GatewayFilterAdapter 包装成 GatewayFilterChain 可识别的过滤器，是网关的核心过滤器，作用在每个路由上，不需要配置系统初始化就可以加载。<br><br>&emsp;&emsp;对于 GatewayFilter 网关过滤器来说，主要是用于拦截并处理 web 请求，用于切割业务，比如把安全等内容切割出来进行过滤，此处不多赘述。<br><br>&emsp;&emsp;而全局过滤器，则是将请求的业务及路由的 URI 转换为真是业务服务请求地址的核心过滤器。<br><br>&emsp;&emsp;这两种过滤器自带许多比较实用的过滤方法，但在有些情况下，会更希望使用自己实现自定义的过滤器。<br><br>&emsp;&emsp;对于自定义的过滤器来说，有多种实现方法。比如实现两个接口，一个是 GatewayFilter，一个是 Ordered，如下所示为一个自定义过滤器的示例：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthGlobalFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span>, Ordered &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(AuthGlobalFilter.class);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-comment">// 如果token为空，则八行</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> exchange.getRequest().getHeaders().getFirst(<span class="hljs-string">&quot;Authorization&quot;</span>);<br>        <span class="hljs-keyword">if</span> (StrUtil.isEmpty(token)) &#123;<br>            <span class="hljs-keyword">return</span> chain.filter(exchange);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//从token中解析用户信息并设置到Header中去</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">realToken</span> <span class="hljs-operator">=</span> token.replace(<span class="hljs-string">&quot;GaGaDuck: &quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-type">JWSObject</span> <span class="hljs-variable">jwsObject</span> <span class="hljs-operator">=</span> JWSObject.parse(realToken);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">userStr</span> <span class="hljs-operator">=</span> jwsObject.getPayload().toString();<br>            <span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> exchange.getRequest().mutate().header(<span class="hljs-string">&quot;user&quot;</span>, userStr).build();<br>            exchange = exchange.mutate().request(request).build();<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这样一个过滤器用于过滤全局的用户，并将登陆用户的 JWT 信息转化为用户信息。检查请求中是否包含 Authorization 头，如果存在，则解析 JWT 并从中提取用户信息，然后将其设置到请求的 Header 中。还提供了一个 getOrder 方法来定义过滤器的执行顺序。<br><br>&emsp;&emsp;也可以通过 WebFilter 这个接口进行实现，用于处理异步非阻塞的 HTTP 请求，比如：<br></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">IgnoreUrlsRemoveJwtFilter</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">WebFilter</span></span> </span>&#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IgnoreUrlsConfig ignoreUrlsConfig;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;<span class="hljs-keyword">Void</span>&gt; filter(ServerWebExchange exchange, WebFilterChain chain) &#123;<br>        System.out.println(<span class="hljs-string">&quot;==================进入到了白名单路径访问的过滤器中==============&quot;</span>);<br>        ServerHttpRequest request = exchange.getRequest();<br>        URI uri = request.getURI();<br>        PathMatcher pathMatcher = <span class="hljs-keyword">new</span><span class="hljs-type"></span> AntPathMatcher();<br>        <span class="hljs-comment">//白名单路径移除JWT请求头</span><br>        List&lt;<span class="hljs-keyword">String</span>&gt; ignoreUrls = ignoreUrlsConfig.getUrls();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">String</span> ignoreUrl : <span class="hljs-type">ignoreUrls</span>) &#123;<br>            <span class="hljs-keyword">if</span> (pathMatcher.match(ignoreUrl, uri.getPath())) &#123;<br>                request = exchange.getRequest().mutate().header(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).build();<br>                exchange = exchange.mutate().request(request).build();<br>                <span class="hljs-keyword">return</span> chain.filter(exchange);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;如上是一个检查请求的 URI 是否在白名单中的过滤器，如果在白名单中，便移除请求的 HWT 认证头。此外，还可以在 security 的过滤链中可以设置其的过滤器执行顺序：<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">// security的过滤链</span><br><span class="hljs-variable">@Bean</span><br>public SecurityWebFilterChain <span class="hljs-built_in">springSecurityFilterChain</span>(ServerHttpSecurity http) &#123;<br>    <span class="hljs-selector-tag">http</span><span class="hljs-selector-class">.oauth2ResourceServer</span>(oauth2 -&gt; oauth2<br>                    .<span class="hljs-built_in">jwt</span>(jwt -&gt; jwt<br>                            .<span class="hljs-built_in">jwtAuthenticationConverter</span>(<span class="hljs-built_in">jwtAuthenticationConverter</span>())<br>                    )<br>                    .<span class="hljs-built_in">authenticationEntryPoint</span>(restAuthenticationEntryPoint)<br>            );<br>    <span class="hljs-comment">// 增加过滤器过滤忽略的白名单Url</span><br>    <span class="hljs-selector-tag">http</span><span class="hljs-selector-class">.addFilterBefore</span>(ignoreUrlsRemoveJwtFilter, SecurityWebFiltersOrder.AUTHENTICATION)<br>            <span class="hljs-comment">// 增加过滤器过滤菜单校验的请求</span><br>            <span class="hljs-selector-class">.addFilterBefore</span>(menuFilter, SecurityWebFiltersOrder.AUTHORIZATION)<br>            <span class="hljs-selector-class">.authorizeExchange</span>(exchange -&gt; exchange<br>                    <span class="hljs-comment">// 直接在properties中配置的白名单</span><br>                    .<span class="hljs-built_in">pathMatchers</span>(ArrayUtil.<span class="hljs-built_in">toArray</span>(ignoreUrlsConfig.<span class="hljs-built_in">getUrls</span>(),String.class)).<span class="hljs-built_in">permitAll</span>()<br>                    <span class="hljs-comment">// 通过鉴权管理器配置的放行权限名单</span><br>                    .<span class="hljs-built_in">anyExchange</span>().<span class="hljs-built_in">access</span>(authorizationManager))<br>            <span class="hljs-selector-class">.exceptionHandling</span>(exceptionHandling -&gt; exceptionHandling<br>                    <span class="hljs-comment">// 返回未授权处理的信息</span><br>                    .<span class="hljs-built_in">accessDeniedHandler</span>(restfulAccessDeniedHandler)<br>                    <span class="hljs-comment">// 返回未未认证处理</span><br>                    .<span class="hljs-built_in">authenticationEntryPoint</span>(restAuthenticationEntryPoint))<br>            <span class="hljs-comment">// 禁用 CSRF</span><br>            <span class="hljs-selector-class">.csrf</span>(ServerHttpSecurity.<span class="hljs-attribute">CsrfSpec</span>::disable);<br>    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">http</span><span class="hljs-selector-class">.build</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这样一条过滤链便是在认证过滤器之前添加了一个过滤器，用于处理忽略的白名单 URI。<br><br>&emsp;&emsp;对于过滤器来说，看一看其官方的接口：<br></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">init</span><span class="hljs-params">(FilterConfig)</span></span><br><span class="hljs-function"><span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest, ServletResponse, FilterChain)</span></span><br><span class="hljs-function"><span class="hljs-title">destroy</span><span class="hljs-params">()</span></span><br><br><span class="hljs-function"><span class="hljs-title">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span></span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;可以看到，其核心方法就是 doFilter 或 filter，那么，当需要实现一个过滤器的时候，便可以从 doFilter 或者 filter 方法下手，进行过滤。比如，由此实现一个对于 IP 黑白名单限制的一个过滤。<br></p><h2 id="网关-Nacos-配置中心得-IP-黑白名单限制"><a href="#网关-Nacos-配置中心得-IP-黑白名单限制" class="headerlink" title="网关+Nacos 配置中心得 IP 黑白名单限制"></a>网关+Nacos 配置中心得 IP 黑白名单限制</h2><p>&emsp;&emsp;对于一个 IP 黑白名单限制的过滤器来说，首先需要从 request 对象中获得对应的客户端 IP：<br></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">// 获取request对象<br>ServerHttpRequest request <span class="hljs-operator">=</span> exchange.getRequest()<span class="hljs-comment">;</span><br>ServerHttpResponse response <span class="hljs-operator">=</span> exchange.getResponse()<span class="hljs-comment">;</span><br>// 从request对象中获取客户端ip<br>String clientIp <span class="hljs-operator">=</span> request.getRemoteAddress().getHostString()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;而后便可以根据黑白名单模式及黑白名单的列表进行判断及过滤：<br></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 如果在黑名单模式同时IP在黑名单的时候</span><br><span class="hljs-keyword">if</span> (isBlackList &amp;&amp; blackList.contains(clientIp)) &#123;<br>    <span class="hljs-comment">// 拒绝黑名单上IP的访问,返回信息</span><br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;blackList1, clientIp = &quot;</span> + clientIp);<br>    response.setStatusCode(HttpStatus.UNAUTHORIZED); <span class="hljs-comment">// 状态码</span><br>    String <span class="hljs-keyword">data</span> = <span class="hljs-string">&quot;Request be denied! IP in blacklist and mode is blackList now!&quot;</span>;<br>    DataBuffer wrap = response.bufferFactory().wrap(<span class="hljs-keyword">data</span>.getBytes());<br>    <span class="hljs-keyword">return</span> response.writeWith(Mono.just(wrap));<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!isBlackList &amp;&amp; whiteList.contains(clientIp)) &#123;<br>    <span class="hljs-comment">// 如果说是白名单模式并且白名单中有这个IP的时候</span><br>    <span class="hljs-comment">// 可以访问</span><br>    <span class="hljs-comment">// 合法请求，放⾏，执⾏后续的过滤器</span><br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;whiteList1, clientIp = &quot;</span> + clientIp);<br>    <span class="hljs-keyword">return</span> chain.filter(exchange);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!isBlackList &amp;&amp; !whiteList.contains(clientIp)) &#123;<br>    <span class="hljs-comment">// 最后的情况是白名单模式但是不在白名单中</span><br>    <span class="hljs-comment">// 不可以访问</span><br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;whiteList2, clientIp = &quot;</span> + clientIp);<br>    response.setStatusCode(HttpStatus.UNAUTHORIZED);<br>    String <span class="hljs-keyword">data</span> = <span class="hljs-string">&quot;Request be denied! IP not in whitelist and mode is whiteList now!&quot;</span>;<br>    DataBuffer wrap = response.bufferFactory().wrap(<span class="hljs-keyword">data</span>.getBytes());<br>    <span class="hljs-keyword">return</span> response.writeWith(Mono.just(wrap));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 剩下的情况,一个是黑名单模式,但是这个IP不在黑名单中</span><br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;blackList2, clientIp = &quot;</span> + clientIp);<br>    <span class="hljs-keyword">return</span> chain.filter(exchange);<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;而对于这样一个黑白名单的配置，同样可以采用 nacos 配置中心动态更新的方法：<br></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@RefreshScope</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;通过实现一个 loadConfig，载入配置：<br></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadConfig</span>() throws NacosException</span> &#123;<br>    <span class="hljs-comment">// 首先是载入配置</span><br>    String blackIpDataId = blackIpList;<br>    String whiteIpDataId = whiteIpList;<br>    String ipDataId = IPDataId;<br>    String <span class="hljs-keyword">group</span> = groupConfig;<br>    String configBlack = nacosConfigManager.getConfigService().getConfig(blackIpDataId, <span class="hljs-keyword">group</span>, <span class="hljs-number">5000</span>);<br>    String configWhite = nacosConfigManager.getConfigService().getConfig(whiteIpDataId, <span class="hljs-keyword">group</span>, <span class="hljs-number">5000</span>);<br>    String configIpManagement = nacosConfigManager.getConfigService().getConfig(ipDataId, <span class="hljs-keyword">group</span>, <span class="hljs-number">5000</span>);<br><br>    <span class="hljs-comment">// 然后判断采用黑名单还是白名单模式</span><br>    <span class="hljs-keyword">if</span> (Objects.<span class="hljs-keyword">equals</span>(configIpManagement, <span class="hljs-string">&quot;true&quot;</span>)) &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;采用黑名单模式限制终端IP&quot;</span>);<br>        isBlackList = <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;采用白名单模式限制终端IP&quot;</span>);<br>        isBlackList = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 加入nacos中黑名单的IP</span><br>    <span class="hljs-keyword">if</span> (configBlack != <span class="hljs-literal">null</span>) &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;now is in blackText&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(configBlack);<br>        String[] ips = configBlack.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        blackList.clear();<br>        <span class="hljs-keyword">for</span> (String ip : ips) &#123;<br>            blackList.<span class="hljs-keyword">add</span>(ip.trim());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 加入nacos中白名单的ip</span><br>    <span class="hljs-keyword">if</span> (configWhite != <span class="hljs-literal">null</span>) &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;now is in whiteText&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(configWhite);<br>        String[] ips = configWhite.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        whiteList.clear();<br>        <span class="hljs-keyword">for</span> (String ip : ips) &#123;<br>            whiteList.<span class="hljs-keyword">add</span>(ip.trim());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在此基础上加入监听器监听配置文件的变化，在接收到nacos的变更后便重新加载配置，由此实现IP黑白名单的动态限制。<br><br>&emsp;&emsp;详细实现可参见<a href="https://github.com/gagaducko/springcloud-microservice-security/tree/main/gateway-service">https://github.com/gagaducko/springcloud-microservice-security/tree/main/gateway-service</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 微服务学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> 网关 </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—微服务—技术栈实践(5)—网关+Nacos+Sentinel的动态服务容错</title>
      <link href="/2024/09/12/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-5-%E2%80%94%E7%BD%91%E5%85%B3-Nacos-Sentinel%E7%9A%84%E5%8A%A8%E6%80%81%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/"/>
      <url>/2024/09/12/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-5-%E2%80%94%E7%BD%91%E5%85%B3-Nacos-Sentinel%E7%9A%84%E5%8A%A8%E6%80%81%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h2 id="服务容错"><a href="#服务容错" class="headerlink" title="服务容错"></a>服务容错</h2><h3 id="服务容错概述"><a href="#服务容错概述" class="headerlink" title="服务容错概述"></a>服务容错概述</h3><p>&emsp;&emsp;服务容错是确保系统在出现故障或异常时仍然能够继续提供服务的能力。它包括对服务的各种保护措施，以提高系统的可靠性和稳定性。通过合理的容错设计，可以避免系统崩溃或性能下降，从而提高用户体验和系统的健壮性。<br></p><h3 id="服务容错手段"><a href="#服务容错手段" class="headerlink" title="服务容错手段"></a>服务容错手段</h3><h4 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h4><p>&emsp;&emsp;限流是控制系统负载的一种方法，通过限制请求的数量或频率来保护系统免受过高负载的影响。常见的限流策略包括令牌桶算法和漏桶算法，这些策略可以帮助防止系统因过多请求而过载。<br></p><h4 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h4><p>&emsp;&emsp;熔断是对系统服务调用失败的响应机制。它通过检测到服务失败的情况，自动中断对该服务的请求，从而避免因某个服务的问题影响到系统的其他部分。熔断器会根据预设的规则决定何时进行熔断和恢复操作。<br></p><h4 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h4><p>&emsp;&emsp;降级是指当系统负载过高或出现故障时，系统会自动提供一个简化或有限的服务版本。降级可以有效地保护系统，防止全局故障，从而保持系统的基本功能。<br></p><h3 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h3><h4 id="Sentinel简介"><a href="#Sentinel简介" class="headerlink" title="Sentinel简介"></a>Sentinel简介</h4><p>&emsp;&emsp;Sentinel 是一个流量控制和熔断降级的开源组件，由阿里巴巴开发。它主要用于服务的容错保护，通过监控系统的流量、响应时间等指标，来实现服务的保护和自动恢复。<br><br>&emsp;&emsp;之所以选用sentinel，是因为之前常用的熔断器早就已经停止维护了。<br></p><h4 id="Sentinel特性"><a href="#Sentinel特性" class="headerlink" title="Sentinel特性"></a>Sentinel特性</h4><p>&emsp;&emsp;Sentinel 具备以下主要特性：<br><br>&emsp;&emsp;&emsp;&emsp;1. <strong>流量控制</strong>：提供流量控制的功能，包括限流和熔断。<br><br>&emsp;&emsp;&emsp;&emsp;2. <strong>熔断降级</strong>：支持熔断和降级策略来处理系统故障。<br><br>&emsp;&emsp;&emsp;&emsp;3. <strong>系统监控</strong>：提供实时的监控功能，帮助了解系统运行状态。<br><br>&emsp;&emsp;&emsp;&emsp;4. <strong>高可用性</strong>：支持集群部署和高可用性配置。<br></p><h4 id="Sentinel核心概念"><a href="#Sentinel核心概念" class="headerlink" title="Sentinel核心概念"></a>Sentinel核心概念</h4><p>&emsp;&emsp;Sentinel 的核心概念包括：<br><br>&emsp;&emsp;&emsp;&emsp;1. <strong>资源</strong>：Sentinel 监控和控制的核心单位，通常是一个服务或功能模块。<br><br>&emsp;&emsp;&emsp;&emsp;2. <strong>规则</strong>：定义了流量控制、熔断和降级的策略。<br><br>&emsp;&emsp;&emsp;&emsp;3. <strong>降级</strong>：根据设定的规则对系统进行降级处理。<br><br>&emsp;&emsp;&emsp;&emsp;4. <strong>监控</strong>：实时监控系统的流量和指标，帮助进行决策。<br></p><h4 id="Sentinel功能"><a href="#Sentinel功能" class="headerlink" title="Sentinel功能"></a>Sentinel功能</h4><p>&emsp;&emsp;Sentinel 提供以下功能：<br><br>&emsp;&emsp;&emsp;&emsp;1. <strong>流量控制</strong>：限制请求的数量和频率，防止系统过载。<br><br>&emsp;&emsp;&emsp;&emsp;2. <strong>熔断器</strong>：自动中断失败的服务调用，保护系统稳定性。<br><br>&emsp;&emsp;&emsp;&emsp;3. <strong>降级处理</strong>：在系统负载过高时，自动提供降级服务。<br><br>&emsp;&emsp;&emsp;&emsp;4. <strong>实时监控</strong>：提供流量、响应时间等实时监控数据。<br></p><h4 id="Sentinel使用"><a href="#Sentinel使用" class="headerlink" title="Sentinel使用"></a>Sentinel使用</h4><p>&emsp;&emsp;使用 Sentinel 主要包括以下步骤：<br><br>&emsp;&emsp;&emsp;&emsp;1. <strong>引入依赖</strong>：在项目中引入 Sentinel 的相关依赖。<br><br>&emsp;&emsp;&emsp;&emsp;2. <strong>配置规则</strong>：定义流量控制、熔断和降级的规则。<br><br>&emsp;&emsp;&emsp;&emsp;3. <strong>监控系统</strong>：配置 Sentinel 的监控功能，实时查看系统状态。<br><br>&emsp;&emsp;&emsp;&emsp;4. <strong>实施保护</strong>：在应用中实施 Sentinel 的流量控制和熔断降级功能。<br></p><h4 id="Sentinel规则"><a href="#Sentinel规则" class="headerlink" title="Sentinel规则"></a>Sentinel规则</h4><p>&emsp;&emsp;Sentinel 规则包括：<br><br>&emsp;&emsp;&emsp;&emsp;1. <strong>流量控制规则</strong>：设置请求的 QPS（每秒请求数）限制。<br><br>&emsp;&emsp;&emsp;&emsp;2. <strong>熔断规则</strong>：设置熔断条件，如失败率或响应时间。<br><br>&emsp;&emsp;&emsp;&emsp;3. <strong>降级规则</strong>：设置系统负载或资源限制时的降级策略。<br></p><h3 id="Sentinel整合网关"><a href="#Sentinel整合网关" class="headerlink" title="Sentinel整合网关"></a>Sentinel整合网关</h3><h4 id="Sentinel整合Nacos实现规则持久化"><a href="#Sentinel整合Nacos实现规则持久化" class="headerlink" title="Sentinel整合Nacos实现规则持久化"></a>Sentinel整合Nacos实现规则持久化</h4><p>&emsp;&emsp;在此，以限流为例，介绍一种基于Nacos配置中心的网关服务限流规则动态实现方法。首先，自然是要引入sentinel的相关依赖。<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- SpringCloud Alibaba Sentinel --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2023.0.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- SpringCloud Alibaba Sentinel Gateway --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-sentinel-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2023.0.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;接着，实现基于Nacos配置的限流规则仓库NacosFlowDefinitionRepository<br><br>&emsp;&emsp;<code>NacosFlowDefinitionRepository</code> 类用于从 Nacos 获取并管理限流规则，并将这些规则应用到 Sentinel。类似于前文中的动态路由配置的仓库。<br><br>&emsp;&emsp;initializeRules的方法：<br></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">initializeRules</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-title class_">String</span> content = nacosConfigManager.<span class="hljs-title function_">getConfigService</span>().<span class="hljs-title function_">getConfig</span>(dataId, groupId, <span class="hljs-number">5000</span>);<br>        <span class="hljs-title class_">Set</span>&lt;<span class="hljs-title class_">GatewayFlowRule</span>&gt; rules = <span class="hljs-title function_">parseRules</span>(content);<br>        <span class="hljs-title class_">GatewayRuleManager</span>.<span class="hljs-title function_">loadRules</span>(rules);<br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">NacosException</span> e) &#123;<br>        log.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;Failed to initialize rules from Nacos config&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;从 Nacos 获取限流规则的配置，并将其解析为 GatewayFlowRule 对象集合，随后通过 GatewayRuleManager 加载这些规则。<br><br>&emsp;&emsp;添加监听器：<br></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">addListener</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        nacosConfigManager.<span class="hljs-title function_">getConfigService</span>().<span class="hljs-title function_">addListener</span>(dataId, groupId, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Listener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-title class_">Executor</span> <span class="hljs-title function_">getExecutor</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">receiveConfigInfo</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> configInfo</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-title class_">Set</span>&lt;<span class="hljs-title class_">GatewayFlowRule</span>&gt; rules = <span class="hljs-title function_">parseRules</span>(configInfo);<br>                    <span class="hljs-title class_">GatewayRuleManager</span>.<span class="hljs-title function_">loadRules</span>(rules);<br>                    publisher.<span class="hljs-title function_">publishEvent</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RefreshRoutesEvent</span>(<span class="hljs-variable language_">this</span>));<br>                &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br>                    log.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;Failed to parse and load rules from Nacos config&quot;</span>, e);<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">NacosException</span> e) &#123;<br>        log.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;nacos-addListener-error&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;当配置发生变化时，重新解析并加载规则，并发布 RefreshRoutesEvent 事件通知系统。<br><br>&emsp;&emsp;parseRules 方法，解析从 Nacos 获取的 JSON 字符串，将其转换为 GatewayFlowRule 对象集合：<br></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">private <span class="hljs-keyword">Set</span>&lt;GatewayFlowRule&gt; parseRules(String configInfo) &#123;<br>    JSONArray <span class="hljs-keyword">array</span> = <span class="hljs-type">JSON</span>.parseArray(configInfo);<br>    <span class="hljs-keyword">Set</span>&lt;GatewayFlowRule&gt; rules = <span class="hljs-built_in">new</span> HashSet&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">array</span>.size(); i++) &#123;<br>        JSONObject jsonObject = <span class="hljs-keyword">array</span>.getJSONObject(i);<br>        GatewayFlowRule <span class="hljs-keyword">rule</span> = <span class="hljs-built_in">new</span> GatewayFlowRule();<br>        <span class="hljs-keyword">rule</span>.setResource(jsonObject.getString(&quot;resource&quot;));<br>        <span class="hljs-keyword">rule</span>.setCount(jsonObject.getLong(&quot;count&quot;));<br>        <span class="hljs-keyword">rule</span>.setIntervalSec(jsonObject.getInteger(&quot;intervalSec&quot;));<br>        rules.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">rule</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;rule:&quot;+<span class="hljs-keyword">rule</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> rules;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;值得一提的是，sentinel的功能是强大的，除了限流还可以以类似的方式做相应的熔断降级，对于限流来说，还可以进一步采用令牌桶等算法来实现更为平滑的限流行为。<br><br>&emsp;&emsp;于此，主要介绍的还是通过Nacos+Sentinel来实现动态容错，详细实现可见：<a href="https://github.com/gagaducko/springcloud-microservice-security/tree/main/gateway-service">https://github.com/gagaducko/springcloud-microservice-security/tree/main/gateway-service</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 微服务学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> 网关 </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—离线环境下安装Docker</title>
      <link href="/2024/09/11/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E7%A6%BB%E7%BA%BF%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85Docker/"/>
      <url>/2024/09/11/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E7%A6%BB%E7%BA%BF%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85Docker/</url>
      
        <content type="html"><![CDATA[<h2 id="离线环境下安装Docker"><a href="#离线环境下安装Docker" class="headerlink" title="离线环境下安装Docker"></a>离线环境下安装Docker</h2><p>&emsp;&emsp;离线场景下配置服务器是一个少见的情况，但有些地方出于安全等考虑服务器并不会接外网，因此，离线部署一些软件是很有意义的。<br><br>&emsp;&emsp;首先需要下载一个合适的docker离线的tgz包，以docker-24.0.9.tgz为例子。<br><br>&emsp;&emsp;当传上服务器后，解压。<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf docker-<span class="hljs-number">24</span>.<span class="hljs-number">0</span>.<span class="hljs-number">9</span>.tgz<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;解压后找到docker目录，将docker二进制文件复制到&#x2F;usr&#x2F;bin目录下。<br></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp docker<span class="hljs-regexp">/* /u</span>sr<span class="hljs-regexp">/bin/</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;创建docker的systemd服务文件，以docker.service为例子。<br></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span>docker.service<br></code></pre></td></tr></table></figure><p>填入以下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=Docker Application<br><span class="hljs-attr">Documentation</span>=http://docs.dock.com<br><span class="hljs-attr">After</span>=network-<span class="hljs-literal">on</span>line.target firewalld.service<br><span class="hljs-attr">Wants</span>=network-<span class="hljs-literal">on</span>line.target<br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span>=notify<br><span class="hljs-attr">ExecStart</span>=/usr/bin/dockerd<br><span class="hljs-attr">ExecReload</span>=/bin/kill -s HUP <span class="hljs-variable">$MAINPID</span><br><span class="hljs-attr">LimitNOFILE</span>=infinity<br><span class="hljs-attr">LimitNPROC</span>=infinity<br><span class="hljs-attr">LimitCORE</span>=infinity<br><span class="hljs-attr">TimeoutStartSec</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">Delegate</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">KillMode</span>=process<br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<br><span class="hljs-attr">StartLimitBurst</span>=<span class="hljs-number">3</span><br><span class="hljs-attr">StartLimitInterval</span>=<span class="hljs-number">60</span>s<br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;以上是一个systemd服务单元文件，用于在基于systemd的linux系统上配置和管理Docker服务。<br><br>&emsp;&emsp;Unit中，Description: 描述服务的作用，这里是 “Docker Application”，表示这是用于运行 Docker 应用程序的服务。ocumentation: 提供服务的文档链接，这里是 Docker 的官方文档链接。After: 指定该服务在哪些服务启动之后启动。这里指定了 network-online.target 和 firewalld.service，意味着 Docker 服务会在网络在线和防火墙服务启动之后启动。Wants: 表示该服务希望某个服务启动，但不严格要求它。这里指定了 network-online.target，意味着 Docker 服务希望网络服务在线，但不是严格依赖。<br><br>&emsp;&emsp;Service中，Type: 定义服务启动类型。notify 表示服务会发送一个通知信号来告知 systemd 它已经启动完成。ExecStart: 指定启动服务时要执行的命令。这里是 &#x2F;usr&#x2F;bin&#x2F;dockerd，即启动 Docker 守护进程。ExecReload: 指定重新加载服务配置时要执行的命令。这里是发送 HUP 信号给主进程。LimitNOFILE: 设置服务可以打开的最大文件数，infinity 表示没有限制。LimitNPROC: 设置服务可以创建的最大进程数，infinity 表示没有限制。LimitCORE: 设置服务可以创建的最大核心转储文件大小，infinity 表示没有限制。TimeoutStartSec: 定义启动服务时的超时时间，0 表示没有超时限制。Delegate: 表示将服务管理委派给 Docker 守护进程，让 Docker 管理其子进程。KillMode: 定义如何杀死服务。process 表示只杀死主进程，不杀死其子进程。Restart: 定义服务失败时的重启策略。on-failure 表示只有在服务非正常退出时才重启。StartLimitBurst: 设置在 StartLimitInterval 时间内允许的最大启动次数。StartLimitInterval: 设置启动次数限制的时间间隔。<br><br>&emsp;&emsp;Install中，WantedBy: 指定该服务属于哪个目标。multi-user.target 表示该服务应该在多用户系统环境中启动。<br><br>&emsp;&emsp;这样的一个服务单元配置文件配置了Docker服务的基本行为，比如启动命令、重启策略、依赖关系等等，使得Docker服务能够被systemd正确地管理和启动。<br><br>&emsp;&emsp;紧接着，首先，给Docker的服务单元文件增加执行权限，让systemd能通过执行这个文件来启动Docker服务。<br></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">chmod +x <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span>docker.service<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;daemon-reload用于告诉systemd重新加载所有服务单元文件。确保systemd用最新的配置<br></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl daemon-reload</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;启动docker服务。<br></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> docker<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;将 Docker 服务设置为在系统启动时自动启动。<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">enable</span> docker.service<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这样，Docker就被离线安装好了。<br><br>&emsp;&emsp;安装完成后，可以通过以下命令来验证 Docker 是否安装成功：<br></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">docker <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;如果 Docker 安装成功，该命令将输出 Docker 的版本信息。<br><br>&emsp;&emsp;如果 Docker 安装失败，可以尝试重新安装 Docker，或者查看 Docker 的日志文件（通常位于 &#x2F;var&#x2F;log&#x2F;docker.log）以获取更多错误信息。<br></p><h2 id="离线环境下安装docker-compose"><a href="#离线环境下安装docker-compose" class="headerlink" title="离线环境下安装docker-compose"></a>离线环境下安装docker-compose</h2><p>&emsp;&emsp;Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。它使用 YAML 文件来配置应用程序的服务，并使用一个命令来启动所有服务。<br><br>&emsp;&emsp;在离线环境下安装 Docker Compose，需要先下载 Docker Compose 的二进制文件，然后将其复制到系统的 PATH 中。<br><br>&emsp;&emsp;首先，需要从 Docker 官方网站下载 Docker Compose 的二进制文件。可以在浏览器中打开以下链接：<br></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/docker/</span>compose/releases<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在页面中找到适合你操作系统的 Docker Compose 版本，并下载对应的二进制文件。以docker-compose-linux-x86_64为例。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> docker-compose-linux-x86_64 /usr/bin/docker-compose<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;先移动至系统可执行目录<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x /usr/bin/docker-compose<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;赋予执行权限<br><br>&emsp;&emsp;安装完成后，可以通过以下命令来验证 Docker Compose 是否安装成功：<br></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose -v</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;如果 Docker Compose 安装成功，该命令将输出 Docker Compose 的版本信息。<br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 离线环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—微服务—技术栈实践(4)—网关+Nacos的动态路由</title>
      <link href="/2024/09/10/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-4-%E2%80%94%E7%BD%91%E5%85%B3-Nacos%E7%9A%84%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/"/>
      <url>/2024/09/10/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-4-%E2%80%94%E7%BD%91%E5%85%B3-Nacos%E7%9A%84%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="网关的动态路由"><a href="#网关的动态路由" class="headerlink" title="网关的动态路由"></a>网关的动态路由</h2><p>&emsp;&emsp;之前已经对网关的简单使用有了一个初步的了解，并且对于配置中心对配置的管理也有了一个简单的了解。<br><br>&emsp;&emsp;那么，很显然，靠着网关在配置文件里面配置好的路由路径是比较死板的，动态路由是一个很重要的东西，以此减少对代码的修改。<br><br>&emsp;&emsp;Spring Gateway的动态路由功能允许根据特定的规则在运行动态配置路由，而无需重新启动应用，比较常见的方式是通过数据库、配置中心或者API来加载或更新路由规则，于此，介绍以下采用配置中心实现动态路由的方式。<br><br>&emsp;&emsp;在该实现中，采用Nacos作为配置中心。<br></p><h2 id="网关-Nacos配置中心实现的动态路由"><a href="#网关-Nacos配置中心实现的动态路由" class="headerlink" title="网关 + Nacos配置中心实现的动态路由"></a>网关 + Nacos配置中心实现的动态路由</h2><p>&emsp;&emsp;首先，引入nacos配置中心和注册中心的依赖。而后，对于配置文件：<br></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">spring<span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.gateway</span><span class="hljs-selector-class">.discovery</span><span class="hljs-selector-class">.locator</span>.enabled=true<br>spring<span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.gateway</span><span class="hljs-selector-class">.discovery</span><span class="hljs-selector-class">.locator</span>.lower-case-service-id=true<br>spring<span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.gateway</span><span class="hljs-selector-class">.discovery</span><span class="hljs-selector-class">.locator</span><span class="hljs-selector-class">.filters</span><span class="hljs-selector-attr">[0]</span>=StripPrefix=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在这部分中，启用了通过服务发现的方式来动态路由，并将服务ID转化为小写，还应用了StripPrefix 过滤器来去掉路径中的前缀。<br><br>&emsp;&emsp;换言之，之前断言中的Path还是<a href="http://localhost:19088的话，现在就可以用lb://user-auth-service。">http://localhost:19088的话，现在就可以用lb://user-auth-service。</a><br><br>&emsp;&emsp;接着，是对于nacos的一系列配置，不详述。<br></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">management.endpoint.health.show-details</span>=always<br><span class="hljs-attr">management.endpoint.gateway.enabled</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">management.endpoints.web.exposure.include</span>=*<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;对于如上的配置，与Spring Boot管理端点和监控有关，用于监控的。比如management.endpoint.gateway.enabled&#x3D;true：启用 Spring Cloud Gateway 的管理端点，可以通过该端点查看网关的路由信息。<br><br>&emsp;&emsp;在配置好nacos的相关信息后：<br></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">spring.cloud.gateway.default-filters<span class="hljs-comment">[0]</span>=DedupeResponseHeader=Access-Control-Allow-Origin, RETAIN_UNIQUE<br>spring.cloud.gateway.globalcors.corsConfigurations.<span class="hljs-comment">[/**]</span>.allowedHeaders=*<br>spring.cloud.gateway.globalcors.corsConfigurations.<span class="hljs-comment">[/**]</span>.allowedMethods=*<br>spring.cloud.gateway.globalcors.corsConfigurations.<span class="hljs-comment">[/**]</span>.allowedOrigins=*<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这部分配置与 Spring Cloud Gateway 的默认过滤器和跨域资源共享（CORS）设置有关。<br><br>&emsp;&emsp;spring.cloud.gateway.default-filters[0]&#x3D;DedupeResponseHeader&#x3D;Access-Control-Allow-Origin, RETAIN_UNIQUE：该配置确保在响应头中，Access-Control-Allow-Origin 只保留唯一值，避免重复的 CORS 头信息。<br><br>&emsp;&emsp;另外几个是CORS的配置。allowedHeaders&#x3D;*：允许所有请求头。allowedMethods&#x3D;*：允许所有 HTTP 方法（GET, POST, etc.）。allowedOrigins&#x3D;*：允许所有来源访问。这些配置确保 Gateway 允许跨域请求，并清理重复的 CORS 响应头。<br><br>&emsp;&emsp;网关的路由配置文件为：gateway-router.json。<br></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[&#123;<br>    <span class="hljs-string">&quot;filters&quot;</span>: [&#123;<br>         <span class="hljs-string">&quot;args&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;parts&quot;</span>: <span class="hljs-string">&quot;1&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;StripPrefix&quot;</span><br>    &#125;],<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;user-auth-service&quot;</span>,<br>    <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;predicates&quot;</span>: [&#123;<br>        <span class="hljs-string">&quot;args&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;pattern&quot;</span>: <span class="hljs-string">&quot;/auth/**&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Path&quot;</span><br>    &#125;],<br>    <span class="hljs-string">&quot;uri&quot;</span>: <span class="hljs-string">&quot;lb://user-auth-service&quot;</span><br>&#125;,<br>……<br>]<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这是一个json列表，gateway后续会对其进行解析以实现路由的配置。<br><br>&emsp;&emsp;为了实现动态路由，首先创建一个配置类DynamicRouteConfig，该配置类的作用是定义如何从 Nacos 加载路由信息。<br></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicRouteConfig</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ApplicationEventPublisher publisher;<br><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;spring.cloud.nacos.config.router-data-id:gateway-router.json&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String routerDataId;<br><br>    <span class="hljs-meta">@Configuration</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NacosDynRoute</span> &#123;<br><br>        <span class="hljs-meta">@Resource</span><br>        <span class="hljs-keyword">private</span> NacosConfigProperties nacosConfigProperties;<br><br>        <span class="hljs-meta">@Bean</span><br>        <span class="hljs-keyword">public</span> NacosRouteDefinitionRepository nacosRouteDefinitionRepository() &#123;<br>            <span class="hljs-keyword">return</span> new NacosRouteDefinitionRepository(routerDataId, publisher, nacosConfigProperties);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这里，我们定义了一个名为 NacosDynRoute 的内部配置类，注入了 NacosConfigProperties，并创建了 NacosRouteDefinitionRepository 的 Bean。<br><br>&emsp;&emsp;NacosRouteDefinitionRepository 是实现 RouteDefinitionRepository 接口的自定义实现，用于从 Nacos 中读取路由配置。该类包含以下主要功能：<br><br>&emsp;&emsp;构造函数: 初始化时注册了 Nacos 配置监听器。<br></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> NacosRouteDefinitionRepository(String routerDataId, ApplicationEventPublisher publisher, NacosConfigProperties nacosConfigProperties) &#123;<br>    <span class="hljs-keyword">this</span>.routerDataId = routerDataId;<br>    <span class="hljs-keyword">this</span>.publisher = publisher;<br>    <span class="hljs-keyword">this</span>.nacosConfigProperties = nacosConfigProperties;<br>    addListener();<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;获取路由定义: 从 Nacos 中读取路由配置，解析成 RouteDefinition 列表，并返回 Flux<RouteDefinition> 类型。<br></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Flux&lt;RouteDefinition&gt; getRouteDefinitions() &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        String content = nacosConfigProperties.configServiceInstance().getConfig(routerDataId, nacosConfigProperties.getGroup(), <span class="hljs-number">5000</span>);<br>        List&lt;RouteDefinition&gt; routeDefinitions = getListByStr(content);<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> Flux.<span class="hljs-title">fromIterable</span><span class="hljs-params">(routeDefinitions)</span></span>;<br>    &#125; <span class="hljs-keyword">catch</span> (NacosException e) &#123;<br>        log.<span class="hljs-keyword">error</span>(<span class="hljs-string">&quot;getRouteDefinitions by nacos error&quot;</span>, e);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">return</span> Flux.<span class="hljs-title">fromIterable</span><span class="hljs-params">(Collections.EMPTY_LIST)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;添加 Nacos 配置监听器: 当配置发生变化时，发布 RefreshRoutesEvent 事件。<br></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">addListener</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        nacosConfigProperties.<span class="hljs-title function_">configServiceInstance</span>().<span class="hljs-title function_">addListener</span>(routerDataId, nacosConfigProperties.<span class="hljs-title function_">getGroup</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Listener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-title class_">Executor</span> <span class="hljs-title function_">getExecutor</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">receiveConfigInfo</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> configInfo</span>) &#123;<br>                publisher.<span class="hljs-title function_">publishEvent</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RefreshRoutesEvent</span>(<span class="hljs-variable language_">this</span>));<br>            &#125;<br>        &#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">NacosException</span> e) &#123;<br>        log.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;nacos-addListener-error&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;靠着这个监听器，可以监听配置的变化。<br><br>&emsp;&emsp;最后，通过：<br></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">private</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">RouteDefinition</span>&gt; <span class="hljs-title function_">getListByStr</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> content</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">StringUtils</span>.<span class="hljs-title function_">isNotEmpty</span>(content)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>.<span class="hljs-title function_">parseArray</span>(content, <span class="hljs-title class_">RouteDefinition</span>.<span class="hljs-property">class</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;将从 Nacos 获取的 JSON 字符串解析为 RouteDefinition 对象列表。<br><br>&emsp;&emsp;至此，Nacos 动态路由实现完成。<br><br>&emsp;&emsp;使用 Nacos 动态加载 Spring Cloud Gateway 的路由配置。DynamicRouteConfig 配置类用于定义从 Nacos 加载路由的 Bean，NacosRouteDefinitionRepository 则实现了从 Nacos 获取路由定义的逻辑，并处理了路由配置变更的监听。这样，网关可以根据 Nacos 配置的变化自动刷新路由规则，实现动态路由配置的功能。<br><br>&emsp;&emsp;在使用时，只需要在nacos配置中心中配置路由的json文件即可。详细实现可见：<a href="https://github.com/gagaducko/springcloud-microservice-security/tree/main/gateway-service">https://github.com/gagaducko/springcloud-microservice-security/tree/main/gateway-service</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 微服务学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> 网关 </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—微服务—技术栈实践(3)—微服务之间的相互调用</title>
      <link href="/2024/09/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-3-%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8/"/>
      <url>/2024/09/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-3-%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="微服务之间的相互调用"><a href="#微服务之间的相互调用" class="headerlink" title="微服务之间的相互调用"></a>微服务之间的相互调用</h2><p>&emsp;&emsp;服务多了，端口IP自然也就多了，用传统的带上IP和端口的HTTP进行Request甚至用更久远的UDP来进行通信，显然是不合理的。<br><br>&emsp;&emsp;尤其是对于微服务架构来说，很多功能需要调用多项服务才能完成，这时候，服务之间如何相互调用就成为了一个相当关键的问题，<br><br>&emsp;&emsp;首先，如果直接采用RestTemplate的方式进行服务之间的通信怎么样呢？<br><br>&emsp;&emsp;如下代码所示：<br></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">RestTemplate</span> <span class="hljs-title function_">getRestTemplate</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> <span class="hljs-title class_">RestTemplate</span> restTemplate;<br><br><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/test&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">String</span> url = <span class="hljs-string">&quot;http://localhost:8081/test&quot;</span>;<br>    <span class="hljs-title class_">String</span> result = restTemplate.<span class="hljs-title function_">getForObject</span>(url, <span class="hljs-title class_">String</span>.<span class="hljs-property">class</span>);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这种方式虽然可行，但是代码显得有些冗余，而且如果需要调用多个服务，那么代码就会显得十分混乱，相当于是做了一个硬编码，IP地址等都有了，如果服务提供方的地址端口发生了变化，该怎么做呢？当然是手动修改代码，如果有多个实例呢？通过Nginx实现服务的负载均衡？显然是不美丽的？实例增加了呢？所以，问题是很多的。<br><br>&emsp;&emsp;因此，SpringCloud提供了一个叫做OpenFeign的组件，这个组件非常好用。<br><br>&emsp;&emsp;可以简化RestTemplate的调用，使得代码看起来更加简洁。更为重要的是，通过OpenFeign，可以解决很多的上述的问题，具体在后文中进行实践与分析。<br></p><h2 id="Restful风格的调用"><a href="#Restful风格的调用" class="headerlink" title="Restful风格的调用"></a>Restful风格的调用</h2><p>&emsp;&emsp;在了解OpenFeign之前，首先需要对于Restful风格的调用做了解。<br><br>&emsp;&emsp;所谓RESTful调用就是基于REST（Representational State Transfer）架构风格的网络服务调用方式。主要用于 Web 服务之间的通信，强调资源的表示、状态转移和无状态通信。<br><br>&emsp;&emsp;对于RESTful架构来说，一个核心的概念是资源（Resource），所有的内容都被视为资源，比如用户、订单、文件等等，通常会通过URL来标识，比如&#x2F;user&#x2F;1就表示ID是1的用户，&#x2F;order&#x2F;12就表示ID为12的订单。<br><br>&emsp;&emsp;另外，RESTful API 使用 HTTP 动词来定义对资源的操作。比如GET是获取资源，POST是创建资源、PUT是创建新资源、DELETE是删除等等。<br><br>&emsp;&emsp;比如，GET &#x2F;user&#x2F;1就是获取用户为1的资源信息。<br><br>&emsp;&emsp;RESTful 服务是无状态的，即每个请求都是独立的，不依赖于之前的请求。所有需要的信息（如认证信息、资源标识等）都应包含在每个请求中。<br><br>&emsp;&emsp;RESTful API 会以不同的表现形式返回资源，如 JSON、XML 等。客户端通过解析这些表现形式，获取资源的状态。<br><br>&emsp;&emsp;RESTful 调用使用 HTTP 状态码来表示操作的结果：<br><br>&emsp;&emsp;200 OK：请求成功，返回资源。<br><br>&emsp;&emsp;201 Created：请求成功，并创建了一个新的资源。<br><br>&emsp;&emsp;400 Bad Request：请求无效，服务器无法理解请求的内容。<br><br>&emsp;&emsp;401 Unauthorized：请求需要身份验证。<br><br>&emsp;&emsp;403 Forbidden：服务器拒绝请求。<br><br>&emsp;&emsp;404 Not Found：请求的资源不存在。<br><br>&emsp;&emsp;500 Internal Server Error：服务器内部错误。<br><br>&emsp;&emsp;总结来说，RESTful 调用是一种简洁、直观的 API 设计风格，基于 HTTP 协议，通过标准的 HTTP 方法和状态码，清晰地定义资源的操作。可以说，RESTful是如何通过HTTP进行WEB服务设计的一种最佳实践。<br></p><h2 id="HTTP和Feign"><a href="#HTTP和Feign" class="headerlink" title="HTTP和Feign"></a>HTTP和Feign</h2><p>&emsp;&emsp;Feign是对RESTful API的客户端的封装调用，帮助开发者更轻松地和RESTful服务进行交互。<br>&emsp;&emsp;HTTP 和 Feign 之间的关联和区别主要体现在它们用于服务通信的方式上。HTTP 是底层的网络协议，而 Feign 是一个基于 HTTP 的声明式 Web 服务客户端。<br><br>&emsp;&emsp;Feign基于HTTP协议发出请求处理响应，但是简化了 HTTP 请求的代码。Feign 允许开发者通过声明式的方式定义接口，而不用手动处理底层 HTTP 请求的细节。<br><br>&emsp;&emsp;所以，简单的说，Feign的本质就是在HTTP之上进行了一层封装，简化了开发工作。<br><br>&emsp;&emsp;做个HTTPClient发送HTTP请求和通过Feign发送请求的对比：<br></p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">HttpClient client = HttpClient.newHttpClient();<br>HttpRequest <span class="hljs-built_in">request</span> = HttpRequest.newBuilder()<br>    .uri(URI.create(<span class="hljs-string">&quot;http://example.com/users/1&quot;</span>))<br>    .build();<br>HttpResponse&lt;String&gt; <span class="hljs-built_in">response</span> = client.send(<span class="hljs-built_in">request</span>, HttpResponse.BodyHandlers.of<span class="hljs-built_in">String</span>());<br>System.out.println(<span class="hljs-built_in">response</span>.body());<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserClient</span> &#123;<br>    <span class="hljs-meta">@RequestLine(<span class="hljs-string">&quot;GET /users/&#123;id&#125;&quot;</span>)</span><br>    User getUserById(<span class="hljs-meta">@Param(<span class="hljs-string">&quot;id&quot;</span>)</span> <span class="hljs-built_in">Long</span> id);<br>&#125;<br><br><span class="hljs-comment">// Feign 客户端构造</span><br>UserClient client = Feign.builder().target(UserClient.<span class="hljs-keyword">class</span>, <span class="hljs-string">&quot;http://example.com&quot;</span>);<br>User user = client.getUserById(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>最后，用一个图解来解释RESTful API、HTTP和Feign之间的关系：<br></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">           RESTful API<br>        (设计规范，基于HTTP)<br>               ↑<br>               |<span class="hljs-string"></span><br><span class="hljs-string">    +------------------------+</span><br><span class="hljs-string">    </span>|<span class="hljs-string">        HTTP 协议        </span>|<br>    +------------------------+<br>       ↑              ↑<br>       |<span class="hljs-string">              </span>|<br>  Feign 客户端      HttpClient等<br>（封装了HTTP调用）  （直接调用HTTP）<br><br></code></pre></td></tr></table></figure><h2 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h2><p>&emsp;&emsp;OpenFeign是SpringCloud的一个组件。他的中心思想在于通过提供一种声明式、注解驱动的接口化服务调用方式，极大地简化了微服务架构中的RESTful API调用以及服务间通信的复杂性。它使得开发者可以聚焦于业务逻辑本身，如同调用本地方法一样便捷地调用远程服务，而不必深陷于HTTP请求细节的实现。<br><br>&emsp;&emsp;OpenFeign有以下主要特点：<br></p><ol><li>声明式HTTP客户端：通过定义接口和注解，可以轻松地发起HTTP请求，并自动处理响应。</li><li>支持Spring MVC注解：可以直接使用Spring MVC的注解，如@GetMapping、@PostMapping等，来定义请求的URL、请求方法、请求参数等。</li><li>支持负载均衡：与Ribbon集成，可以自动实现服务实例的负载均衡。</li><li>支持Hystrix熔断：与Hystrix集成，可以自动实现服务调用的熔断保护。</li></ol><h3 id="OpenFeign的简单使用"><a href="#OpenFeign的简单使用" class="headerlink" title="OpenFeign的简单使用"></a>OpenFeign的简单使用</h3><p>&emsp;&emsp;首先，需要在pom.xml文件中引入OpenFeign的依赖，如下所示：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;然后，在启动类上需要添加上@EnableFeignClients注解，如下所示：<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@EnableFeignClients</span><br>public class Application &#123;<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(OrderApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;接着，创建一个Feign的客户端接口，通过@FeignClient做注解标记，如下所示：<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@FeignClient</span>(<span class="hljs-string">&quot;user-service&quot;</span>)<br>public interface UserFeignClient &#123;<br>    <span class="hljs-variable">@GetMapping</span>(<span class="hljs-string">&quot;/user/&#123;id&#125;&quot;</span>)<br>    User <span class="hljs-built_in">getUserById</span>(<span class="hljs-variable">@PathVariable</span>(<span class="hljs-string">&quot;id&quot;</span>) Long id);<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;最后，在需要调用服务的地方，注入UserFeignClient，并调用其方法即可，如下所示：<br></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserFeignClient userFeignClient;<br><br>    <span class="hljs-keyword">public</span> Order getOrderById(<span class="hljs-built_in">Long</span> id) &#123;<br>        <span class="hljs-comment">// 调用user-service的getUserById方法获取用户信息</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;由此，便实现了对于该服务的一个调用。<br><br>&emsp;&emsp;值得一提的是，OpenFeign集成了Ribbon这样一个客户端负载均衡器，使得OpenFeign发起的HTTP请求可以自动地在多个服务实例之间进行一个负载均衡。如果想要自定义这样一个负载均衡策略，则需要引入ribbon再做进一步的操作。<br></p><h2 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h2><p>&emsp;&emsp;对于微服务之间的消息通信来说，如果只是靠着OpenFeign这样的http客户端来实现微服务之间的通信，在很多地方是存在缺口的。<br><br>&emsp;&emsp;尤其是对于一些高并发、大量甚至海量数据的传递来说，是有问题的，OpenFeign进行服务之间的同步调用，而也需要将耗时长量大的消息放入消息队列做异步的处理也是相当重要的，因此，对于消息中间件的详细使用见后文内容。<br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 微服务学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> OpenFeign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—微服务—技术栈实践(2)—网关</title>
      <link href="/2024/09/08/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-2-%E2%80%94%E7%BD%91%E5%85%B3/"/>
      <url>/2024/09/08/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-2-%E2%80%94%E7%BD%91%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是网关"><a href="#什么是网关" class="headerlink" title="什么是网关"></a>什么是网关</h2><p>&emsp;&emsp;网关是一项围绕微服务的重要技术。当微服务多了，端口这些东西自然也就多了，那么也就是说，微服务的入口就多了，这样是相当难以管理的，因此，API网关的出现从某种方面来讲，就是为了解决这个问题。<br><br>&emsp;&emsp;API网关内部封装了系统内部架构，为每个客户端提供了一个定制的API，由此实现成为一个微服务系统的唯一入口。<br><br>&emsp;&emsp;换言之，通过网关，所有的客户端和消费端都需要通过统一的网关来接入微服务系统，在网关层来处理所有非业务相关的东西。比如身份验证、监控、负载均衡、缓存、限流熔断、协议转换等等。<br><br>&emsp;&emsp;对于网关来说，要统筹后端服务，要分为数据平面和控制平面。数据平面主要是为了统一对外暴露后端服务的API等，而控制平面则是对后端服务做一个统一的管控和配置。<br><br>&emsp;&emsp;对于网关来说，最核心的功能就是路由功能。通过路由功能将微服务网关的请求转发到目标微服务，在实际上的微服务架构中，网关可以结合着注册中心的动态服务发现技术来发现后端服务，也可以借助配置中心的动态配置来变更动态路由。比如网关是localhost:38888，A服务的端口是3001，B服务端口是3002，对于使用来说，要使用A、B两个服务，便需要通过调用localhost:3001和3002来实现，这样显示是复杂的，尤其是服务多了之后，但是当在网关配置好路由后，便可以通过localhost:38888&#x2F;A访问A服务，通过localhost:38888&#x2F;B访问B服务，这样就会方便许多。<br><br>&emsp;&emsp;第二，对于网关来说，同样重要的还有负载均衡的功能，通过服务发现工具，通过如loadBalancer、轮询、IP地址哈希机制等方式来实现对于下游微服务的负载均衡。<br><br>&emsp;&emsp;此外，网关还可以和权限模块，与Redis、OAuth2等技术相结合，实现对于微服务系统的整体统一鉴权，API网关是统一管理安全性的绝佳场所，可以将认证的部分抽取此处，使得后续的服务，只需要关注业务逻辑而无需关注认证等安全逻辑。<br><br>&emsp;&emsp;网关还有一个作用，就是限流熔断，由于网关是统一的入口，对于一些由客户端访问次数和频率限制的服务来说，一些高并发请求下是要有限流需求的，网关要可以进行主动的熔断，来保护后端服务，确保前端用户的体验能够合理。<br><br>&emsp;&emsp;此外，网关还可以对请求进行一些过滤，来实现一个黑白名单的功能，作为一种终端管理的选择。<br><br>&emsp;&emsp;其他功能还有许多，于此不再一一叙述。可以说，网关对于微服务来说，是非常重要的一个组成部分。<br></p><h2 id="常见的网关"><a href="#常见的网关" class="headerlink" title="常见的网关"></a>常见的网关</h2><p>&emsp;&emsp;常见的网关有许多。<br><br>&emsp;&emsp;首先，Nginx作为一个反向代理服务器，自然是可以作为一种网关来使用的。于此不再赘述。<br><br>&emsp;&emsp;其次，对于Spring Cloud和Spring Cloud Alibaba这一套架构来说，Spring Cloud Gateway是一种相当重要的网关。后文进行详细阐述与实践。<br><br>&emsp;&emsp;在此以外，还有比如Zuul等网关，性能各异、功能也各异，于此不再过多赘述。<br></p><h2 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h2><p>&emsp;&emsp;Spring Cloud Gateway 是由WebFlux + Netty + Reactor所实现的一种响应式的 API 网关。<br><br>&emsp;&emsp;就其在Spring Cloud的定位来说，是为了取代如Netflix Zuul这样的老网关作为一个新一代的网关来使用的。<br><br>&emsp;&emsp;比起上一代的网关，Spring Cloud Gateway的功能更强大、性能更强大、可拓展的点也更多。<br><br>&emsp;&emsp;于后文介绍一个Gateway最基本的使用。并在这个基础上，对于动态路由、动态服务容错、IP黑白名单机制、鉴权等方面做一个详细的实践及阐述。<br></p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>&emsp;&emsp;一个简单的Spring Gateway网关很好搭建，创建一个gateway-service模块。映入Spring-cloud Gateway依赖。<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;并添加合适的配置，配置网关的路由规则，包括路由路径、目标信息服务等等。比如如下一个配置<br></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">spring:</span><br><span class="hljs-symbol">  cloud:</span><br><span class="hljs-symbol">    gateway:</span><br><span class="hljs-symbol">      routes:</span><br>        - id: user-auth-service<br><span class="hljs-symbol">          uri:</span> http:<span class="hljs-comment">//localhost:19088</span><br><span class="hljs-symbol">          predicates:</span><br>            - P<span class="hljs-attr">ath</span><span class="hljs-operator">=</span><span class="hljs-keyword">/auth/</span>**<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在该配置中，id是路由id，唯一的，uri是路由的目标地址，在没有加入注册中心之前，可以直接通过http这种路径路由，predicate是一个路由断言，判断请求是否符合路由规则，其下的path是要求请求路径以该path开头。<br><br>&emsp;&emsp;配置完成后，启动项目，访问网关的路径，即可访问到目标服务。例如，在此，访问localhost:8080&#x2F;auth&#x2F;check_token的这个路径，便会被网关路由到19088的服务上并调用路径为&#x2F;check_token的功能。<br><br>&emsp;&emsp;至此，一个简单的Spring Cloud Gateway网关就搭建完成了。<br><br>&emsp;&emsp;对于网关更复杂的使用，后续再进行详述。<br><br>&emsp;&emsp;值得一提的是，断言predicate是用于定义请求匹配的条件，是很重要的，种类很多，Path只是一种，就是更具请求的路径来进行匹配。<br></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">- Path <span class="hljs-operator">=</span> /auth/**<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;匹配路径为&#x2F;auth&#x2F;**的请求。<br><br>&emsp;&emsp;Method是根据请求的HTTP方法进行匹配，比如：<br></p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">- <span class="hljs-keyword">Method</span> = <span class="hljs-title function_">GET</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;匹配所有GET请求。<br><br>&emsp;&emsp;Header是根据请求头进行匹配，比如：<br></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>Header = X-Request-Id, \d+<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;匹配所有请求头中包含X-Request-Id并且值为数字的请求。<br><br>&emsp;&emsp;Query是根据请求参数进行匹配，比如：<br></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>Query = key, value<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;匹配所有请求参数中包含key并且值为value的请求。<br><br>&emsp;&emsp;还有包括cookie的匹配等等，根据实际情况具体使用。此外，还可以通过AND将多个断言组合成一个逻辑条件来实现更为复杂的匹配，比如：<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">- <span class="hljs-attribute">Path</span>=/auth/** <span class="hljs-keyword">AND</span> <span class="hljs-attribute">Method</span>=GET<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这个能同时匹配路径是&#x2F;auth&#x2F;**，同时是GET请求的请求。<br><br>&emsp;&emsp;除了路由以外，网关的另一大关键内容过滤器放置于后续权限一节陈述。<br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;对于微服务来说，网关几乎是不可或缺，必不可少的，通过网关，能够实现微服务业务与技术逻辑相解耦的一个重中之重。<br><br>&emsp;&emsp;如果用较为简洁的语言来阐述网关，几乎就等同于路由转发+过滤器。路由转发就是其数据平面的工作而过滤器便是其控制平面的工作。<br><br>&emsp;&emsp;由此，重要性，不言而喻。<br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 微服务学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> 网关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—微服务—技术栈实践(1)—注册中心与配置中心</title>
      <link href="/2024/09/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-1-%E2%80%94%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
      <url>/2024/09/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E6%8A%80%E6%9C%AF%E6%A0%88%E5%AE%9E%E8%B7%B5-1-%E2%80%94%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h2 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h2><h3 id="什么是注册中心"><a href="#什么是注册中心" class="headerlink" title="什么是注册中心"></a>什么是注册中心</h3><p>&emsp;&emsp;注册中心是Spring Cloud和Spring Cloud Alibaba系列的第一步。服务的注册与发现是最基本的操作。<br><br>&emsp;&emsp;在微服务中，注册中心主要体现为三种角色。首先是服务注册中心，也就是Registry，用于保存服务提供者的注册信息，当服务提供者的节点发生变更的时候，注册中心也会同步的变更，服务消费者在感知到这个变更后，会刷新本地内存中所缓存的服务节点列表。<br><br>&emsp;&emsp;第二就是服务提供者（server），服务提供者在自身启动的时候，向Registry注册服务，并向注册中心定期发送心跳来确保注册中心认为该服务还活着。<br><br>&emsp;&emsp;最后，是服务消费者，启动的时候，服务消费者会从注册中心订阅服务，把注册中心返回的服务节点列表缓存在本地内存中，由此来和服务提供者建立联系。<br><br>&emsp;&emsp;服务消费者从本地缓存的服务节点列表中，基于负载均衡算法选择一个服务提供者的示例来发起调用。<br></p><h3 id="常见的注册中心与注册中心需要的功能"><a href="#常见的注册中心与注册中心需要的功能" class="headerlink" title="常见的注册中心与注册中心需要的功能"></a>常见的注册中心与注册中心需要的功能</h3><p>&emsp;&emsp;由此，对于一个服务注册中心来说，首先，需要有一个服务注册的API接口，让服务的提供者通过调用该接口完成服务注册。<br><br>&emsp;&emsp;需要一个心跳检查的接口，服务提供方定期通过该接口汇报自身的服务状态。<br><br>&emsp;&emsp;此外，还需要一些如服务的查询、变更查询、注销等接口。<br><br>&emsp;&emsp;常见的注册中心比如nacos，eureka，zookeeper，ETCD等等。此处详细留痕常用的spring cloud的eureka和spring cloud alibaba的nacos。<br></p><h3 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h3><h4 id="什么是Eureka"><a href="#什么是Eureka" class="headerlink" title="什么是Eureka"></a>什么是Eureka</h4><p>&emsp;&emsp;Eureka是Netflix开源的服务发现框架，Spring Cloud对其进行了集成，并提供了良好的支持。Eureka分为Eureka Server和Eureka Client，Eureka Server是注册中心，Eureka Client是服务提供者和服务消费者。<br><br>&emsp;&emsp;Eureka Server需要配置一个端口，用于接收Eureka Client的注册请求，同时，Eureka Server需要配置一个地址，用于接收Eureka Client的查询请求。<br></p><h4 id="Eureka的架构"><a href="#Eureka的架构" class="headerlink" title="Eureka的架构"></a>Eureka的架构</h4><p>&emsp;&emsp;从总体来说，Eureka是一个CS架构的东西。主要由两个组件组成，Eureka Server与Eureka Client。Eureka Server是服务注册中心，用于存储所有可用的服务实例信息。Eureka Client是应用程序的客户端，用于向Eureka Server注册服务并查找其他服务。<br><br>&emsp;&emsp;在Eureka中，每个服务都可以注册为一个Eureka Client，并将自己的信息注册到Eureka Server中。当服务启动时，它会向Eureka Server发送一个心跳，告诉Eureka Server自己还活着。如果Eureka Server在一段时间内没有收到心跳，它将自动将该服务从注册表中删除。<br></p><h4 id="Eureka的流程"><a href="#Eureka的流程" class="headerlink" title="Eureka的流程"></a>Eureka的流程</h4><p>&emsp;&emsp;首先是启动Server。<br><br>&emsp;&emsp;接着是启动Client。<br><br>&emsp;&emsp;服务启动后，Client会向Server注册自己的信息，发送一个包含服务实例ID，服务主机名端口，服务健康状态，服务元数据登的POST请求。<br><br>&emsp;&emsp;当Eureka Server收到这些消息后，就会储存这些消息实例的信息到服务注册表里。<br><br>&emsp;&emsp;其他服务可以通过Eureka Client以负载均衡的方式发现其他可用实例并选择一个进行请求。<br><br>&emsp;&emsp;服务实例可能会在运行的过程中更改其状态，例如服务实例的健康状态可能会更改。当服务实例状态更改时，服务会向Eureka Server发送一个PUT请求，以更新其状态信息。Eureka Server将根据收到的信息更新服务实例的状态。<br><br>&emsp;&emsp;当服务实例停止时，服务实例会向Eureka Server发送一个DELETE请求，以从注册表中删除自己的信息。Eureka Server将根据收到的信息从注册表中删除该服务实例的信息。<br></p><h4 id="Eureka的实践"><a href="#Eureka的实践" class="headerlink" title="Eureka的实践"></a>Eureka的实践</h4><p>&emsp;&emsp;Eureka是集成进spring cloud了的，因此，使用起来非常简单。<br></p><h5 id="Eureka服务端"><a href="#Eureka服务端" class="headerlink" title="Eureka服务端"></a>Eureka服务端</h5><p>&emsp;&emsp;首先需要有一个Eureka的服务端。通过IDEA快速创建Spring Boot项目，并且选择Eureka服务端，也可在Pom文件添加响应的依赖。（此外，还需要web相关的依赖，来确保eureka的服务端可以正常使用）<br><br>&emsp;&emsp;创建成功后，在spring boot的启动类上加入Eureka服务端的注解。<br></p><figure class="highlight less"><figcaption><span>[title] [lang:language] [url] [link text] [additional options]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@EnableEurekaServer</span><br>public class EurekaServerApplication &#123;<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(EurekaServerApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;配置文件如下：<br></p><figure class="highlight ini"><figcaption><span>[title] [lang:language] [url] [link text] [additional options]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">server.port</span>=<span class="hljs-number">8761</span><br><span class="hljs-attr">spring.application.name</span>=eureka<br><span class="hljs-attr">eureka.instance.hostname</span>=localhost<br><span class="hljs-attr">eureka.instance.prefer-ip-address</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">eureka.server.wait-time-in-ms-when-sync-empty</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">eureka.server.enable-self-preservation</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">eureka.server.eviction-interval-timer-in-ms</span>=<span class="hljs-number">60000</span><br><span class="hljs-attr">eureka.client.register-with-eureka</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">eureka.client.fetch-registry</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">eureka.client.instance-info-replication-interval-seconds</span>=<span class="hljs-number">10</span><br><span class="hljs-attr">eureka.client.registry-fetch-interval-seconds</span>=<span class="hljs-number">30</span><br><span class="hljs-attr">eureka.client.service-url.defaultZone</span>=http://<span class="hljs-variable">$&#123;eureka.instance.hostname&#125;</span>:<span class="hljs-variable">$&#123;server.port&#125;</span>/eureka<br><span class="hljs-attr">eureka.instance.instance-id</span>=<span class="hljs-variable">$&#123;spring.application.name&#125;</span>:<span class="hljs-variable">$&#123;spring.cloud.client.ip-address&#125;</span>:<span class="hljs-variable">$&#123;spring.application.instance_id:$&#123;server.port&#125;</span>&#125;<br><span class="hljs-attr">eureka.instance.lease-expiration-duration-in-seconds</span>=<span class="hljs-number">90</span><br><span class="hljs-attr">management.endpoints.web.exposure.include</span>=*<br><span class="hljs-attr">management.endpoint.health.show-details</span>=always<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;通用的不表，eureka.instance.prefer-ip-address&#x3D;true是指示Eureka注册服务时，优先使用IP地址而不是主机名。<br><br>&emsp;&emsp;eureka.server.wait-time-in-ms-when-sync-empty&#x3D;0表示的是Eureka服务器在启动阶段同步注册信息的时候，如果注册信息是空的，那么服务器所需要等待的时间（毫秒）。一般默认是5分钟。<br><br>&emsp;&emsp;eureka.server.enable-self-preservation&#x3D;false是用于控制Eureka服务器是否启用自我保护模式。在自我保护模式下，Eureka会保护服务注册表中的信息，即使出现网络分区也不会注销任何服务实例。<br><br>&emsp;&emsp;eureka.server.eviction-interval-timer-in-ms&#x3D;60000设置Eureka服务器清理无效服务实例的时间间隔（毫秒）。<br><br>&emsp;&emsp;eureka.client.register-with-eureka&#x3D;true用于指示客户端是否向Eureka注册自己。<br><br>&emsp;&emsp;eureka.client.instance-info-replication-interval-seconds&#x3D;10设置客户端将实例信息复制到Eureka服务器的间隔时间（秒）。<br><br>&emsp;&emsp;eureka.client.registry-fetch-interval-seconds&#x3D;30设置客户端从Eureka服务器获取注册信息的间隔时间（秒）。<br><br>&emsp;&emsp;eureka.instance.lease-expiration-duration-in-seconds&#x3D;90设置Eureka客户端续租到期时间（秒），即服务实例在多少秒内没有向Eureka服务器发送心跳，服务器会将该实例从注册表中删除。<br><br>&emsp;&emsp;如图所示为eureka注册中心的显示。<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%BE%AE%E6%9C%8D%E5%8A%A1_%E6%B3%A8%E5%86%8C%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/Eureka%E7%95%8C%E9%9D%A2.png" alt="Eureka注册中心" title="Eureka注册中心"><br>&emsp;&emsp;当想要自己对Eureka做操作时，通常可采用Eureka REST API或者编程方式。<br></p><h5 id="Eureka客户端"><a href="#Eureka客户端" class="headerlink" title="Eureka客户端"></a>Eureka客户端</h5><p>&emsp;&emsp;客户端也非常容易。<br><br>&emsp;&emsp;还是使用IDEA创建Spring Boot项目，并且选择Eureka客户端依赖，也可在Pom中直接添加。<br><br>&emsp;&emsp;随后配置Eureka的服务端地址，还是采用Properties格式如下。<br></p><figure class="highlight ini"><figcaption><span>[title] [lang:language] [url] [link text] [additional options]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">server.port</span>=<span class="hljs-number">8889</span><br><span class="hljs-attr">spring.application.name</span>=eureka-client<br><span class="hljs-attr">eureka.client.service-url.defaultZone</span>=http://localhost:<span class="hljs-number">8761</span>/eureka/<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;随后在启动类添加:<br></p><figure class="highlight less"><figcaption><span>[title] [lang:language] [url] [link text] [additional options]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@EnableDiscoveryClient</span><br>public class EurekaServerApplication &#123;<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(EurekaServerApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;启动后，访问Eureka注册中心，可以看到Eureka客户端已经注册到Eureka服务器上。(还是JAVA在这里好用哇……)<br></p><h5 id="Eureka的REST-API"><a href="#Eureka的REST-API" class="headerlink" title="Eureka的REST API"></a>Eureka的REST API</h5><figure class="highlight gradle"><figcaption><span>[title] [lang:language] [url] [link text] [additional options]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle">GET <span class="hljs-regexp">/eureka/</span>apps：获取所有注册的应用程序和实例信息。<br>GET <span class="hljs-regexp">/eureka/</span>apps/&#123;appID&#125;：获取指定应用程序的所有实例信息。<br>GET <span class="hljs-regexp">/eureka/</span>apps<span class="hljs-regexp">/&#123;appID&#125;/</span>&#123;instanceID&#125;：获取指定应用程序和实例的详细信息。<br>POST <span class="hljs-regexp">/eureka/</span>apps/&#123;appID&#125;：注册一个新的应用程序实例。<br>PUT <span class="hljs-regexp">/eureka/</span>apps<span class="hljs-regexp">/&#123;appID&#125;/</span>&#123;instanceID&#125;：更新指定应用程序和实例的信息。<br><span class="hljs-keyword">DELETE</span> <span class="hljs-regexp">/eureka/</span>apps<span class="hljs-regexp">/&#123;appID&#125;/</span>&#123;instanceID&#125;：注销指定应用程序和实例。<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;如图所示为请求&#x2F;eureka&#x2F;apps获得注册信息的图片。其他同理。<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%BE%AE%E6%9C%8D%E5%8A%A1_%E6%B3%A8%E5%86%8C%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/eureka%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF.png" alt="Eureka的注册信息API获取" title="Eureka的注册信息API获取"></p><h5 id="Eureka的编程方式"><a href="#Eureka的编程方式" class="headerlink" title="Eureka的编程方式"></a>Eureka的编程方式</h5><p>&emsp;&emsp;首先需要确保项目中包含了Eureka的客户端依赖。<br></p><figure class="highlight xml"><figcaption><span>[title] [lang:language] [url] [link text] [additional options]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;然后就可以采用类似于如下的编程方式，来获得Eureka现在的相关信息。<br><br>&emsp;&emsp;首先是Service：<br></p><figure class="highlight typescript"><figcaption><span>[title] [lang:language] [url] [link text] [additional options]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DiscoveryService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">DiscoveryClient</span> discoveryClient;<br><br>    <span class="hljs-comment">// 获得对应服务的实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">ServiceInstance</span>&gt; <span class="hljs-title function_">getServiceInstances</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> serviceName</span>) &#123;<br>        <span class="hljs-keyword">return</span> discoveryClient.<span class="hljs-title function_">getInstances</span>(serviceName);<br>    &#125;<br><br>    <span class="hljs-comment">// 获取所有服务ID</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">getAllServices</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> discoveryClient.<span class="hljs-title function_">getServices</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 获取所有服务的所有服务实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">ServiceInstance</span>&gt;&gt; <span class="hljs-title function_">getAllServiceInstances</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">getAllServices</span>().<span class="hljs-title function_">stream</span>()<br>                .<span class="hljs-title function_">collect</span>(<span class="hljs-title class_">Collectors</span>.<span class="hljs-title function_">toMap</span>(<br>                        serviceId -&gt; serviceId,<br>                        <span class="hljs-attr">this</span>::getServiceInstances<br>                ));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;调用对应接口如下：<br><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%BE%AE%E6%9C%8D%E5%8A%A1_%E6%B3%A8%E5%86%8C%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/eureka_service.png" alt="编程方式获取Eureka的服务注册信息" title="编程方式获取Eureka的服务注册信息"><br><img src="/../imgs/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%BE%AE%E6%9C%8D%E5%8A%A1_%E6%B3%A8%E5%86%8C%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/eureka_%E5%AE%9E%E4%BE%8B.png" alt="编程方式获取Eureka的某个服务的实例信息" title="编程方式获取Eureka的某个服务的实例信息"></p><h3 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h3><h4 id="什么是Nacos"><a href="#什么是Nacos" class="headerlink" title="什么是Nacos"></a>什么是Nacos</h4><p>&emsp;&emsp;Nacos是阿里巴巴开源的一个动态服务发现、配置管理和服务管理平台。Nacos提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。Nacos就是注册中心+配置中心，可以取代Eureka+Config。<br></p><h4 id="Nacos的安装"><a href="#Nacos的安装" class="headerlink" title="Nacos的安装"></a>Nacos的安装</h4><p>&emsp;&emsp;Nacos的安装非常简单，只需要下载解压即可，下载地址：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a><br><br>&emsp;&emsp;下载完成后，进入bin目录，执行以下命令启动Nacos：<br></p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">startup.<span class="hljs-built_in">cmd</span> -m standalone<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;启动完成后，访问<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a><br><br>&emsp;&emsp;即可看到Nacos的界面。<br><br>&emsp;&emsp;此外，还可以采用Docker或Kubernetes的相关方式来安装启动nacos，暂按不表。<br></p><h4 id="Nacos的实践"><a href="#Nacos的实践" class="headerlink" title="Nacos的实践"></a>Nacos的实践</h4><p>&emsp;&emsp;Nacos的实践与Eureka类似，这里不再赘述，详见Eureka的实践。<br><br>&emsp;&emsp;值得注意的是，@EnableDiscoveryClient这样一个注解，不止适用于Eureka作为注册中心，还适用于如Nacos等其他注册中心来使用。<br></p><h4 id="Nacos的Open-API"><a href="#Nacos的Open-API" class="headerlink" title="Nacos的Open API"></a>Nacos的Open API</h4><p>&emsp;&emsp;与Eureka相似，Nacos也提供一系列OpenAPI可供操作，详见Nacos OpenAPI指南：<a href="https://nacos.io/zh-cn/docs/open-api.html">https://nacos.io/zh-cn/docs/open-api.html</a><br></p><h4 id="Nacos的编程方式"><a href="#Nacos的编程方式" class="headerlink" title="Nacos的编程方式"></a>Nacos的编程方式</h4><p>&emsp;&emsp;Nacos的编程方式与Eureka相似，参见：<a href="https://github.com/gagaducko/springboot-nacosapi-example">https://github.com/gagaducko/springboot-nacosapi-example</a><br><br>&emsp;&emsp;此处为一个采用Nacos编程方式对注册中心信息进行获取与管理的示例，这里不再赘述。<br></p><h3 id="Nacos与Eureka的优劣"><a href="#Nacos与Eureka的优劣" class="headerlink" title="Nacos与Eureka的优劣"></a>Nacos与Eureka的优劣</h3><p>&emsp;&emsp;Eureka专注于服务的注册与发现，而nacos即是注册中心，也是配置中心，支持动态的配置管理。在生态上，Nacos除了与Spring Cloud有良好的兼容性外，同时也支持Spring Cloud Alibaba生态系统，也适合在Kubernetes环境下部署使用。<br><br>&emsp;&emsp;此外，在扩展性上，Eureka支持水平扩展，在CAP中是AP模型，遵循高可用性，即便是部分节点通信失败也能继续注册和发现，缺点在于极端情况下节点的数据可能就会不一样了，短时间内不同步。而Nacos则支持AP与CP两种模式，即可选择高可用，也可以选择强一致。Nacos 在集群模式下可以通过 Raft 一致性协议保证强一致性<br><br>&emsp;&emsp;另外，Eureka相对来说比较轻量级，适合服务数量较少的场景，而Nacos则适合大规模的微服务集群开发，内存和储存消耗较高但是性能和功能的扩展性更强，对于多语言的支持也更好。<br></p><h2 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h2><h3 id="为什么需要配置中心"><a href="#为什么需要配置中心" class="headerlink" title="为什么需要配置中心"></a>为什么需要配置中心</h3><p>&emsp;&emsp;配置文件是一个很让人熟悉的东西，尤其是对于Spring Boot项目来说，完善配置文件是相当重要的，比如Mysql在项目中的配置，Redis在项目中的配置，以及其他的一些可能会变更的配置。<br><br>&emsp;&emsp;对于一些复杂的环境下，当修改配置后，必须重启服务，否则配置无法生效，这是相当麻烦的，因此，这种省事儿的配置方法是不太好的，最好是能够直接在一个地方修改配置文件，项目读取这个配置文件，省去在配置信息有所变化的情况下，不断打包打镜像重启的繁杂工作。<br></p><h3 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h3><p>&emsp;&emsp;Spring Cloud Config是spring cloud家族中最早的配置 中心，也分为配置中心服务端和配置中心客户端。<br><br>&emsp;&emsp;通过集成Spring Cloud Config，可以采用数据库、SVN、本地文件等作为配置的储存，以下就三块来做一下Config的实践。<br></p><h4 id="实现最简单的配置中心服务端"><a href="#实现最简单的配置中心服务端" class="headerlink" title="实现最简单的配置中心服务端"></a>实现最简单的配置中心服务端</h4><p>&emsp;&emsp;当使用Spring Cloud Config的情况下，可以加入如此依赖来实验一个config的服务端。<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;而后在启动类上注入:<br></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@EnableConfigServer</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;接着在配置文件中做配置，可以采用git的方式，也可以采用本地的方式。<br><br>&emsp;&emsp;如git:<br></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">spring.application.name</span>=spring-cloud-config-server<br><span class="hljs-attr">server.port</span>=<span class="hljs-number">8080</span><br><br><span class="hljs-comment"># 使用git作为远程配置</span><br><span class="hljs-attr">spring.cloud.config.server.git.uri</span>=https://github.com/gagaducko/learning_demos<br><span class="hljs-attr">spring.cloud.config.server.git.username</span>=git username<br><span class="hljs-attr">spring.cloud.config.server.git.password</span>=git password<br><span class="hljs-attr">spring.cloud.config.server.git.default-label</span>=main<br><span class="hljs-attr">spring.cloud.config.server.git.search-paths</span>=config-demo<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;此处以本地为例：<br></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">spring.application.name</span>=spring-cloud-config-server<br><span class="hljs-attr">server.port</span>=<span class="hljs-number">8080</span><br><br><span class="hljs-comment"># 用本地配置</span><br><span class="hljs-attr">spring.cloud.config.server.native.search-locations</span>=D:/code_gagaduck/learning_demos/config-demo<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;配置完成后，启动服务端，访问<a href="http://localhost:8080/%7Bapplication%7D/%7Bprofile%7D[/%7Blabel%7D]%EF%BC%8C%E5%8D%B3%E5%8F%AF%E8%8E%B7%E5%8F%96%E5%88%B0%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E3%80%82">http://localhost:8080/{application}/{profile}[/{label}]，即可获取到配置信息。</a><br><br>&emsp;&emsp;如访问<a href="http://localhost:8080/test/properties%EF%BC%8C%E5%8D%B3%E5%8F%AF%E8%8E%B7%E5%8F%96%E5%88%B0test.properties%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E3%80%82">http://localhost:8080/test/properties，即可获取到test.properties的配置信息。</a><br></p><h4 id="创建配置中心客户端使用配置"><a href="#创建配置中心客户端使用配置" class="headerlink" title="创建配置中心客户端使用配置"></a>创建配置中心客户端使用配置</h4><p>&emsp;&emsp;创建一个Spring Boot项目，引入依赖：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在配置文件中做配置：<br></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">spring.application.name</span>=spring-cloud-config-client<br><span class="hljs-attr">server.port</span>=<span class="hljs-number">8081</span><br><span class="hljs-attr">spring.config.import</span>=optional:configserver:<br><span class="hljs-attr">spring.cloud.config.uri</span>=http://localhost:<span class="hljs-number">8080</span><br><span class="hljs-attr">spring.cloud.config.name</span>=test<br><span class="hljs-attr">spring.cloud.config.profile</span>=properties<br><span class="hljs-comment">#spring.cloud.config.label=main</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;配置完成后，启动服务端，即可获取到配置信息。<br><br>&emsp;&emsp;需要注意的是，如果是git，是需要有label这些来定位的。另外，对于SpringBoot3.X来说，配置加载机制发生了变化，需要手动指定 spring.config.import 属性，以导入配置服务器的配置源。即，需要通过spring.config.import&#x3D;optional:configserver:来明确指出从配置服务器导入配置<br><br>&emsp;&emsp;当然，也可以加上如下方法来禁用对这一个的检查：<br></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">spring.cloud.config.enabled</span>=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;例如写个简单的controller检查一下：<br></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;env&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String env;<br><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;user.username&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;user.password&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/env&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> String env() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;env in test is: &quot;</span> + env;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/username&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> String username() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;username in test is: &quot;</span> + username;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/password&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> String password() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;password in test is: &quot;</span> + password;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;调用<a href="http://localhost:8081/username%EF%BC%8C%E8%8E%B7%E5%BE%97%E5%9B%9E%E5%A4%8D%EF%BC%9A">http://localhost:8081/username，获得回复：</a><br></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">username <span class="hljs-keyword">in</span> test <span class="hljs-keyword">is</span>: gagaducko<br></code></pre></td></tr></table></figure><h4 id="在将Spring-Cloud-Config注册到注册中心的情况下，与其他服务进行通信"><a href="#在将Spring-Cloud-Config注册到注册中心的情况下，与其他服务进行通信" class="headerlink" title="在将Spring Cloud Config注册到注册中心的情况下，与其他服务进行通信"></a>在将Spring Cloud Config注册到注册中心的情况下，与其他服务进行通信</h4><p>&emsp;&emsp;将Spring Cloud Config注册到注册中心后，很显然的是，要发挥注册中心的作用，避免客户端程序直接与配置中心的服务端做交互，而要通过注册中心来做交互，也就是说要避免直接对spring cloud config的ip端口在客户端中进行配置，而要通过Eureka来进行实现。<br><br>&emsp;&emsp;参考上文，将server服务注册到注册中心中，启用为一个Eureka客户端，对于其他服务来说，引入eureka的client依赖，并配置客户端服务：<br></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 配置服务地址通过注册中心发现</span><br><span class="hljs-attr">spring.cloud.config.discovery.enabled</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">spring.cloud.config.discovery.service-id</span>=spring-cloud-config-server<br><span class="hljs-comment"># Eureka 注册中心地址</span><br><span class="hljs-attr">eureka.client.service-url.defaultZone</span>=http://localhost:<span class="hljs-number">8761</span>/eureka/<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这样，客户端在启动的时候，会通过注册中心去发现配置中心的服务示例，并获取配置信息。<br></p><h4 id="实现配置的自动刷新"><a href="#实现配置的自动刷新" class="headerlink" title="实现配置的自动刷新"></a>实现配置的自动刷新</h4><p>&emsp;&emsp;在Spring Cloud Config中，在项目启动的额时候加载配置内容。这一机制导致当配置内容修改后不会自动刷新的，因此，需要重启。这样是不太好的。可以通过@RefreshScope注解并结合actuator来实现配置的自动刷新。<br><br>&emsp;&emsp;需要做如下配置，首先要映入spring-boot-starter-actuator这个包：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;然后在配置文件中添加如下配置：<br></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">management<span class="hljs-selector-class">.endpoints</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.exposure</span>.include=*<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;在客户端程序中，通过如下方式来刷新配置：<br></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@RefreshScope</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;例如：<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RestController</span><br><span class="hljs-variable">@RefreshScope</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这样，便可以通过调用这样一个接口来实现刷新配置了：<br></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8081</span><span class="hljs-regexp">/actuator/</span>refresh<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;调用后，配置内容便刷新了。<br><br>&emsp;&emsp;比如，将test.properties中的内容的username变为gagaducko111:<br></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">username <span class="hljs-keyword">in</span> test <span class="hljs-keyword">is</span>: gagaducko111<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;此外，也可通过增加监听器自动刷新，此处暂按不表，见网关实现动态路由的部分。<br></p><h3 id="Nacos-1"><a href="#Nacos-1" class="headerlink" title="Nacos"></a>Nacos</h3><p>&emsp;&emsp;Nacos除了是注册中心，也是配置中心。<br></p><h4 id="创建配置中心服务端"><a href="#创建配置中心服务端" class="headerlink" title="创建配置中心服务端"></a>创建配置中心服务端</h4><p>&emsp;&emsp;当Nacos安装Ok后，就可以作为配置中心进行使用。此处不表。<br></p><h4 id="创建配置中心客户端使用配置-1"><a href="#创建配置中心客户端使用配置-1" class="headerlink" title="创建配置中心客户端使用配置"></a>创建配置中心客户端使用配置</h4><p>&emsp;&emsp;对于需要使用Nacos配置中心的客户端来说，使用方式也是简单的。<br></p><h4 id="Nacos配置中心的Open-API"><a href="#Nacos配置中心的Open-API" class="headerlink" title="Nacos配置中心的Open API"></a>Nacos配置中心的Open API</h4><p>&emsp;&emsp;与Nacos注册中心相似，Nacos也提供一系列OpenAPI可供对配置中心进行操作，详见Nacos OpenAPI指南：<a href="https://nacos.io/zh-cn/docs/open-api.html">https://nacos.io/zh-cn/docs/open-api.html</a><br></p><h4 id="Nacos配置中心的编程方式"><a href="#Nacos配置中心的编程方式" class="headerlink" title="Nacos配置中心的编程方式"></a>Nacos配置中心的编程方式</h4><p>&emsp;&emsp;对于Nacos配置中心来说，也可以使用与注册中心相似的编程方式进行操作，详见<a href="https://github.com/gagaducko/springboot-nacosapi-example">https://github.com/gagaducko/springboot-nacosapi-example</a><br><br>&emsp;&emsp;此为采用编程方式对Nacos配置中心进行管理使用的一种方式。<br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 微服务学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> 注册中心 </tag>
            
            <tag> 配置中心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—微服务—基础知识</title>
      <link href="/2024/09/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2024/09/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h2><p>&emsp;&emsp;首先，要知道什么是微服务，得理解软件架构的演变。<br></p><h2 id="早期单体架构"><a href="#早期单体架构" class="headerlink" title="早期单体架构"></a>早期单体架构</h2><p>&emsp;&emsp;早期的软件，所有的功能都写在一起，整个软件是一个单一的整体，这就是单体架构。<br><br>&emsp;&emsp;单体架构随着软件功能的增加，不可避免的就会就会越来越复杂，存在着许多的缺点<br></p><ul><li>所有功能耦合在一起，互相影响，最终难以管理。</li><li>哪怕只修改一行代码，整个软件就要重新构建和部署，成本非常高。</li><li>因为软件做成了一个整体，不可能每个功能单独开发和测试，只能整体开发和测试，导致必须采用瀑布式的开发模型。</li></ul><p>&emsp;&emsp;简而言之，单体架构的大型软件，不仅开发速度慢，而且会形成难以维护和升级的复杂代码，成为程序员的沉重负担。<br></p><h2 id="面向服务架构（SOA）"><a href="#面向服务架构（SOA）" class="headerlink" title="面向服务架构（SOA）"></a>面向服务架构（SOA）</h2><p>&emsp;&emsp;随之而来的，就是为了解决这些问题，人们提出来，要打破软件代码的耦合，将单体架构的软件拆分成一个个独立的功能单元。<br><br>&emsp;&emsp;大概在二十多年前，随着互联网的出现，功能单元，可以通过远程“服务”的方式来提供，以此诞生出了面向服务架构（service-oriented architecture，简称 SOA）。<br><br>&emsp;&emsp;什么是服务（service）呢？service 就是后台不间断运行、提供某种功能的一个程序。最常见的服务就是 Web 服务，通过80端口向外界提供网页访问。<br><br>&emsp;&emsp;而SOA就是把一个大型的单体程序，拆分成一个个独立服务，也就是说较小的程序，每个程序都是一个独立的功能单元，承担着不同的功能，服务之间通过通信协议连在一起。<br><br>&emsp;&emsp;于此，这种SOA的优点就展现出来了：<br></p><ul><li>每种服务功能单一，相当于一个小型软件，便于开发和测试。</li><li>各个服务独立运行，简化了架构，提高了可靠性。</li><li>鼓励和支持代码重用，同一个服务可以用于多种目的。</li><li>不同服务可以单独开发和部署，便于升级。</li><li>扩展性好，可以容易地加机器、加功能，承受高负载。</li><li>不容易出现单点故障。即使一个服务失败了，不会影响到其他服务。</li></ul><p>&emsp;&emsp;跟单体架构不一样，面向服务架构是语言不敏感的，不同服务可以使用不同的语言和工具开发，可能需要部署在不同的系统和环境。<br><br>&emsp;&emsp;当然这意味着，面向服务架构默认运行在不同服务器上，每台服务器提供一种服务，多台服务器共同组成一个完整的网络应用。<br></p><h2 id="微服务时代"><a href="#微服务时代" class="headerlink" title="微服务时代"></a>微服务时代</h2><p>&emsp;&emsp;在有了SOA之后，随着时代的发展，还需要了解这个部署方式的变化。<br><br>&emsp;&emsp;也就是虚拟化技术的发展。虚拟化技术至今已经走过了三个时代，没有容器化技术的演进就没有docker技术的诞生。<br><br>&emsp;&emsp;首先，是物理机时代，一个物理机，一个os，上面可能会跑很多个程序<br><br>&emsp;&emsp;进一步的，是虚拟机时代，一台物理机器安装多个虚拟机，一个虚拟机跑多个程序。<br><br>&emsp;&emsp;再进一步的，就是容器化的时代，一台物理机安装多个容器实例，一个容器跑多个程序。<br><br>&emsp;&emsp;容器化技术的一大优点就是：开发人员编写代码，本地环境是好的，但是部署到测试环境中，坏了，全是bug，环境不同。容器化技术，就是解决了该问题，将软件程序和运行的基础环境分开，开发人员编码完成后，将程序打包到一个容器镜像中去，镜像中详列出所依赖的环境，不同的容器中运行标准化的镜像，从而从根本上解决了环境不一致的问题。可移植性好，占地小，共享bin和lib<br><br>&emsp;&emsp;2014年，docker的出现，改变了软件开发的面貌，它让程序运行在容器中，每个容器可以分别设定运行环境，只需要占用很少的系统资源就可以使用。<br><br>&emsp;&emsp;显而易见，可以用容器来实现”面向服务架构”，每个服务不再占用一台服务器，而是占用一个容器。<br><br>&emsp;&emsp;这样就不需要多台服务器了，最简单的情况下，本机运行多个容器，只用一台服务器就实现了面向服务架构，这在以前是做不到的。这种实现方式就叫做微服务。<br><br>&emsp;&emsp;所以，微服务到底是什么呢？<br><br>&emsp;&emsp;简单说，微服务就是采用容器技术的面向服务架构。它依然使用”服务”作为功能单元，但是变成了轻量级实现，不需要新增服务器，只需要新建容器（一个进程），所以才叫做”微服务”。<br><br>&emsp;&emsp;微服务架构是一种软件架构风格，其中应用程序以一组小型、独立的服务构建，每个服务运行在自己的进程中，并使用轻量级通信机制进行通信。<br><br>&emsp;&emsp;一个微服务就是一个独立的进程。 这个进程可以运行在本机，也可以运行在别的服务器，或者在云端（比如云服务和云函数 FaaS）。<br><br>&emsp;&emsp;它的特点与面向服务架构是一样的，但因为更轻量级，所以功能的解耦和服务化可以做得更彻底。而且，它可以标准化，同样的容器不管在哪里运行，结果都是一样的，所以市场上有很多 SaaS 产品，提供标准化的微服务。<br><br>&emsp;&emsp;正是由于微服务这些突出的优点，这些年才会变得如此流行。它和容器技术、云服务等一起，一定会在未来的软件开发中，扮演越来越重要的角色。<br></p><h2 id="微服务的技术栈"><a href="#微服务的技术栈" class="headerlink" title="微服务的技术栈"></a>微服务的技术栈</h2><h4 id="docker-k8s"><a href="#docker-k8s" class="headerlink" title="docker &amp;&amp; k8s"></a>docker &amp;&amp; k8s</h4><p>&emsp;&emsp;首先，微服务的核心就是容器化技术，每一个微服务都需要以docker或者其他容器的方式进行使用，每一个服务都在一个独立的容器中。<br><br>&emsp;&emsp;2010年一位年轻小伙子在美国旧金山成立了一家名叫【dotCloud】的公司， 开发了 Docker的核心技术，从此开启了容器技术的时代。<br><br>&emsp;&emsp;后面 dotCloud 公司将自己的容器技术进行了简化和标准化，取名为 Docker，就是大家熟悉的鲸鱼 logo。<br><br>&emsp;&emsp;尽管Docker为容器化的应用程序提供了开放标准，但随着容器越来越多出现了一系列新问题：<br></p><ul><li>如何协调和调度这些容器</li><li>如何在升级应用程序的时候不会中断服务</li><li>如何监视应用程序的运行状况</li><li>如何批量重新启动容器内的程序</li></ul><p>&emsp;&emsp;要解决这些问题，就需要容器编排技术，可以将众多的极其抽象，对外呈现出一台超级大机器，比如现在业界流行的k8s。<br><br>&emsp;&emsp;在业务发展初期只有几个微服务，这时用 Docker 就足够了，但随着业务规模逐渐扩大，容器越来越多，运维人员的工作越来越复杂，这个时候就需要编排系统解救运维人员。<br><br>&emsp;&emsp;换言之，在微服务架构中，使用Docker或其他容器打包发布应用，使用kubernetes扩展、运行、监控应用。<br><br>&emsp;&emsp;此外，没有k8s也可以使用docker，k8s非常复杂，在业务比较简单的时候可以放弃使用k8s<br><br>&emsp;&emsp;然而，需要注意的是，k8s是一个容器编排器，没有容器，没法编排。没有docker这类容器，就无法使用k8s，k8s主要还是和docker这些容器进行搭配，当然，其他容器也是可以的，比如Containerd <br></p><h4 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h4><p>&emsp;&emsp;一个微服务架构的重中之重，除了docker就是服务注册与发现。<br><br>&emsp;&emsp;微服务之间才能相互调用完成整体的业务功能，如何在众多的微服务中找到正确的目标服务地址呢，如果服务的IP或者端口变了，那是否就需要对庞大的微服务们进行修改呢，这就需要服务发现的功能。<br><br>&emsp;&emsp;要发现服务，自然首先要注册服务，最常用的做法就是在服务提供者启动的时候就将地址上报给服务注册中心，这就是服务注册。<br><br>&emsp;&emsp;服务调用方通过订阅服务变更的通知，动态的接收到服务注册中心所推送的服务地址列表，想找哪个服务直接发送就可以了。<br><br>&emsp;&emsp;现在Spring Cloud和Spring Cloud Alibaba常用的服务注册与发现工作包括eureka和nacos等。<br></p><h4 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h4><p>&emsp;&emsp;在微服务架构中，一个微服务可能有很多个实例，每个实例的配置可能都不一样，比如数据库连接地址，数据库用户名密码等，如果每个实例都手动修改，那无疑是非常麻烦的，所以就需要配置管理。<br><br>&emsp;&emsp;配置管理就是将配置信息集中管理，每个实例启动的时候从配置管理中获取配置信息，这样就可以保证每个实例的配置信息都是一致的。<br><br>&emsp;&emsp;配置管理可以使用Spring Cloud Config或者Spring Cloud Alibaba Nacos等。<br></p><h4 id="服务容错"><a href="#服务容错" class="headerlink" title="服务容错"></a>服务容错</h4><p>&emsp;&emsp;在微服务架构中，一个服务可能会调用多个其他服务，如果其中一个服务出现故障，那么整个服务就会崩溃<br><br>&emsp;&emsp;任何服务都不能保证100%不出问题，生产环境复杂多变，服务运行过程中不可避免的发生各种故障（宕机、过载等等），工程师能够做的是在故障发生时尽可能降低影响范围、尽快恢复正常服务。<br><br>&emsp;&emsp;程序员为了避免被祭天，需要引入「熔断、隔离、限流和降级、超时机制」等「服务容错」的机制来保证服务持续可用性。<br><br>&emsp;&emsp;服务容错可以通过熔断、降级、限流等方式来实现，常用的工具有Hystrix、Sentinel等。<br></p><h4 id="服务安全"><a href="#服务安全" class="headerlink" title="服务安全"></a>服务安全</h4><p>&emsp;&emsp;在微服务架构中，服务之间的调用纷繁复杂，有些服务的敏感数据存在安全问题，「服务安全」就是对敏感服务采用安全鉴权机制，对服务的访问需要进行相应的身份验证和授权，防止数据泄露的风险，安全是一个长久的话题，在微服务中也有很多工作要做。<br><br>&emsp;&emsp;服务安全可以通过OAuth2、JWT等方式来实现，常用的工具有Spring Security、OAuth2等。<br></p><h4 id="API网关"><a href="#API网关" class="headerlink" title="API网关"></a>API网关</h4><p>&emsp;&emsp;在微服务架构中，服务之间的调用纷繁复杂，如果每个服务都暴露自己的API接口，那么调用方就需要知道每个服务的API接口，这无疑是非常麻烦的，所以就需要一个统一的入口，这就是API网关。<br><br>&emsp;&emsp;API网关就是将所有的API接口都集中在一个地方，调用方只需要调用API网关，API网关会根据请求的路径和参数，将请求转发到相应的服务，API网关还可以配合其他工具实现负载均衡、限流、鉴权、动态路由等功能。<br></p><h4 id="服务追踪"><a href="#服务追踪" class="headerlink" title="服务追踪"></a>服务追踪</h4><p>&emsp;&emsp;在微服务架构中，服务之间的调用纷繁复杂，如果出现故障，如何快速定位是哪个服务出现了问题呢？那么就需要定位问题，这就需要服务追踪。<br><br>&emsp;&emsp;服务追踪就是将每个请求的调用链路记录下来，这样就可以根据请求的调用链路来定位问题，常用的工具有Zipkin、SkyWalking等。<br></p><h4 id="服务监控"><a href="#服务监控" class="headerlink" title="服务监控"></a>服务监控</h4><p>&emsp;&emsp;此外，服务的运行过程难免需要对其性能等内容进行监控，因此，监控也是必不可少的。<br></p><h2 id="微服务的发展"><a href="#微服务的发展" class="headerlink" title="微服务的发展"></a>微服务的发展</h2><p>&emsp;&emsp;2011年，微服务的概念由Netflix等企业提出，他们需要一种更灵活、独立的服务模式，以满足大规模互联网应用的扩展性需求。与SOA相比，微服务是去中心化的，服务更小、独立，且通过HTTP、消息队列等协议通信。<br><br>&emsp;&emsp;2012-2015年：Netflix开源了一系列微服务相关的工具，这些工具构成了微服务生态系统的基础组件。<br></p><ul><li>Eureka（2012）：Netflix推出的服务注册和发现组件，允许微服务在启动时注册，并通过Eureka客户端进行相互发现。</li><li>Hystrix（2012）：Netflix推出的熔断器，用于处理服务调用失败和网络超时。</li><li>Ribbon（2012）：用于负载均衡的组件。</li><li>etc.</li></ul><p>&emsp;&emsp;此外，2014年，Spring Cloud项目正式发布，整合Netflix的微服务工具，简化了Java开发者构建微服务的工作。<br><br>&emsp;&emsp;到2015年，Spring Cloud成为了微服务架构中流行的框架，提供着一整套解决方案，推动了微服务架构的大规模应用。<br><br>&emsp;&emsp;2017年，随着阿里巴巴开源了Nacos，这一款集服务发现、配置管理于一体的组件，替代了eureka的部分功能。Nacos能够提供更加灵活的配置管理和服务注册功能，并且支持AP和CP（即一致性和可用性）的权衡，逐渐在国内流行起来，替代了部分Eureka的使用场景。其他各型组件也是类似情况，替代方案逐渐增加。<br><br>&emsp;&emsp;2014年，Google开源了Kubernetes（简称K8s），这是一个容器编排工具，可以自动化管理容器化应用的部署、伸缩和运维。Kubernetes逐渐成为云原生应用的核心平台。<br><br>&emsp;&emsp;2017年，服务网格（Service Mesh）架构开始流行，Istio成为其代表工具。服务网格将服务间的通信逻辑（如负载均衡、熔断、流量控制等）从应用中剥离，交由一个独立的基础设施层管理。Istio使用Envoy作为数据平面，负责流量管理，而Istio本身作为控制平面。<br><br>&emsp;&emsp;2020年之后，Kubernetes和服务网格技术结合，成为了微服务架构的主流模式。通过Kubernetes进行容器编排，服务网格则负责微服务之间的通信、流量管理、监控和安全。<br><br>&emsp;&emsp;通过Helm这一Kubernetes的包管理工具，简化了应用的部署。<br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;总的来说呢，微服务架构现在正在变得更加成熟和普及，虽然随着Kubernetes + Istio的流行，传统的微服务框架如Spring Cloud逐渐被替代，但微服务架构的核心思想仍然存在，并且随着技术的不断进步，微服务架构将会变得更加灵活和高效。<br><br>&emsp;&emsp;而原先的框架如Spring Cloud和Spring Cloud Alibaba，其实也有一定的优势，模块丰富，技术成熟，方案完整，在许多场景下也有相当适用的一面。<br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 微服务学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> 理论知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记—通过nginx对UDP做负载均衡</title>
      <link href="/2024/09/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E9%80%9A%E8%BF%87nginx%E5%AF%B9UDP%E5%81%9A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2024/09/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E9%80%9A%E8%BF%87nginx%E5%AF%B9UDP%E5%81%9A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;在某些场合下，大量的请求对于单个实例来说是很难承受的，有可能会导致服务器宕机。<br><br>&emsp;&emsp;因此，所谓负载均衡，就是要把大量的请求按照指定的方式均衡分配给集群中的每台服务器，从而避免这种情况。<br><br>&emsp;&emsp;做负载的方式有许多，此处针对UDP，通过nginx做负载均衡。<br><br>&emsp;&emsp;实现负载均衡前，首先需要实现反向代理，也就是说，请求到某个宇明的时候，该请求默认是被nginx接收到的，然后nginx根据配置，做解析，把特定的请求转发到对应的服务器上去。如下述代码为nginx.conf的一部分。<br></p><figure class="highlight nginx"><figcaption><span>[title] [lang:language] [url] [link text] [additional options]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">stream</span> &#123;<br>    <span class="hljs-section">upstream</span> udp_servers &#123;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.186.1:8081</span>;  <span class="hljs-comment"># 第一个UDP程序实例的地址和端口</span><br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.186.1:8082</span>;  <span class="hljs-comment"># 第二个UDP程序实例的地址和端口</span><br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.186.1:8083</span>;  <span class="hljs-comment"># 第三个UDP程序实例的地址和端口</span><br>    &#125;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">8080</span> udp;<br>        <span class="hljs-attribute">proxy_pass</span> udp_servers;<br>        <span class="hljs-attribute">proxy_responses</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;这段代码是用于nginx服务器配置的，定义了一个UDP流量的负载均衡设置。<br><br>&emsp;&emsp;stream{}这一行表示开始定义了一个流模块的配置块，nginx的流模块可以用于处理TCP和UDP流量。<br><br>&emsp;&emsp;upstream udp_servers {}：这一行定义了一个名为udp_servers的上游服务器组。这个组将包含多个UDP服务器实例，用于处理负载均衡。其中包含的就是可以负载过去的实例对象。<br><br>&emsp;&emsp;server 192.168.186.1:8081;：这是定义在udp_servers组中的第一个服务器实例，其IP地址为192.168.186.1，端口为8081。这表示UDP流量可以被发送到这个地址和端口。<br><br>&emsp;&emsp;另外两个同理。<br><br>&emsp;&emsp;server {}：这一行开始定义一个服务器配置块，它将监听特定的端口，并将流量代理到上游服务器。<br><br>&emsp;&emsp;listen 8080 udp;：这一行指定Nginx服务器将监听UDP协议的8080端口。任何到达这个端口的UDP数据包都将被Nginx处理。<br><br>&emsp;&emsp;proxy_pass udp_servers;：这一行指定了将流量代理到之前定义的udp_servers上游服务器组。这意味着Nginx将根据负载均衡算法将UDP数据包发送到组中的服务器。<br><br>&emsp;&emsp;proxy_responses 1;：这一行配置了代理响应的数量。在这里，它被设置为1，意味着Nginx在接收到来自上游服务器的第一个响应后，就会停止处理并返回给客户端。这在某些UDP协议中很有用，比如DNS查询。<br><br>&emsp;&emsp;这样，监听8080端口的UDP流量，就会被分发到三个不同的UDP服务器实例上。<br><br>&emsp;&emsp;HTTP与TCP是类似的。<br><br>&emsp;&emsp;如下为一个包含8080端口的UDP、8081端口的UDP和8080端口的HTTP负载均衡的nginx.conf的示例，在这个配置中，UDP和HTTP（包块还有websocket）流量都配置在一个端口上，但是NGINX可以根据类型正确的分发它们。<br></p><figure class="highlight nginx"><figcaption><span>[title] [lang:language] [url] [link text] [additional options]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><br><span class="hljs-comment"># HTTP 负载均衡配置</span><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-section">upstream</span> http_servers &#123;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.186.1:8082</span>;  <span class="hljs-comment"># 第一个HTTP实例</span><br>        <span class="hljs-comment"># 更多的HTTP服务实例</span><br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.186.1:8083</span>;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.186.1:8084</span>;<br>    &#125;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">8080</span>;  <span class="hljs-comment"># HTTP 监听端口</span><br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">proxy_pass</span> http://http_servers;<br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;  <span class="hljs-comment"># 确保将正确的 Host 头部传递给上游服务器</span><br>            <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br><br>    <span class="hljs-comment"># WebSocket 专用头部设置</span><br>            <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;<br>            <span class="hljs-attribute">proxy_set_header</span> Upgrade <span class="hljs-variable">$http_upgrade</span>;  <span class="hljs-comment"># 支持 WebSocket 的升级机制</span><br>            <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-string">&quot;upgrade&quot;</span>;<br>            <span class="hljs-attribute">proxy_read_timeout</span> <span class="hljs-number">60s</span>;  <span class="hljs-comment"># 允许 WebSocket 连接保持 60s</span><br>            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># UDP 负载均衡配置</span><br><span class="hljs-section">stream</span> &#123;<br>    <span class="hljs-section">upstream</span> udp_servers1 &#123;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.186.1:8082</span>;  <span class="hljs-comment"># 第一个UDP程序实例的地址和端口</span><br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.186.1:8083</span>;  <span class="hljs-comment"># 第二个UDP程序实例的地址和端口</span><br>        <span class="hljs-comment"># 添加更多UDP服务器实例</span><br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.186.1:8084</span>;  <span class="hljs-comment"># 第三个UDP程序实例的地址和端口</span><br>    &#125;<br><br>    <span class="hljs-section">upstream</span> udp_servers2 &#123;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.186.1:8085</span>;  <span class="hljs-comment"># 第一个UDP程序实例的地址和端口</span><br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.186.1:8086</span>;  <span class="hljs-comment"># 第二个UDP程序实例的地址和端口</span><br>        <span class="hljs-comment"># 添加更多UDP服务器实例</span><br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.186.1:8087</span>;  <span class="hljs-comment"># 第三个UDP程序实例的地址和端口</span><br>    &#125;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">8080</span> udp;<br>        <span class="hljs-attribute">proxy_pass</span> udp_servers1;<br>        <span class="hljs-attribute">proxy_responses</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">8081</span> udp;<br>        <span class="hljs-attribute">proxy_pass</span> udp_servers2;<br>        <span class="hljs-attribute">proxy_responses</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span> <span class="hljs-number">1024</span>;  <span class="hljs-comment"># 默认配置</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;值得注意的是，为了确保nginx代理服务器能够正确的处理websocket连接，需要有一些专门的设置，如上所示。其中：<br><br>&emsp;&emsp;proxy_http_version 1.1;WebSocket 协议需要使用 HTTP&#x2F;1.1 版本。这是因为 WebSocket 连接在建立时，会使用 HTTP 升级机制从标准的 HTTP 或 HTTPS 请求升级到 WebSocket 连接。HTTP&#x2F;1.1 支持这种升级机制。<br><br>&emsp;&emsp;proxy_set_header Upgrade $http_upgrade;这个头部告诉代理服务器，客户端想要升级连接到 WebSocket 协议。$http_upgrade 是一个 Nginx 变量，它包含了客户端请求中的 Upgrade 头部的值。如果客户端请求中包含 Upgrade: websocket，则此变量值为 websocket，否则为空。<br><br>&emsp;&emsp;proxy_set_header Connection “upgrade”;当客户端请求升级到 WebSocket 连接时，它还会发送一个 Connection: Upgrade 头部。这个设置确保了代理服务器将这个头部转发给上游服务器，表示客户端想要升级协议。<br><br>&emsp;&emsp;proxy_read_timeout 60s;WebSocket 连接一旦建立，就会保持开放状态直到客户端或服务器决定关闭。默认情况下，Nginx 的 proxy_read_timeout 设置可能比较短，这可能会导致 WebSocket 连接在没有数据传输时被关闭。将此值设置得更高（如 60 秒），可以确保在没有数据传输的情况下连接不会超时。<br><br>&emsp;&emsp;proxy_set_header X-Forwarded-Proto $scheme;这个头部用于告诉上游服务器，原始请求使用的是 HTTP 还是 HTTPS 协议。这对于那些需要知道客户端原始连接协议的上游服务器来说很重要。$scheme 变量包含了请求的协议（http 或 https）。<br><br>&emsp;&emsp;靠着这一系列的配置，确保nginx能够正确处理websocket的升级握手并且在握手成功后维持连接，从而使得websocket的连接可以正常工作。<br></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> UDP </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
